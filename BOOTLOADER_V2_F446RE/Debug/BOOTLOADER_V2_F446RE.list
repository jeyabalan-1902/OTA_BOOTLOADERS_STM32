
BOOTLOADER_V2_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000468c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  0800485c  0800485c  0000585c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b98  08004b98  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004b98  08004b98  00005b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ba0  08004ba0  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ba0  08004ba0  00005ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ba4  08004ba4  00005ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004ba8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  20000068  08004c10  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08004c10  000063a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b182  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023dd  00000000  00000000  0001121a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  000135f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007cf  00000000  00000000  00014040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ec6  00000000  00000000  0001480f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d166  00000000  00000000  000376d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc236  00000000  00000000  0004483b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110a71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ff4  00000000  00000000  00110ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00113aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004844 	.word	0x08004844

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004844 	.word	0x08004844

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005e6:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <__NVIC_SystemReset+0x24>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005ee:	4904      	ldr	r1, [pc, #16]	@ (8000600 <__NVIC_SystemReset+0x24>)
 80005f0:	4b04      	ldr	r3, [pc, #16]	@ (8000604 <__NVIC_SystemReset+0x28>)
 80005f2:	4313      	orrs	r3, r2
 80005f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f6:	f3bf 8f4f 	dsb	sy
}
 80005fa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <__NVIC_SystemReset+0x20>
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0004 	.word	0x05fa0004

08000608 <bootloader_uart_read_data>:

uint8_t bl_rx_buffer[BL_RX_LEN];
UART_HandleTypeDef *C_UART = NULL;

void  bootloader_uart_read_data(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
    uint8_t rcv_len=0;
 800060e:	2300      	movs	r3, #0
 8000610:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		memset(bl_rx_buffer,0,200);
 8000612:	22c8      	movs	r2, #200	@ 0xc8
 8000614:	2100      	movs	r1, #0
 8000616:	481e      	ldr	r0, [pc, #120]	@ (8000690 <bootloader_uart_read_data+0x88>)
 8000618:	f003 fb92 	bl	8003d40 <memset>
        HAL_UART_Receive(C_UART,bl_rx_buffer,1,HAL_MAX_DELAY);
 800061c:	4b1d      	ldr	r3, [pc, #116]	@ (8000694 <bootloader_uart_read_data+0x8c>)
 800061e:	6818      	ldr	r0, [r3, #0]
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	2201      	movs	r2, #1
 8000626:	491a      	ldr	r1, [pc, #104]	@ (8000690 <bootloader_uart_read_data+0x88>)
 8000628:	f002 fdb9 	bl	800319e <HAL_UART_Receive>
		rcv_len= bl_rx_buffer[0];
 800062c:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <bootloader_uart_read_data+0x88>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(C_UART,&bl_rx_buffer[1],rcv_len,HAL_MAX_DELAY);
 8000632:	4b18      	ldr	r3, [pc, #96]	@ (8000694 <bootloader_uart_read_data+0x8c>)
 8000634:	6818      	ldr	r0, [r3, #0]
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	b29a      	uxth	r2, r3
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	4916      	ldr	r1, [pc, #88]	@ (8000698 <bootloader_uart_read_data+0x90>)
 8000640:	f002 fdad 	bl	800319e <HAL_UART_Receive>
		switch(bl_rx_buffer[1])
 8000644:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <bootloader_uart_read_data+0x88>)
 8000646:	785b      	ldrb	r3, [r3, #1]
 8000648:	3b51      	subs	r3, #81	@ 0x51
 800064a:	2b03      	cmp	r3, #3
 800064c:	d81a      	bhi.n	8000684 <bootloader_uart_read_data+0x7c>
 800064e:	a201      	add	r2, pc, #4	@ (adr r2, 8000654 <bootloader_uart_read_data+0x4c>)
 8000650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000654:	08000665 	.word	0x08000665
 8000658:	0800066d 	.word	0x0800066d
 800065c:	08000675 	.word	0x08000675
 8000660:	0800067d 	.word	0x0800067d
		{
            case BL_GET_CID:
                bootloader_handle_getcid_cmd(bl_rx_buffer);
 8000664:	480a      	ldr	r0, [pc, #40]	@ (8000690 <bootloader_uart_read_data+0x88>)
 8000666:	f000 f8c3 	bl	80007f0 <bootloader_handle_getcid_cmd>
                break;
 800066a:	e00f      	b.n	800068c <bootloader_uart_read_data+0x84>
            case BL_GO_TO_RESET:
            	bootloader_go_reset_cmd(bl_rx_buffer);
 800066c:	4808      	ldr	r0, [pc, #32]	@ (8000690 <bootloader_uart_read_data+0x88>)
 800066e:	f000 f87b 	bl	8000768 <bootloader_go_reset_cmd>
                break;
 8000672:	e00b      	b.n	800068c <bootloader_uart_read_data+0x84>
            case BL_FLASH_ERASE:
                bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8000674:	4806      	ldr	r0, [pc, #24]	@ (8000690 <bootloader_uart_read_data+0x88>)
 8000676:	f000 f907 	bl	8000888 <bootloader_handle_flash_erase_cmd>
                break;
 800067a:	e007      	b.n	800068c <bootloader_uart_read_data+0x84>
            case BL_MEM_WRITE:
                bootloader_handle_mem_write_cmd(bl_rx_buffer);
 800067c:	4804      	ldr	r0, [pc, #16]	@ (8000690 <bootloader_uart_read_data+0x88>)
 800067e:	f000 f96d 	bl	800095c <bootloader_handle_mem_write_cmd>
                break;
 8000682:	e003      	b.n	800068c <bootloader_uart_read_data+0x84>
            default:
                printf("BL_MSG:Invalid command code received from host \n");
 8000684:	4805      	ldr	r0, [pc, #20]	@ (800069c <bootloader_uart_read_data+0x94>)
 8000686:	f003 fa7b 	bl	8003b80 <puts>
                break;
 800068a:	bf00      	nop
		memset(bl_rx_buffer,0,200);
 800068c:	e7c1      	b.n	8000612 <bootloader_uart_read_data+0xa>
 800068e:	bf00      	nop
 8000690:	20000084 	.word	0x20000084
 8000694:	2000014c 	.word	0x2000014c
 8000698:	20000085 	.word	0x20000085
 800069c:	0800485c 	.word	0x0800485c

080006a0 <bootloader_jump_to_user_app>:
		}
	}
}

void bootloader_jump_to_user_app(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
	 void (*app_reset_handler)(void);

	    printf("BL_MSG: bootloader_jump_to_user_app\n");
 80006a6:	4828      	ldr	r0, [pc, #160]	@ (8000748 <bootloader_jump_to_user_app+0xa8>)
 80006a8:	f003 fa6a 	bl	8003b80 <puts>

	    uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 80006ac:	4b27      	ldr	r3, [pc, #156]	@ (800074c <bootloader_jump_to_user_app+0xac>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	613b      	str	r3, [r7, #16]
	    uint32_t reset_handler_address = *(volatile uint32_t *)(FLASH_SECTOR2_BASE_ADDRESS + 4);
 80006b2:	4b27      	ldr	r3, [pc, #156]	@ (8000750 <bootloader_jump_to_user_app+0xb0>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	60fb      	str	r3, [r7, #12]
		printf("MSP: 0x%08lX", msp_value);
 80006b8:	6939      	ldr	r1, [r7, #16]
 80006ba:	4826      	ldr	r0, [pc, #152]	@ (8000754 <bootloader_jump_to_user_app+0xb4>)
 80006bc:	f003 f9f8 	bl	8003ab0 <iprintf>
		printf("Reset handler: 0x%08lX", reset_handler_address);
 80006c0:	68f9      	ldr	r1, [r7, #12]
 80006c2:	4825      	ldr	r0, [pc, #148]	@ (8000758 <bootloader_jump_to_user_app+0xb8>)
 80006c4:	f003 f9f4 	bl	8003ab0 <iprintf>

		HAL_Delay(1000);
 80006c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006cc:	f000 ffe8 	bl	80016a0 <HAL_Delay>

	    HAL_RCC_DeInit();
 80006d0:	f002 f8f4 	bl	80028bc <HAL_RCC_DeInit>
		HAL_DeInit();
 80006d4:	f000 ff5e 	bl	8001594 <HAL_DeInit>

		SysTick->CTRL = 0;
 80006d8:	4b20      	ldr	r3, [pc, #128]	@ (800075c <bootloader_jump_to_user_app+0xbc>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
		SysTick->LOAD = 0;
 80006de:	4b1f      	ldr	r3, [pc, #124]	@ (800075c <bootloader_jump_to_user_app+0xbc>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
 80006e4:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <bootloader_jump_to_user_app+0xbc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]

		for (int i = 0; i < 8; i++) {
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
 80006ee:	e010      	b.n	8000712 <bootloader_jump_to_user_app+0x72>
			NVIC->ICER[i] = 0xFFFFFFFF;
 80006f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000760 <bootloader_jump_to_user_app+0xc0>)
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	3320      	adds	r3, #32
 80006f6:	f04f 31ff 	mov.w	r1, #4294967295
 80006fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			NVIC->ICPR[i] = 0xFFFFFFFF;
 80006fe:	4a18      	ldr	r2, [pc, #96]	@ (8000760 <bootloader_jump_to_user_app+0xc0>)
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	3360      	adds	r3, #96	@ 0x60
 8000704:	f04f 31ff 	mov.w	r1, #4294967295
 8000708:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 8; i++) {
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	3301      	adds	r3, #1
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	2b07      	cmp	r3, #7
 8000716:	ddeb      	ble.n	80006f0 <bootloader_jump_to_user_app+0x50>
		}

	    SCB->VTOR = FLASH_SECTOR2_BASE_ADDRESS;
 8000718:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <bootloader_jump_to_user_app+0xc4>)
 800071a:	4a0c      	ldr	r2, [pc, #48]	@ (800074c <bootloader_jump_to_user_app+0xac>)
 800071c:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 800071e:	f3bf 8f4f 	dsb	sy
}
 8000722:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000724:	f3bf 8f6f 	isb	sy
}
 8000728:	bf00      	nop
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f383 8808 	msr	MSP, r3
}
 8000734:	bf00      	nop
		__DSB();
		__ISB();
	    __set_MSP(msp_value);

	    app_reset_handler = (void *)reset_handler_address;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	60bb      	str	r3, [r7, #8]
	    app_reset_handler();
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	4798      	blx	r3

}
 800073e:	bf00      	nop
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	0800488c 	.word	0x0800488c
 800074c:	08008000 	.word	0x08008000
 8000750:	08008004 	.word	0x08008004
 8000754:	080048b0 	.word	0x080048b0
 8000758:	080048c0 	.word	0x080048c0
 800075c:	e000e010 	.word	0xe000e010
 8000760:	e000e100 	.word	0xe000e100
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <bootloader_go_reset_cmd>:

void bootloader_go_reset_cmd(uint8_t *pBuffer)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	printf("BL_MSG:bootloader_go_reset_cmd\n");
 8000770:	481a      	ldr	r0, [pc, #104]	@ (80007dc <bootloader_go_reset_cmd+0x74>)
 8000772:	f003 fa05 	bl	8003b80 <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000776:	4b1a      	ldr	r3, [pc, #104]	@ (80007e0 <bootloader_go_reset_cmd+0x78>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	3301      	adds	r3, #1
 800077c:	60fb      	str	r3, [r7, #12]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	3b04      	subs	r3, #4
 8000782:	4a17      	ldr	r2, [pc, #92]	@ (80007e0 <bootloader_go_reset_cmd+0x78>)
 8000784:	4413      	add	r3, r2
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	60bb      	str	r3, [r7, #8]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	3b04      	subs	r3, #4
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	4619      	mov	r1, r3
 8000792:	4813      	ldr	r0, [pc, #76]	@ (80007e0 <bootloader_go_reset_cmd+0x78>)
 8000794:	f000 f99a 	bl	8000acc <bootloader_verify_crc>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d115      	bne.n	80007ca <bootloader_go_reset_cmd+0x62>
	{
		 printf("BL_MSG:checksum success !!\n");
 800079e:	4811      	ldr	r0, [pc, #68]	@ (80007e4 <bootloader_go_reset_cmd+0x7c>)
 80007a0:	f003 f9ee 	bl	8003b80 <puts>
		 bootloader_send_ack(pBuffer[0],0);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f95e 	bl	8000a6c <bootloader_send_ack>
		 bootloader_uart_write_data(ADDR_VALID, 1);
 80007b0:	2101      	movs	r1, #1
 80007b2:	2000      	movs	r0, #0
 80007b4:	f000 f9be 	bl	8000b34 <bootloader_uart_write_data>
		 printf("BL_MSG:Going to reset... !!\n");
 80007b8:	480b      	ldr	r0, [pc, #44]	@ (80007e8 <bootloader_go_reset_cmd+0x80>)
 80007ba:	f003 f9e1 	bl	8003b80 <puts>
		 HAL_Delay(1000);
 80007be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007c2:	f000 ff6d 	bl	80016a0 <HAL_Delay>
		 NVIC_SystemReset();
 80007c6:	f7ff ff09 	bl	80005dc <__NVIC_SystemReset>
	}
	else
	{
		 printf("BL_MSG:checksum fail !!\n");
 80007ca:	4808      	ldr	r0, [pc, #32]	@ (80007ec <bootloader_go_reset_cmd+0x84>)
 80007cc:	f003 f9d8 	bl	8003b80 <puts>
		 bootloader_send_nack();
 80007d0:	f000 f968 	bl	8000aa4 <bootloader_send_nack>
	}
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	080048d8 	.word	0x080048d8
 80007e0:	20000084 	.word	0x20000084
 80007e4:	080048f8 	.word	0x080048f8
 80007e8:	08004914 	.word	0x08004914
 80007ec:	08004930 	.word	0x08004930

080007f0 <bootloader_handle_getcid_cmd>:

 void bootloader_handle_getcid_cmd(uint8_t *pBuffer)
 {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 	uint16_t bl_cid_num = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	81fb      	strh	r3, [r7, #14]
 	printf("BL_MSG:bootloader_handle_getcid_cmd\n");
 80007fc:	481d      	ldr	r0, [pc, #116]	@ (8000874 <bootloader_handle_getcid_cmd+0x84>)
 80007fe:	f003 f9bf 	bl	8003b80 <puts>

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000802:	4b1d      	ldr	r3, [pc, #116]	@ (8000878 <bootloader_handle_getcid_cmd+0x88>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	3301      	adds	r3, #1
 8000808:	617b      	str	r3, [r7, #20]

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3b04      	subs	r3, #4
 800080e:	4a1a      	ldr	r2, [pc, #104]	@ (8000878 <bootloader_handle_getcid_cmd+0x88>)
 8000810:	4413      	add	r3, r2
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	613b      	str	r3, [r7, #16]

 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	3b04      	subs	r3, #4
 800081a:	693a      	ldr	r2, [r7, #16]
 800081c:	4619      	mov	r1, r3
 800081e:	4816      	ldr	r0, [pc, #88]	@ (8000878 <bootloader_handle_getcid_cmd+0x88>)
 8000820:	f000 f954 	bl	8000acc <bootloader_verify_crc>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d11a      	bne.n	8000860 <bootloader_handle_getcid_cmd+0x70>
 	{
         printf("BL_MSG:checksum success !!\n");
 800082a:	4814      	ldr	r0, [pc, #80]	@ (800087c <bootloader_handle_getcid_cmd+0x8c>)
 800082c:	f003 f9a8 	bl	8003b80 <puts>
         bootloader_send_ack(pBuffer[0],2);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2102      	movs	r1, #2
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f918 	bl	8000a6c <bootloader_send_ack>
         bl_cid_num = get_mcu_chip_id();
 800083c:	f000 f98e 	bl	8000b5c <get_mcu_chip_id>
 8000840:	4603      	mov	r3, r0
 8000842:	81fb      	strh	r3, [r7, #14]
         printf("BL_MSG:MCU id : %d %#x !!\n",bl_cid_num, bl_cid_num);
 8000844:	89fb      	ldrh	r3, [r7, #14]
 8000846:	4619      	mov	r1, r3
 8000848:	89fb      	ldrh	r3, [r7, #14]
 800084a:	461a      	mov	r2, r3
 800084c:	480c      	ldr	r0, [pc, #48]	@ (8000880 <bootloader_handle_getcid_cmd+0x90>)
 800084e:	f003 f92f 	bl	8003ab0 <iprintf>
         bootloader_uart_write_data((uint8_t *)&bl_cid_num,2);
 8000852:	f107 030e 	add.w	r3, r7, #14
 8000856:	2102      	movs	r1, #2
 8000858:	4618      	mov	r0, r3
 800085a:	f000 f96b 	bl	8000b34 <bootloader_uart_write_data>
 	else
 	{
         printf("BL_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}
 }
 800085e:	e004      	b.n	800086a <bootloader_handle_getcid_cmd+0x7a>
         printf("BL_MSG:checksum fail !!\n");
 8000860:	4808      	ldr	r0, [pc, #32]	@ (8000884 <bootloader_handle_getcid_cmd+0x94>)
 8000862:	f003 f98d 	bl	8003b80 <puts>
         bootloader_send_nack();
 8000866:	f000 f91d 	bl	8000aa4 <bootloader_send_nack>
 }
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	08004948 	.word	0x08004948
 8000878:	20000084 	.word	0x20000084
 800087c:	080048f8 	.word	0x080048f8
 8000880:	0800496c 	.word	0x0800496c
 8000884:	08004930 	.word	0x08004930

08000888 <bootloader_handle_flash_erase_cmd>:

 void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
 {
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
     uint8_t erase_status = 0x00;
 8000890:	2300      	movs	r3, #0
 8000892:	73fb      	strb	r3, [r7, #15]
     printf("BL_MSG:bootloader_handle_flash_erase_cmd\n");
 8000894:	482a      	ldr	r0, [pc, #168]	@ (8000940 <bootloader_handle_flash_erase_cmd+0xb8>)
 8000896:	f003 f973 	bl	8003b80 <puts>

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 800089a:	4b2a      	ldr	r3, [pc, #168]	@ (8000944 <bootloader_handle_flash_erase_cmd+0xbc>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	3301      	adds	r3, #1
 80008a0:	617b      	str	r3, [r7, #20]

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	3b04      	subs	r3, #4
 80008a6:	4a27      	ldr	r2, [pc, #156]	@ (8000944 <bootloader_handle_flash_erase_cmd+0xbc>)
 80008a8:	4413      	add	r3, r2
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	613b      	str	r3, [r7, #16]

 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	3b04      	subs	r3, #4
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	4619      	mov	r1, r3
 80008b6:	4823      	ldr	r0, [pc, #140]	@ (8000944 <bootloader_handle_flash_erase_cmd+0xbc>)
 80008b8:	f000 f908 	bl	8000acc <bootloader_verify_crc>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d135      	bne.n	800092e <bootloader_handle_flash_erase_cmd+0xa6>
 	{
         printf("BL_MSG:checksum success !!\n");
 80008c2:	4821      	ldr	r0, [pc, #132]	@ (8000948 <bootloader_handle_flash_erase_cmd+0xc0>)
 80008c4:	f003 f95c 	bl	8003b80 <puts>
         bootloader_send_ack(pBuffer[0],1);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2101      	movs	r1, #1
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f8cc 	bl	8000a6c <bootloader_send_ack>
         printf("BL_MSG:initial_sector : %d  no_ofsectors: %d\n",pBuffer[2],pBuffer[3]);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3302      	adds	r3, #2
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	4619      	mov	r1, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3303      	adds	r3, #3
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	461a      	mov	r2, r3
 80008e4:	4819      	ldr	r0, [pc, #100]	@ (800094c <bootloader_handle_flash_erase_cmd+0xc4>)
 80008e6:	f003 f8e3 	bl	8003ab0 <iprintf>

         HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
 80008ea:	2201      	movs	r2, #1
 80008ec:	2120      	movs	r1, #32
 80008ee:	4818      	ldr	r0, [pc, #96]	@ (8000950 <bootloader_handle_flash_erase_cmd+0xc8>)
 80008f0:	f001 fcb6 	bl	8002260 <HAL_GPIO_WritePin>
         erase_status = execute_flash_erase(pBuffer[2] , pBuffer[3]);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3302      	adds	r3, #2
 80008f8:	781a      	ldrb	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	3303      	adds	r3, #3
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	4610      	mov	r0, r2
 8000904:	f000 f97a 	bl	8000bfc <execute_flash_erase>
 8000908:	4603      	mov	r3, r0
 800090a:	73fb      	strb	r3, [r7, #15]
         HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);
 800090c:	2200      	movs	r2, #0
 800090e:	2120      	movs	r1, #32
 8000910:	480f      	ldr	r0, [pc, #60]	@ (8000950 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000912:	f001 fca5 	bl	8002260 <HAL_GPIO_WritePin>

         printf("BL_MSG: flash erase status: %#x\n",erase_status);
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	4619      	mov	r1, r3
 800091a:	480e      	ldr	r0, [pc, #56]	@ (8000954 <bootloader_handle_flash_erase_cmd+0xcc>)
 800091c:	f003 f8c8 	bl	8003ab0 <iprintf>

         bootloader_uart_write_data(&erase_status,1);
 8000920:	f107 030f 	add.w	r3, r7, #15
 8000924:	2101      	movs	r1, #1
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f904 	bl	8000b34 <bootloader_uart_write_data>
 	}else
 	{
         printf("BL_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}
 }
 800092c:	e004      	b.n	8000938 <bootloader_handle_flash_erase_cmd+0xb0>
         printf("BL_MSG:checksum fail !!\n");
 800092e:	480a      	ldr	r0, [pc, #40]	@ (8000958 <bootloader_handle_flash_erase_cmd+0xd0>)
 8000930:	f003 f926 	bl	8003b80 <puts>
         bootloader_send_nack();
 8000934:	f000 f8b6 	bl	8000aa4 <bootloader_send_nack>
 }
 8000938:	bf00      	nop
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	08004988 	.word	0x08004988
 8000944:	20000084 	.word	0x20000084
 8000948:	080048f8 	.word	0x080048f8
 800094c:	080049b4 	.word	0x080049b4
 8000950:	40020000 	.word	0x40020000
 8000954:	080049e4 	.word	0x080049e4
 8000958:	08004930 	.word	0x08004930

0800095c <bootloader_handle_mem_write_cmd>:


 void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
 {
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 	uint8_t addr_valid = ADDR_VALID;
 8000964:	2300      	movs	r3, #0
 8000966:	77fb      	strb	r3, [r7, #31]
 	uint8_t write_status = 0x00;
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]
 	uint8_t chksum =0, len=0;
 800096c:	2300      	movs	r3, #0
 800096e:	77bb      	strb	r3, [r7, #30]
 8000970:	2300      	movs	r3, #0
 8000972:	777b      	strb	r3, [r7, #29]
 	len = pBuffer[0];
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	777b      	strb	r3, [r7, #29]
 	uint8_t payload_len = pBuffer[6];
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	799b      	ldrb	r3, [r3, #6]
 800097e:	773b      	strb	r3, [r7, #28]

 	uint32_t mem_address = *((uint32_t *) ( &pBuffer[2]) );
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000986:	61bb      	str	r3, [r7, #24]

 	chksum = pBuffer[len];
 8000988:	7f7b      	ldrb	r3, [r7, #29]
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	77bb      	strb	r3, [r7, #30]

     printf("BL_MSG:bootloader_handle_mem_write_cmd\n");
 8000992:	482e      	ldr	r0, [pc, #184]	@ (8000a4c <bootloader_handle_mem_write_cmd+0xf0>)
 8000994:	f003 f8f4 	bl	8003b80 <puts>

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000998:	4b2d      	ldr	r3, [pc, #180]	@ (8000a50 <bootloader_handle_mem_write_cmd+0xf4>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	3301      	adds	r3, #1
 800099e:	617b      	str	r3, [r7, #20]

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	3b04      	subs	r3, #4
 80009a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000a50 <bootloader_handle_mem_write_cmd+0xf4>)
 80009a6:	4413      	add	r3, r2
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	613b      	str	r3, [r7, #16]


 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	3b04      	subs	r3, #4
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	4619      	mov	r1, r3
 80009b4:	4826      	ldr	r0, [pc, #152]	@ (8000a50 <bootloader_handle_mem_write_cmd+0xf4>)
 80009b6:	f000 f889 	bl	8000acc <bootloader_verify_crc>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d13b      	bne.n	8000a38 <bootloader_handle_mem_write_cmd+0xdc>
 	{
         printf("BL_MSG:checksum success !!\n");
 80009c0:	4824      	ldr	r0, [pc, #144]	@ (8000a54 <bootloader_handle_mem_write_cmd+0xf8>)
 80009c2:	f003 f8dd 	bl	8003b80 <puts>

         bootloader_send_ack(pBuffer[0],1);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2101      	movs	r1, #1
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 f84d 	bl	8000a6c <bootloader_send_ack>
         printf("BL_MSG: write addr:%#lx\n", mem_address);
 80009d2:	69b9      	ldr	r1, [r7, #24]
 80009d4:	4820      	ldr	r0, [pc, #128]	@ (8000a58 <bootloader_handle_mem_write_cmd+0xfc>)
 80009d6:	f003 f86b 	bl	8003ab0 <iprintf>

 		if( verify_address(mem_address) == ADDR_VALID )
 80009da:	69b8      	ldr	r0, [r7, #24]
 80009dc:	f000 f8d0 	bl	8000b80 <verify_address>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d11c      	bne.n	8000a20 <bootloader_handle_mem_write_cmd+0xc4>
 		{

             printf("BL_MSG: valid mem write address\n");
 80009e6:	481d      	ldr	r0, [pc, #116]	@ (8000a5c <bootloader_handle_mem_write_cmd+0x100>)
 80009e8:	f003 f8ca 	bl	8003b80 <puts>

             //glow the led to indicate bootloader is currently writing to memory
             HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2120      	movs	r1, #32
 80009f0:	481b      	ldr	r0, [pc, #108]	@ (8000a60 <bootloader_handle_mem_write_cmd+0x104>)
 80009f2:	f001 fc35 	bl	8002260 <HAL_GPIO_WritePin>

             //execute mem write
             write_status = execute_mem_write(&pBuffer[7],mem_address, payload_len);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	3307      	adds	r3, #7
 80009fa:	7f3a      	ldrb	r2, [r7, #28]
 80009fc:	69b9      	ldr	r1, [r7, #24]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 f943 	bl	8000c8a <execute_mem_write>
 8000a04:	4603      	mov	r3, r0
 8000a06:	73fb      	strb	r3, [r7, #15]

             //turn off the led to indicate memory write is over
             HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2120      	movs	r1, #32
 8000a0c:	4814      	ldr	r0, [pc, #80]	@ (8000a60 <bootloader_handle_mem_write_cmd+0x104>)
 8000a0e:	f001 fc27 	bl	8002260 <HAL_GPIO_WritePin>

             //inform host about the status
             bootloader_uart_write_data(&write_status,1);
 8000a12:	f107 030f 	add.w	r3, r7, #15
 8000a16:	2101      	movs	r1, #1
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 f88b 	bl	8000b34 <bootloader_uart_write_data>
 	else
 	{
         printf("BL_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}
 }
 8000a1e:	e010      	b.n	8000a42 <bootloader_handle_mem_write_cmd+0xe6>
             printf("BL_MSG: invalid mem write address\n");
 8000a20:	4810      	ldr	r0, [pc, #64]	@ (8000a64 <bootloader_handle_mem_write_cmd+0x108>)
 8000a22:	f003 f8ad 	bl	8003b80 <puts>
             write_status = ADDR_INVALID;
 8000a26:	2301      	movs	r3, #1
 8000a28:	73fb      	strb	r3, [r7, #15]
             bootloader_uart_write_data(&write_status,1);
 8000a2a:	f107 030f 	add.w	r3, r7, #15
 8000a2e:	2101      	movs	r1, #1
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 f87f 	bl	8000b34 <bootloader_uart_write_data>
 }
 8000a36:	e004      	b.n	8000a42 <bootloader_handle_mem_write_cmd+0xe6>
         printf("BL_MSG:checksum fail !!\n");
 8000a38:	480b      	ldr	r0, [pc, #44]	@ (8000a68 <bootloader_handle_mem_write_cmd+0x10c>)
 8000a3a:	f003 f8a1 	bl	8003b80 <puts>
         bootloader_send_nack();
 8000a3e:	f000 f831 	bl	8000aa4 <bootloader_send_nack>
 }
 8000a42:	bf00      	nop
 8000a44:	3720      	adds	r7, #32
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	08004a08 	.word	0x08004a08
 8000a50:	20000084 	.word	0x20000084
 8000a54:	080048f8 	.word	0x080048f8
 8000a58:	08004a30 	.word	0x08004a30
 8000a5c:	08004a4c 	.word	0x08004a4c
 8000a60:	40020000 	.word	0x40020000
 8000a64:	08004a6c 	.word	0x08004a6c
 8000a68:	08004930 	.word	0x08004930

08000a6c <bootloader_send_ack>:


 void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
 {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	460a      	mov	r2, r1
 8000a76:	71fb      	strb	r3, [r7, #7]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	71bb      	strb	r3, [r7, #6]
 	 //here we send 2 byte.. first byte is ack and the second byte is len value
 	uint8_t ack_buf[2];
 	ack_buf[0] = BL_ACK;
 8000a7c:	23a5      	movs	r3, #165	@ 0xa5
 8000a7e:	733b      	strb	r3, [r7, #12]
 	ack_buf[1] = follow_len;
 8000a80:	79bb      	ldrb	r3, [r7, #6]
 8000a82:	737b      	strb	r3, [r7, #13]
 	HAL_UART_Transmit(C_UART,ack_buf,2,HAL_MAX_DELAY);
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <bootloader_send_ack+0x34>)
 8000a86:	6818      	ldr	r0, [r3, #0]
 8000a88:	f107 010c 	add.w	r1, r7, #12
 8000a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a90:	2202      	movs	r2, #2
 8000a92:	f002 faf9 	bl	8003088 <HAL_UART_Transmit>

 }
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000014c 	.word	0x2000014c

08000aa4 <bootloader_send_nack>:

 /*This function sends NACK */
 void bootloader_send_nack(void)
 {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 	uint8_t nack = BL_NACK;
 8000aaa:	237f      	movs	r3, #127	@ 0x7f
 8000aac:	71fb      	strb	r3, [r7, #7]
 	HAL_UART_Transmit(C_UART,&nack,1,HAL_MAX_DELAY);
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <bootloader_send_nack+0x24>)
 8000ab0:	6818      	ldr	r0, [r3, #0]
 8000ab2:	1df9      	adds	r1, r7, #7
 8000ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f002 fae5 	bl	8003088 <HAL_UART_Transmit>
 }
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000014c 	.word	0x2000014c

08000acc <bootloader_verify_crc>:

 //This verifies the CRC of the given buffer in pData .
 uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
 {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
     uint32_t uwCRCValue=0xff;
 8000ad8:	23ff      	movs	r3, #255	@ 0xff
 8000ada:	61fb      	str	r3, [r7, #28]

     for (uint32_t i=0 ; i < len ; i++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]
 8000ae0:	e00f      	b.n	8000b02 <bootloader_verify_crc+0x36>
 	{
         uint32_t i_data = pData[i];
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	617b      	str	r3, [r7, #20]
         uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2201      	movs	r2, #1
 8000af2:	4619      	mov	r1, r3
 8000af4:	480e      	ldr	r0, [pc, #56]	@ (8000b30 <bootloader_verify_crc+0x64>)
 8000af6:	f000 fef8 	bl	80018ea <HAL_CRC_Accumulate>
 8000afa:	61f8      	str	r0, [r7, #28]
     for (uint32_t i=0 ; i < len ; i++)
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	3301      	adds	r3, #1
 8000b00:	61bb      	str	r3, [r7, #24]
 8000b02:	69ba      	ldr	r2, [r7, #24]
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d3eb      	bcc.n	8000ae2 <bootloader_verify_crc+0x16>
 	}

 	 /* Reset CRC Calculation Unit */
   __HAL_CRC_DR_RESET(&hcrc);
 8000b0a:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <bootloader_verify_crc+0x64>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	689a      	ldr	r2, [r3, #8]
 8000b10:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <bootloader_verify_crc+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f042 0201 	orr.w	r2, r2, #1
 8000b18:	609a      	str	r2, [r3, #8]

 	if( uwCRCValue == crc_host)
 8000b1a:	69fa      	ldr	r2, [r7, #28]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d101      	bne.n	8000b26 <bootloader_verify_crc+0x5a>
 	{
 		return VERIFY_CRC_SUCCESS;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e000      	b.n	8000b28 <bootloader_verify_crc+0x5c>
 	}

 	return VERIFY_CRC_FAIL;
 8000b26:	2301      	movs	r3, #1
 }
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3720      	adds	r7, #32
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000150 	.word	0x20000150

08000b34 <bootloader_uart_write_data>:


 void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
 {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
     /*you can replace the below ST's USART driver API call with your MCUs driver API call */
 	HAL_UART_Transmit(C_UART,pBuffer,len,HAL_MAX_DELAY);
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <bootloader_uart_write_data+0x24>)
 8000b40:	6818      	ldr	r0, [r3, #0]
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	b29a      	uxth	r2, r3
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	f002 fa9c 	bl	8003088 <HAL_UART_Transmit>

 }
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	2000014c 	.word	0x2000014c

08000b5c <get_mcu_chip_id>:

 uint16_t get_mcu_chip_id(void)
 {
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 	uint16_t cid;
 	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <get_mcu_chip_id+0x20>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b6c:	80fb      	strh	r3, [r7, #6]
 	return  cid;
 8000b6e:	88fb      	ldrh	r3, [r7, #6]
 }
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e0042000 	.word	0xe0042000

08000b80 <verify_address>:


 uint8_t verify_address(uint32_t go_address)
 {
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b8e:	d305      	bcc.n	8000b9c <verify_address+0x1c>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a15      	ldr	r2, [pc, #84]	@ (8000be8 <verify_address+0x68>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d801      	bhi.n	8000b9c <verify_address+0x1c>
 	{
 		return ADDR_VALID;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	e01e      	b.n	8000bda <verify_address+0x5a>
 	}
 	else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a12      	ldr	r2, [pc, #72]	@ (8000be8 <verify_address+0x68>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d305      	bcc.n	8000bb0 <verify_address+0x30>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a11      	ldr	r2, [pc, #68]	@ (8000bec <verify_address+0x6c>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d801      	bhi.n	8000bb0 <verify_address+0x30>
 	{
 		return ADDR_VALID;
 8000bac:	2300      	movs	r3, #0
 8000bae:	e014      	b.n	8000bda <verify_address+0x5a>
 	}
 	else if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000bb6:	d305      	bcc.n	8000bc4 <verify_address+0x44>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf0 <verify_address+0x70>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d801      	bhi.n	8000bc4 <verify_address+0x44>
 	{
 		return ADDR_VALID;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	e00a      	b.n	8000bda <verify_address+0x5a>
 	}
 	else if ( go_address >= BKPSRAM_BASE && go_address <= BKPSRAM_END)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf4 <verify_address+0x74>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d305      	bcc.n	8000bd8 <verify_address+0x58>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <verify_address+0x78>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d801      	bhi.n	8000bd8 <verify_address+0x58>
 	{
 		return ADDR_VALID;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e000      	b.n	8000bda <verify_address+0x5a>
 	}
 	else
 		return ADDR_INVALID;
 8000bd8:	2301      	movs	r3, #1
 }
 8000bda:	4618      	mov	r0, r3
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	2001c000 	.word	0x2001c000
 8000bec:	20020000 	.word	0x20020000
 8000bf0:	0807ffff 	.word	0x0807ffff
 8000bf4:	40024000 	.word	0x40024000
 8000bf8:	40025000 	.word	0x40025000

08000bfc <execute_flash_erase>:


uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
 {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	@ 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	460a      	mov	r2, r1
 8000c06:	71fb      	strb	r3, [r7, #7]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	71bb      	strb	r3, [r7, #6]
 	FLASH_EraseInitTypeDef flashErase_handle;
 	uint32_t sectorError;
 	HAL_StatusTypeDef status;


 	if( number_of_sector > 8 )
 8000c0c:	79bb      	ldrb	r3, [r7, #6]
 8000c0e:	2b08      	cmp	r3, #8
 8000c10:	d901      	bls.n	8000c16 <execute_flash_erase+0x1a>
 		return INVALID_SECTOR;
 8000c12:	2304      	movs	r3, #4
 8000c14:	e035      	b.n	8000c82 <execute_flash_erase+0x86>

 	if( (sector_number == 0xff ) || (sector_number <= 7) )
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2bff      	cmp	r3, #255	@ 0xff
 8000c1a:	d002      	beq.n	8000c22 <execute_flash_erase+0x26>
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b07      	cmp	r3, #7
 8000c20:	d82e      	bhi.n	8000c80 <execute_flash_erase+0x84>
 	{
 		if(sector_number == (uint8_t) 0xff)
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	2bff      	cmp	r3, #255	@ 0xff
 8000c26:	d102      	bne.n	8000c2e <execute_flash_erase+0x32>
 		{
 			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	e012      	b.n	8000c54 <execute_flash_erase+0x58>
 		}else
 		{
 		    /*Here we are just calculating how many sectors needs to erased */
 			uint8_t remanining_sector = 8 - sector_number;
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f1c3 0308 	rsb	r3, r3, #8
 8000c34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
             if( number_of_sector > remanining_sector)
 8000c38:	79ba      	ldrb	r2, [r7, #6]
 8000c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d902      	bls.n	8000c48 <execute_flash_erase+0x4c>
             {
             	number_of_sector = remanining_sector;
 8000c42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c46:	71bb      	strb	r3, [r7, #6]
             }
 			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	613b      	str	r3, [r7, #16]
 			flashErase_handle.Sector = sector_number; // this is the initial sector
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	61bb      	str	r3, [r7, #24]
 			flashErase_handle.NbSectors = number_of_sector;
 8000c50:	79bb      	ldrb	r3, [r7, #6]
 8000c52:	61fb      	str	r3, [r7, #28]
 		}
 		flashErase_handle.Banks = FLASH_BANK_1;
 8000c54:	2301      	movs	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]

 		/*Get access to touch the flash registers */
 		HAL_FLASH_Unlock();
 8000c58:	f000 fec4 	bl	80019e4 <HAL_FLASH_Unlock>
 		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // our mcu will work on this voltage range
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	623b      	str	r3, [r7, #32]
 		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8000c60:	f107 020c 	add.w	r2, r7, #12
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	4611      	mov	r1, r2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 f82c 	bl	8001cc8 <HAL_FLASHEx_Erase>
 8000c70:	4603      	mov	r3, r0
 8000c72:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 		HAL_FLASH_Lock();
 8000c76:	f000 fed7 	bl	8001a28 <HAL_FLASH_Lock>

 		return status;
 8000c7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000c7e:	e000      	b.n	8000c82 <execute_flash_erase+0x86>
 	}


 	return INVALID_SECTOR;
 8000c80:	2304      	movs	r3, #4
 }
 8000c82:	4618      	mov	r0, r3
 8000c84:	3728      	adds	r7, #40	@ 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <execute_mem_write>:


 uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
 {
 8000c8a:	b5b0      	push	{r4, r5, r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	60f8      	str	r0, [r7, #12]
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
     uint8_t status=HAL_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	75fb      	strb	r3, [r7, #23]

     //We have to unlock flash module to get control of registers
     HAL_FLASH_Unlock();
 8000c9a:	f000 fea3 	bl	80019e4 <HAL_FLASH_Unlock>

     for(uint32_t i = 0 ; i <len ; i++)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	e014      	b.n	8000cce <execute_mem_write+0x44>
     {
         //Here we program the flash byte by byte
         status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
 8000ca4:	68ba      	ldr	r2, [r7, #8]
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	18d1      	adds	r1, r2, r3
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	4413      	add	r3, r2
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	461c      	mov	r4, r3
 8000cb8:	4615      	mov	r5, r2
 8000cba:	4622      	mov	r2, r4
 8000cbc:	462b      	mov	r3, r5
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f000 fe3e 	bl	8001940 <HAL_FLASH_Program>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	75fb      	strb	r3, [r7, #23]
     for(uint32_t i = 0 ; i <len ; i++)
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d3e6      	bcc.n	8000ca4 <execute_mem_write+0x1a>
     }

     HAL_FLASH_Lock();
 8000cd6:	f000 fea7 	bl	8001a28 <HAL_FLASH_Lock>

     return status;
 8000cda:	7dfb      	ldrb	r3, [r7, #23]
 }
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bdb0      	pop	{r4, r5, r7, pc}

08000ce4 <bootloader_main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void bootloader_main(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8000cea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cee:	4819      	ldr	r0, [pc, #100]	@ (8000d54 <bootloader_main+0x70>)
 8000cf0:	f001 fa9e 	bl	8002230 <HAL_GPIO_ReadPin>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d108      	bne.n	8000d0c <bootloader_main+0x28>
	{
		C_UART = &huart5;
 8000cfa:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <bootloader_main+0x74>)
 8000cfc:	4a17      	ldr	r2, [pc, #92]	@ (8000d5c <bootloader_main+0x78>)
 8000cfe:	601a      	str	r2, [r3, #0]
		printf("button pressed...entering USB the bootloader mode\n");
 8000d00:	4817      	ldr	r0, [pc, #92]	@ (8000d60 <bootloader_main+0x7c>)
 8000d02:	f002 ff3d 	bl	8003b80 <puts>
		bootloader_uart_read_data();
 8000d06:	f7ff fc7f 	bl	8000608 <bootloader_uart_read_data>
		{
			printf("No valid BOOT_CMD received...jumping to application\n\r");
			bootloader_jump_to_user_app();
		}
	}
}
 8000d0a:	e01e      	b.n	8000d4a <bootloader_main+0x66>
		uint8_t rx_byte = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	71bb      	strb	r3, [r7, #6]
		status = HAL_UART_Receive(&huart3, &rx_byte, 1, UART_TIMEOUT_MS);
 8000d10:	1db9      	adds	r1, r7, #6
 8000d12:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000d16:	2201      	movs	r2, #1
 8000d18:	4812      	ldr	r0, [pc, #72]	@ (8000d64 <bootloader_main+0x80>)
 8000d1a:	f002 fa40 	bl	800319e <HAL_UART_Receive>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
		if (status == HAL_OK && rx_byte == BOOT_CMD)
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d10b      	bne.n	8000d40 <bootloader_main+0x5c>
 8000d28:	79bb      	ldrb	r3, [r7, #6]
 8000d2a:	2b50      	cmp	r3, #80	@ 0x50
 8000d2c:	d108      	bne.n	8000d40 <bootloader_main+0x5c>
			C_UART = &huart3;
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <bootloader_main+0x74>)
 8000d30:	4a0c      	ldr	r2, [pc, #48]	@ (8000d64 <bootloader_main+0x80>)
 8000d32:	601a      	str	r2, [r3, #0]
			printf("BOOT_CMD received...entering ESP32 bootloader mode\n\r");
 8000d34:	480c      	ldr	r0, [pc, #48]	@ (8000d68 <bootloader_main+0x84>)
 8000d36:	f002 febb 	bl	8003ab0 <iprintf>
			bootloader_uart_read_data();
 8000d3a:	f7ff fc65 	bl	8000608 <bootloader_uart_read_data>
}
 8000d3e:	e004      	b.n	8000d4a <bootloader_main+0x66>
			printf("No valid BOOT_CMD received...jumping to application\n\r");
 8000d40:	480a      	ldr	r0, [pc, #40]	@ (8000d6c <bootloader_main+0x88>)
 8000d42:	f002 feb5 	bl	8003ab0 <iprintf>
			bootloader_jump_to_user_app();
 8000d46:	f7ff fcab 	bl	80006a0 <bootloader_jump_to_user_app>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40020800 	.word	0x40020800
 8000d58:	2000014c 	.word	0x2000014c
 8000d5c:	20000158 	.word	0x20000158
 8000d60:	08004a90 	.word	0x08004a90
 8000d64:	200001e8 	.word	0x200001e8
 8000d68:	08004ac4 	.word	0x08004ac4
 8000d6c:	08004afc 	.word	0x08004afc

08000d70 <__io_putchar>:

#define PRINTF   int __io_putchar(int ch)
PRINTF
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000d78:	1d39      	adds	r1, r7, #4
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4803      	ldr	r0, [pc, #12]	@ (8000d90 <__io_putchar+0x20>)
 8000d82:	f002 f981 	bl	8003088 <HAL_UART_Transmit>
	return ch;
 8000d86:	687b      	ldr	r3, [r7, #4]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200001a0 	.word	0x200001a0

08000d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d98:	f000 fbda 	bl	8001550 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9c:	f000 f814 	bl	8000dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da0:	f000 f916 	bl	8000fd0 <MX_GPIO_Init>
  MX_CRC_Init();
 8000da4:	f000 f882 	bl	8000eac <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000da8:	f000 f8be 	bl	8000f28 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000dac:	f000 f8e6 	bl	8000f7c <MX_USART3_UART_Init>
  MX_UART5_Init();
 8000db0:	f000 f890 	bl	8000ed4 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  printf("bootloader running....\n");
 8000db4:	4803      	ldr	r0, [pc, #12]	@ (8000dc4 <main+0x30>)
 8000db6:	f002 fee3 	bl	8003b80 <puts>
  bootloader_main();
 8000dba:	f7ff ff93 	bl	8000ce4 <bootloader_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dbe:	bf00      	nop
 8000dc0:	e7fd      	b.n	8000dbe <main+0x2a>
 8000dc2:	bf00      	nop
 8000dc4:	08004b34 	.word	0x08004b34

08000dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b094      	sub	sp, #80	@ 0x50
 8000dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	2234      	movs	r2, #52	@ 0x34
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f002 ffb2 	bl	8003d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ddc:	f107 0308 	add.w	r3, r7, #8
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dec:	2300      	movs	r3, #0
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea4 <SystemClock_Config+0xdc>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df4:	4a2b      	ldr	r2, [pc, #172]	@ (8000ea4 <SystemClock_Config+0xdc>)
 8000df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfc:	4b29      	ldr	r3, [pc, #164]	@ (8000ea4 <SystemClock_Config+0xdc>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e08:	2300      	movs	r3, #0
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	4b26      	ldr	r3, [pc, #152]	@ (8000ea8 <SystemClock_Config+0xe0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a25      	ldr	r2, [pc, #148]	@ (8000ea8 <SystemClock_Config+0xe0>)
 8000e12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	4b23      	ldr	r3, [pc, #140]	@ (8000ea8 <SystemClock_Config+0xe0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e24:	2302      	movs	r3, #2
 8000e26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e2c:	2310      	movs	r3, #16
 8000e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e30:	2302      	movs	r3, #2
 8000e32:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e34:	2300      	movs	r3, #0
 8000e36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e38:	2308      	movs	r3, #8
 8000e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000e3c:	23b4      	movs	r3, #180	@ 0xb4
 8000e3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e40:	2302      	movs	r3, #2
 8000e42:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e44:	2302      	movs	r3, #2
 8000e46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4618      	mov	r0, r3
 8000e52:	f001 fe2b 	bl	8002aac <HAL_RCC_OscConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e5c:	f000 f926 	bl	80010ac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e60:	f001 fa18 	bl	8002294 <HAL_PWREx_EnableOverDrive>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e6a:	f000 f91f 	bl	80010ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6e:	230f      	movs	r3, #15
 8000e70:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e72:	2302      	movs	r3, #2
 8000e74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e7a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e84:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	2105      	movs	r1, #5
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f001 fa51 	bl	8002334 <HAL_RCC_ClockConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000e98:	f000 f908 	bl	80010ac <Error_Handler>
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	3750      	adds	r7, #80	@ 0x50
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40007000 	.word	0x40007000

08000eac <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <MX_CRC_Init+0x20>)
 8000eb2:	4a07      	ldr	r2, [pc, #28]	@ (8000ed0 <MX_CRC_Init+0x24>)
 8000eb4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000eb6:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <MX_CRC_Init+0x20>)
 8000eb8:	f000 fcfb 	bl	80018b2 <HAL_CRC_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000ec2:	f000 f8f3 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000150 	.word	0x20000150
 8000ed0:	40023000 	.word	0x40023000

08000ed4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <MX_UART5_Init+0x4c>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	@ (8000f24 <MX_UART5_Init+0x50>)
 8000edc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <MX_UART5_Init+0x4c>)
 8000ee0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ee4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <MX_UART5_Init+0x4c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <MX_UART5_Init+0x4c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <MX_UART5_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000ef8:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <MX_UART5_Init+0x4c>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <MX_UART5_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <MX_UART5_Init+0x4c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000f0a:	4805      	ldr	r0, [pc, #20]	@ (8000f20 <MX_UART5_Init+0x4c>)
 8000f0c:	f002 f86c 	bl	8002fe8 <HAL_UART_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000f16:	f000 f8c9 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000158 	.word	0x20000158
 8000f24:	40005000 	.word	0x40005000

08000f28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	@ (8000f78 <MX_USART2_UART_Init+0x50>)
 8000f30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f32:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f4e:	220c      	movs	r2, #12
 8000f50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f52:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f5e:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <MX_USART2_UART_Init+0x4c>)
 8000f60:	f002 f842 	bl	8002fe8 <HAL_UART_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f6a:	f000 f89f 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200001a0 	.word	0x200001a0
 8000f78:	40004400 	.word	0x40004400

08000f7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f80:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <MX_USART3_UART_Init+0x50>)
 8000f84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f86:	4b10      	ldr	r3, [pc, #64]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fb2:	4805      	ldr	r0, [pc, #20]	@ (8000fc8 <MX_USART3_UART_Init+0x4c>)
 8000fb4:	f002 f818 	bl	8002fe8 <HAL_UART_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fbe:	f000 f875 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200001e8 	.word	0x200001e8
 8000fcc:	40004800 	.word	0x40004800

08000fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	@ 0x28
 8000fd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	4b2d      	ldr	r3, [pc, #180]	@ (80010a0 <MX_GPIO_Init+0xd0>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a2c      	ldr	r2, [pc, #176]	@ (80010a0 <MX_GPIO_Init+0xd0>)
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80010a0 <MX_GPIO_Init+0xd0>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0304 	and.w	r3, r3, #4
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b26      	ldr	r3, [pc, #152]	@ (80010a0 <MX_GPIO_Init+0xd0>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4a25      	ldr	r2, [pc, #148]	@ (80010a0 <MX_GPIO_Init+0xd0>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6313      	str	r3, [r2, #48]	@ 0x30
 8001012:	4b23      	ldr	r3, [pc, #140]	@ (80010a0 <MX_GPIO_Init+0xd0>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	4b1f      	ldr	r3, [pc, #124]	@ (80010a0 <MX_GPIO_Init+0xd0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a1e      	ldr	r2, [pc, #120]	@ (80010a0 <MX_GPIO_Init+0xd0>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b1c      	ldr	r3, [pc, #112]	@ (80010a0 <MX_GPIO_Init+0xd0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b18      	ldr	r3, [pc, #96]	@ (80010a0 <MX_GPIO_Init+0xd0>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a17      	ldr	r2, [pc, #92]	@ (80010a0 <MX_GPIO_Init+0xd0>)
 8001044:	f043 0308 	orr.w	r3, r3, #8
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <MX_GPIO_Init+0xd0>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	2120      	movs	r1, #32
 800105a:	4812      	ldr	r0, [pc, #72]	@ (80010a4 <MX_GPIO_Init+0xd4>)
 800105c:	f001 f900 	bl	8002260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001060:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <MX_GPIO_Init+0xd8>)
 8001076:	f000 ff47 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800107a:	2320      	movs	r3, #32
 800107c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4804      	ldr	r0, [pc, #16]	@ (80010a4 <MX_GPIO_Init+0xd4>)
 8001092:	f000 ff39 	bl	8001f08 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001096:	bf00      	nop
 8001098:	3728      	adds	r7, #40	@ 0x28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40020800 	.word	0x40020800

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <Error_Handler+0x8>

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <HAL_MspInit+0x4c>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001104 <HAL_MspInit+0x4c>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001104 <HAL_MspInit+0x4c>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	603b      	str	r3, [r7, #0]
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <HAL_MspInit+0x4c>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	4a08      	ldr	r2, [pc, #32]	@ (8001104 <HAL_MspInit+0x4c>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_MspInit+0x4c>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800

08001108 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0b      	ldr	r2, [pc, #44]	@ (8001144 <HAL_CRC_MspInit+0x3c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d10d      	bne.n	8001136 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <HAL_CRC_MspInit+0x40>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a09      	ldr	r2, [pc, #36]	@ (8001148 <HAL_CRC_MspInit+0x40>)
 8001124:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <HAL_CRC_MspInit+0x40>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023000 	.word	0x40023000
 8001148:	40023800 	.word	0x40023800

0800114c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b090      	sub	sp, #64	@ 0x40
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a6a      	ldr	r2, [pc, #424]	@ (8001314 <HAL_UART_MspInit+0x1c8>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d14b      	bne.n	8001206 <HAL_UART_MspInit+0xba>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001172:	4b69      	ldr	r3, [pc, #420]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001176:	4a68      	ldr	r2, [pc, #416]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 8001178:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800117c:	6413      	str	r3, [r2, #64]	@ 0x40
 800117e:	4b66      	ldr	r3, [pc, #408]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001186:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001188:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
 800118e:	4b62      	ldr	r3, [pc, #392]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	4a61      	ldr	r2, [pc, #388]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	6313      	str	r3, [r2, #48]	@ 0x30
 800119a:	4b5f      	ldr	r3, [pc, #380]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80011a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
 80011aa:	4b5b      	ldr	r3, [pc, #364]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	4a5a      	ldr	r2, [pc, #360]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 80011b0:	f043 0308 	orr.w	r3, r3, #8
 80011b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b6:	4b58      	ldr	r3, [pc, #352]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	623b      	str	r3, [r7, #32]
 80011c0:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80011d4:	2308      	movs	r3, #8
 80011d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011dc:	4619      	mov	r1, r3
 80011de:	484f      	ldr	r0, [pc, #316]	@ (800131c <HAL_UART_MspInit+0x1d0>)
 80011e0:	f000 fe92 	bl	8001f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011e4:	2304      	movs	r3, #4
 80011e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80011f4:	2308      	movs	r3, #8
 80011f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011fc:	4619      	mov	r1, r3
 80011fe:	4848      	ldr	r0, [pc, #288]	@ (8001320 <HAL_UART_MspInit+0x1d4>)
 8001200:	f000 fe82 	bl	8001f08 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001204:	e081      	b.n	800130a <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART2)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a46      	ldr	r2, [pc, #280]	@ (8001324 <HAL_UART_MspInit+0x1d8>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d12c      	bne.n	800126a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
 8001214:	4b40      	ldr	r3, [pc, #256]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001218:	4a3f      	ldr	r2, [pc, #252]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 800121a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800121e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001220:	4b3d      	ldr	r3, [pc, #244]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001228:	61fb      	str	r3, [r7, #28]
 800122a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	61bb      	str	r3, [r7, #24]
 8001230:	4b39      	ldr	r3, [pc, #228]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001234:	4a38      	ldr	r2, [pc, #224]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6313      	str	r3, [r2, #48]	@ 0x30
 800123c:	4b36      	ldr	r3, [pc, #216]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	61bb      	str	r3, [r7, #24]
 8001246:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001248:	230c      	movs	r3, #12
 800124a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001258:	2307      	movs	r3, #7
 800125a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001260:	4619      	mov	r1, r3
 8001262:	4831      	ldr	r0, [pc, #196]	@ (8001328 <HAL_UART_MspInit+0x1dc>)
 8001264:	f000 fe50 	bl	8001f08 <HAL_GPIO_Init>
}
 8001268:	e04f      	b.n	800130a <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART3)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a2f      	ldr	r2, [pc, #188]	@ (800132c <HAL_UART_MspInit+0x1e0>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d14a      	bne.n	800130a <HAL_UART_MspInit+0x1be>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	4b27      	ldr	r3, [pc, #156]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	4a26      	ldr	r2, [pc, #152]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 800127e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001282:	6413      	str	r3, [r2, #64]	@ 0x40
 8001284:	4b24      	ldr	r3, [pc, #144]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001298:	4a1f      	ldr	r2, [pc, #124]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 800129a:	f043 0304 	orr.w	r3, r3, #4
 800129e:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b4:	4a18      	ldr	r2, [pc, #96]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 80012b6:	f043 0302 	orr.w	r3, r3, #2
 80012ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80012bc:	4b16      	ldr	r3, [pc, #88]	@ (8001318 <HAL_UART_MspInit+0x1cc>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012c8:	2320      	movs	r3, #32
 80012ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012d8:	2307      	movs	r3, #7
 80012da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012e0:	4619      	mov	r1, r3
 80012e2:	480e      	ldr	r0, [pc, #56]	@ (800131c <HAL_UART_MspInit+0x1d0>)
 80012e4:	f000 fe10 	bl	8001f08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012fa:	2307      	movs	r3, #7
 80012fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001302:	4619      	mov	r1, r3
 8001304:	480a      	ldr	r0, [pc, #40]	@ (8001330 <HAL_UART_MspInit+0x1e4>)
 8001306:	f000 fdff 	bl	8001f08 <HAL_GPIO_Init>
}
 800130a:	bf00      	nop
 800130c:	3740      	adds	r7, #64	@ 0x40
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40005000 	.word	0x40005000
 8001318:	40023800 	.word	0x40023800
 800131c:	40020800 	.word	0x40020800
 8001320:	40020c00 	.word	0x40020c00
 8001324:	40004400 	.word	0x40004400
 8001328:	40020000 	.word	0x40020000
 800132c:	40004800 	.word	0x40004800
 8001330:	40020400 	.word	0x40020400

08001334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <NMI_Handler+0x4>

0800133c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <MemManage_Handler+0x4>

0800134c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <BusFault_Handler+0x4>

08001354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <UsageFault_Handler+0x4>

0800135c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138a:	f000 f969 	bl	8001660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}

08001392 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	e00a      	b.n	80013ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013a4:	f3af 8000 	nop.w
 80013a8:	4601      	mov	r1, r0
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	1c5a      	adds	r2, r3, #1
 80013ae:	60ba      	str	r2, [r7, #8]
 80013b0:	b2ca      	uxtb	r2, r1
 80013b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	3301      	adds	r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	429a      	cmp	r2, r3
 80013c0:	dbf0      	blt.n	80013a4 <_read+0x12>
  }

  return len;
 80013c2:	687b      	ldr	r3, [r7, #4]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	e009      	b.n	80013f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	60ba      	str	r2, [r7, #8]
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fcc2 	bl	8000d70 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	3301      	adds	r3, #1
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	dbf1      	blt.n	80013de <_write+0x12>
  }
  return len;
 80013fa:	687b      	ldr	r3, [r7, #4]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <_close>:

int _close(int file)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800140c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800142c:	605a      	str	r2, [r3, #4]
  return 0;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <_isatty>:

int _isatty(int file)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001444:	2301      	movs	r3, #1
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001452:	b480      	push	{r7}
 8001454:	b085      	sub	sp, #20
 8001456:	af00      	add	r7, sp, #0
 8001458:	60f8      	str	r0, [r7, #12]
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001474:	4a14      	ldr	r2, [pc, #80]	@ (80014c8 <_sbrk+0x5c>)
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <_sbrk+0x60>)
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001480:	4b13      	ldr	r3, [pc, #76]	@ (80014d0 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001488:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <_sbrk+0x64>)
 800148a:	4a12      	ldr	r2, [pc, #72]	@ (80014d4 <_sbrk+0x68>)
 800148c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148e:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <_sbrk+0x64>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	429a      	cmp	r2, r3
 800149a:	d207      	bcs.n	80014ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800149c:	f002 fc9e 	bl	8003ddc <__errno>
 80014a0:	4603      	mov	r3, r0
 80014a2:	220c      	movs	r2, #12
 80014a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295
 80014aa:	e009      	b.n	80014c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014ac:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <_sbrk+0x64>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b2:	4b07      	ldr	r3, [pc, #28]	@ (80014d0 <_sbrk+0x64>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	4a05      	ldr	r2, [pc, #20]	@ (80014d0 <_sbrk+0x64>)
 80014bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014be:	68fb      	ldr	r3, [r7, #12]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20020000 	.word	0x20020000
 80014cc:	00000400 	.word	0x00000400
 80014d0:	20000230 	.word	0x20000230
 80014d4:	200003a8 	.word	0x200003a8

080014d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <SystemInit+0x20>)
 80014de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014e2:	4a05      	ldr	r2, [pc, #20]	@ (80014f8 <SystemInit+0x20>)
 80014e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001534 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001500:	f7ff ffea 	bl	80014d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001504:	480c      	ldr	r0, [pc, #48]	@ (8001538 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001506:	490d      	ldr	r1, [pc, #52]	@ (800153c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001508:	4a0d      	ldr	r2, [pc, #52]	@ (8001540 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800150c:	e002      	b.n	8001514 <LoopCopyDataInit>

0800150e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001512:	3304      	adds	r3, #4

08001514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001518:	d3f9      	bcc.n	800150e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151a:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800151c:	4c0a      	ldr	r4, [pc, #40]	@ (8001548 <LoopFillZerobss+0x22>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001520:	e001      	b.n	8001526 <LoopFillZerobss>

08001522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001524:	3204      	adds	r2, #4

08001526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001528:	d3fb      	bcc.n	8001522 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800152a:	f002 fc5d 	bl	8003de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800152e:	f7ff fc31 	bl	8000d94 <main>
  bx  lr    
 8001532:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001534:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800153c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001540:	08004ba8 	.word	0x08004ba8
  ldr r2, =_sbss
 8001544:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001548:	200003a4 	.word	0x200003a4

0800154c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800154c:	e7fe      	b.n	800154c <ADC_IRQHandler>
	...

08001550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001554:	4b0e      	ldr	r3, [pc, #56]	@ (8001590 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0d      	ldr	r2, [pc, #52]	@ (8001590 <HAL_Init+0x40>)
 800155a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800155e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001560:	4b0b      	ldr	r3, [pc, #44]	@ (8001590 <HAL_Init+0x40>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0a      	ldr	r2, [pc, #40]	@ (8001590 <HAL_Init+0x40>)
 8001566:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800156a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800156c:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <HAL_Init+0x40>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a07      	ldr	r2, [pc, #28]	@ (8001590 <HAL_Init+0x40>)
 8001572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001576:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001578:	2003      	movs	r0, #3
 800157a:	f000 f967 	bl	800184c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157e:	200f      	movs	r0, #15
 8001580:	f000 f83e 	bl	8001600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001584:	f7ff fd98 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023c00 	.word	0x40023c00

08001594 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001598:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <HAL_DeInit+0x4c>)
 800159a:	4a12      	ldr	r2, [pc, #72]	@ (80015e4 <HAL_DeInit+0x50>)
 800159c:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <HAL_DeInit+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80015a4:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <HAL_DeInit+0x4c>)
 80015a6:	4a10      	ldr	r2, [pc, #64]	@ (80015e8 <HAL_DeInit+0x54>)
 80015a8:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80015aa:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <HAL_DeInit+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80015b0:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <HAL_DeInit+0x4c>)
 80015b2:	4a0e      	ldr	r2, [pc, #56]	@ (80015ec <HAL_DeInit+0x58>)
 80015b4:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80015b6:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <HAL_DeInit+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80015bc:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <HAL_DeInit+0x4c>)
 80015be:	2281      	movs	r2, #129	@ 0x81
 80015c0:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80015c2:	4b07      	ldr	r3, [pc, #28]	@ (80015e0 <HAL_DeInit+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80015c8:	4b05      	ldr	r3, [pc, #20]	@ (80015e0 <HAL_DeInit+0x4c>)
 80015ca:	2203      	movs	r2, #3
 80015cc:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80015ce:	4b04      	ldr	r3, [pc, #16]	@ (80015e0 <HAL_DeInit+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80015d4:	f000 f80c 	bl	80015f0 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	3fffc9ff 	.word	0x3fffc9ff
 80015e8:	00c77933 	.word	0x00c77933
 80015ec:	206010ff 	.word	0x206010ff

080015f0 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001608:	4b12      	ldr	r3, [pc, #72]	@ (8001654 <HAL_InitTick+0x54>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <HAL_InitTick+0x58>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001616:	fbb3 f3f1 	udiv	r3, r3, r1
 800161a:	fbb2 f3f3 	udiv	r3, r2, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f93b 	bl	800189a <HAL_SYSTICK_Config>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e00e      	b.n	800164c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b0f      	cmp	r3, #15
 8001632:	d80a      	bhi.n	800164a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001634:	2200      	movs	r2, #0
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	f000 f911 	bl	8001862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001640:	4a06      	ldr	r2, [pc, #24]	@ (800165c <HAL_InitTick+0x5c>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	e000      	b.n	800164c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000000 	.word	0x20000000
 8001658:	20000008 	.word	0x20000008
 800165c:	20000004 	.word	0x20000004

08001660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <HAL_IncTick+0x20>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <HAL_IncTick+0x24>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	4a04      	ldr	r2, [pc, #16]	@ (8001684 <HAL_IncTick+0x24>)
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000008 	.word	0x20000008
 8001684:	20000234 	.word	0x20000234

08001688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return uwTick;
 800168c:	4b03      	ldr	r3, [pc, #12]	@ (800169c <HAL_GetTick+0x14>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000234 	.word	0x20000234

080016a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a8:	f7ff ffee 	bl	8001688 <HAL_GetTick>
 80016ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b8:	d005      	beq.n	80016c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ba:	4b0a      	ldr	r3, [pc, #40]	@ (80016e4 <HAL_Delay+0x44>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4413      	add	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016c6:	bf00      	nop
 80016c8:	f7ff ffde 	bl	8001688 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d8f7      	bhi.n	80016c8 <HAL_Delay+0x28>
  {
  }
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000008 	.word	0x20000008

080016e8 <__NVIC_SetPriorityGrouping>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f8:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <__NVIC_SetPriorityGrouping+0x44>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001704:	4013      	ands	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001710:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001714:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171a:	4a04      	ldr	r2, [pc, #16]	@ (800172c <__NVIC_SetPriorityGrouping+0x44>)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	60d3      	str	r3, [r2, #12]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_GetPriorityGrouping>:
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001734:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <__NVIC_GetPriorityGrouping+0x18>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	f003 0307 	and.w	r3, r3, #7
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_SetPriority>:
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	db0a      	blt.n	8001776 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	490c      	ldr	r1, [pc, #48]	@ (8001798 <__NVIC_SetPriority+0x4c>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	440b      	add	r3, r1
 8001770:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001774:	e00a      	b.n	800178c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4908      	ldr	r1, [pc, #32]	@ (800179c <__NVIC_SetPriority+0x50>)
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	3b04      	subs	r3, #4
 8001784:	0112      	lsls	r2, r2, #4
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	440b      	add	r3, r1
 800178a:	761a      	strb	r2, [r3, #24]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <NVIC_EncodePriority>:
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	@ 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f1c3 0307 	rsb	r3, r3, #7
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	bf28      	it	cs
 80017be:	2304      	movcs	r3, #4
 80017c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3304      	adds	r3, #4
 80017c6:	2b06      	cmp	r3, #6
 80017c8:	d902      	bls.n	80017d0 <NVIC_EncodePriority+0x30>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3b03      	subs	r3, #3
 80017ce:	e000      	b.n	80017d2 <NVIC_EncodePriority+0x32>
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	401a      	ands	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43d9      	mvns	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	4313      	orrs	r3, r2
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	@ 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001818:	d301      	bcc.n	800181e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800181a:	2301      	movs	r3, #1
 800181c:	e00f      	b.n	800183e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181e:	4a0a      	ldr	r2, [pc, #40]	@ (8001848 <SysTick_Config+0x40>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001826:	210f      	movs	r1, #15
 8001828:	f04f 30ff 	mov.w	r0, #4294967295
 800182c:	f7ff ff8e 	bl	800174c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001830:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <SysTick_Config+0x40>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001836:	4b04      	ldr	r3, [pc, #16]	@ (8001848 <SysTick_Config+0x40>)
 8001838:	2207      	movs	r2, #7
 800183a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	e000e010 	.word	0xe000e010

0800184c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ff47 	bl	80016e8 <__NVIC_SetPriorityGrouping>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001874:	f7ff ff5c 	bl	8001730 <__NVIC_GetPriorityGrouping>
 8001878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	6978      	ldr	r0, [r7, #20]
 8001880:	f7ff ff8e 	bl	80017a0 <NVIC_EncodePriority>
 8001884:	4602      	mov	r2, r0
 8001886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188a:	4611      	mov	r1, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff5d 	bl	800174c <__NVIC_SetPriority>
}
 8001892:	bf00      	nop
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ffb0 	bl	8001808 <SysTick_Config>
 80018a8:	4603      	mov	r3, r0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e00e      	b.n	80018e2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	795b      	ldrb	r3, [r3, #5]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d105      	bne.n	80018da <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff fc17 	bl	8001108 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b087      	sub	sp, #28
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2202      	movs	r2, #2
 80018fe:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	e00a      	b.n	800191c <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	441a      	add	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6812      	ldr	r2, [r2, #0]
 8001914:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	429a      	cmp	r2, r3
 8001922:	d3f0      	bcc.n	8001906 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2201      	movs	r2, #1
 8001930:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001932:	693b      	ldr	r3, [r7, #16]
}
 8001934:	4618      	mov	r0, r3
 8001936:	371c      	adds	r7, #28
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800194e:	4b23      	ldr	r3, [pc, #140]	@ (80019dc <HAL_FLASH_Program+0x9c>)
 8001950:	7e1b      	ldrb	r3, [r3, #24]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d101      	bne.n	800195a <HAL_FLASH_Program+0x1a>
 8001956:	2302      	movs	r3, #2
 8001958:	e03b      	b.n	80019d2 <HAL_FLASH_Program+0x92>
 800195a:	4b20      	ldr	r3, [pc, #128]	@ (80019dc <HAL_FLASH_Program+0x9c>)
 800195c:	2201      	movs	r2, #1
 800195e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001960:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001964:	f000 f870 	bl	8001a48 <FLASH_WaitForLastOperation>
 8001968:	4603      	mov	r3, r0
 800196a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800196c:	7dfb      	ldrb	r3, [r7, #23]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d12b      	bne.n	80019ca <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d105      	bne.n	8001984 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001978:	783b      	ldrb	r3, [r7, #0]
 800197a:	4619      	mov	r1, r3
 800197c:	68b8      	ldr	r0, [r7, #8]
 800197e:	f000 f91b 	bl	8001bb8 <FLASH_Program_Byte>
 8001982:	e016      	b.n	80019b2 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d105      	bne.n	8001996 <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800198a:	883b      	ldrh	r3, [r7, #0]
 800198c:	4619      	mov	r1, r3
 800198e:	68b8      	ldr	r0, [r7, #8]
 8001990:	f000 f8ee 	bl	8001b70 <FLASH_Program_HalfWord>
 8001994:	e00d      	b.n	80019b2 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d105      	bne.n	80019a8 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	4619      	mov	r1, r3
 80019a0:	68b8      	ldr	r0, [r7, #8]
 80019a2:	f000 f8c3 	bl	8001b2c <FLASH_Program_Word>
 80019a6:	e004      	b.n	80019b2 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80019a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019ac:	68b8      	ldr	r0, [r7, #8]
 80019ae:	f000 f88b 	bl	8001ac8 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019b2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80019b6:	f000 f847 	bl	8001a48 <FLASH_WaitForLastOperation>
 80019ba:	4603      	mov	r3, r0
 80019bc:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80019be:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <HAL_FLASH_Program+0xa0>)
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	4a07      	ldr	r2, [pc, #28]	@ (80019e0 <HAL_FLASH_Program+0xa0>)
 80019c4:	f023 0301 	bic.w	r3, r3, #1
 80019c8:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80019ca:	4b04      	ldr	r3, [pc, #16]	@ (80019dc <HAL_FLASH_Program+0x9c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	761a      	strb	r2, [r3, #24]

  return status;
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000238 	.word	0x20000238
 80019e0:	40023c00 	.word	0x40023c00

080019e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80019ee:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <HAL_FLASH_Unlock+0x38>)
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	da0b      	bge.n	8001a0e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80019f6:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <HAL_FLASH_Unlock+0x38>)
 80019f8:	4a09      	ldr	r2, [pc, #36]	@ (8001a20 <HAL_FLASH_Unlock+0x3c>)
 80019fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80019fc:	4b07      	ldr	r3, [pc, #28]	@ (8001a1c <HAL_FLASH_Unlock+0x38>)
 80019fe:	4a09      	ldr	r2, [pc, #36]	@ (8001a24 <HAL_FLASH_Unlock+0x40>)
 8001a00:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a02:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <HAL_FLASH_Unlock+0x38>)
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	da01      	bge.n	8001a0e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	40023c00 	.word	0x40023c00
 8001a20:	45670123 	.word	0x45670123
 8001a24:	cdef89ab 	.word	0xcdef89ab

08001a28 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001a2c:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <HAL_FLASH_Lock+0x1c>)
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	4a04      	ldr	r2, [pc, #16]	@ (8001a44 <HAL_FLASH_Lock+0x1c>)
 8001a32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a36:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	40023c00 	.word	0x40023c00

08001a48 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a54:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac0 <FLASH_WaitForLastOperation+0x78>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a5a:	f7ff fe15 	bl	8001688 <HAL_GetTick>
 8001a5e:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001a60:	e010      	b.n	8001a84 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a68:	d00c      	beq.n	8001a84 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d007      	beq.n	8001a80 <FLASH_WaitForLastOperation+0x38>
 8001a70:	f7ff fe0a 	bl	8001688 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d201      	bcs.n	8001a84 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e019      	b.n	8001ab8 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001a84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac4 <FLASH_WaitForLastOperation+0x7c>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1e8      	bne.n	8001a62 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001a90:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac4 <FLASH_WaitForLastOperation+0x7c>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d002      	beq.n	8001aa2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001a9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <FLASH_WaitForLastOperation+0x7c>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001aa2:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <FLASH_WaitForLastOperation+0x7c>)
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001aae:	f000 f8a5 	bl	8001bfc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0

}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000238 	.word	0x20000238
 8001ac4:	40023c00 	.word	0x40023c00

08001ac8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ad4:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <FLASH_Program_DoubleWord+0x60>)
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	4a13      	ldr	r2, [pc, #76]	@ (8001b28 <FLASH_Program_DoubleWord+0x60>)
 8001ada:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ade:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <FLASH_Program_DoubleWord+0x60>)
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	4a10      	ldr	r2, [pc, #64]	@ (8001b28 <FLASH_Program_DoubleWord+0x60>)
 8001ae6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001aea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001aec:	4b0e      	ldr	r3, [pc, #56]	@ (8001b28 <FLASH_Program_DoubleWord+0x60>)
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	4a0d      	ldr	r2, [pc, #52]	@ (8001b28 <FLASH_Program_DoubleWord+0x60>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001afe:	f3bf 8f6f 	isb	sy
}
 8001b02:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8001b04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	000a      	movs	r2, r1
 8001b12:	2300      	movs	r3, #0
 8001b14:	68f9      	ldr	r1, [r7, #12]
 8001b16:	3104      	adds	r1, #4
 8001b18:	4613      	mov	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	40023c00 	.word	0x40023c00

08001b2c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b36:	4b0d      	ldr	r3, [pc, #52]	@ (8001b6c <FLASH_Program_Word+0x40>)
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8001b6c <FLASH_Program_Word+0x40>)
 8001b3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b40:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001b42:	4b0a      	ldr	r3, [pc, #40]	@ (8001b6c <FLASH_Program_Word+0x40>)
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	4a09      	ldr	r2, [pc, #36]	@ (8001b6c <FLASH_Program_Word+0x40>)
 8001b48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b4c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b4e:	4b07      	ldr	r3, [pc, #28]	@ (8001b6c <FLASH_Program_Word+0x40>)
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	4a06      	ldr	r2, [pc, #24]	@ (8001b6c <FLASH_Program_Word+0x40>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	601a      	str	r2, [r3, #0]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	40023c00 	.word	0x40023c00

08001b70 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb4 <FLASH_Program_HalfWord+0x44>)
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb4 <FLASH_Program_HalfWord+0x44>)
 8001b82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001b88:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <FLASH_Program_HalfWord+0x44>)
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	4a09      	ldr	r2, [pc, #36]	@ (8001bb4 <FLASH_Program_HalfWord+0x44>)
 8001b8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b94:	4b07      	ldr	r3, [pc, #28]	@ (8001bb4 <FLASH_Program_HalfWord+0x44>)
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	4a06      	ldr	r2, [pc, #24]	@ (8001bb4 <FLASH_Program_HalfWord+0x44>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	887a      	ldrh	r2, [r7, #2]
 8001ba4:	801a      	strh	r2, [r3, #0]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40023c00 	.word	0x40023c00

08001bb8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <FLASH_Program_Byte+0x40>)
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf8 <FLASH_Program_Byte+0x40>)
 8001bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001bce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001bd0:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <FLASH_Program_Byte+0x40>)
 8001bd2:	4a09      	ldr	r2, [pc, #36]	@ (8001bf8 <FLASH_Program_Byte+0x40>)
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bd8:	4b07      	ldr	r3, [pc, #28]	@ (8001bf8 <FLASH_Program_Byte+0x40>)
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	4a06      	ldr	r2, [pc, #24]	@ (8001bf8 <FLASH_Program_Byte+0x40>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	78fa      	ldrb	r2, [r7, #3]
 8001be8:	701a      	strb	r2, [r3, #0]
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40023c00 	.word	0x40023c00

08001bfc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001c00:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc0 <FLASH_SetErrorCode+0xc4>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	f003 0310 	and.w	r3, r3, #16
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d008      	beq.n	8001c1e <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc4 <FLASH_SetErrorCode+0xc8>)
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	f043 0310 	orr.w	r3, r3, #16
 8001c14:	4a2b      	ldr	r2, [pc, #172]	@ (8001cc4 <FLASH_SetErrorCode+0xc8>)
 8001c16:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001c18:	4b29      	ldr	r3, [pc, #164]	@ (8001cc0 <FLASH_SetErrorCode+0xc4>)
 8001c1a:	2210      	movs	r2, #16
 8001c1c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001c1e:	4b28      	ldr	r3, [pc, #160]	@ (8001cc0 <FLASH_SetErrorCode+0xc4>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	f003 0320 	and.w	r3, r3, #32
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d008      	beq.n	8001c3c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001c2a:	4b26      	ldr	r3, [pc, #152]	@ (8001cc4 <FLASH_SetErrorCode+0xc8>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f043 0308 	orr.w	r3, r3, #8
 8001c32:	4a24      	ldr	r2, [pc, #144]	@ (8001cc4 <FLASH_SetErrorCode+0xc8>)
 8001c34:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001c36:	4b22      	ldr	r3, [pc, #136]	@ (8001cc0 <FLASH_SetErrorCode+0xc4>)
 8001c38:	2220      	movs	r2, #32
 8001c3a:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001c3c:	4b20      	ldr	r3, [pc, #128]	@ (8001cc0 <FLASH_SetErrorCode+0xc4>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d008      	beq.n	8001c5a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001c48:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc4 <FLASH_SetErrorCode+0xc8>)
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc4 <FLASH_SetErrorCode+0xc8>)
 8001c52:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001c54:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc0 <FLASH_SetErrorCode+0xc4>)
 8001c56:	2240      	movs	r2, #64	@ 0x40
 8001c58:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001c5a:	4b19      	ldr	r3, [pc, #100]	@ (8001cc0 <FLASH_SetErrorCode+0xc4>)
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d008      	beq.n	8001c78 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001c66:	4b17      	ldr	r3, [pc, #92]	@ (8001cc4 <FLASH_SetErrorCode+0xc8>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f043 0302 	orr.w	r3, r3, #2
 8001c6e:	4a15      	ldr	r2, [pc, #84]	@ (8001cc4 <FLASH_SetErrorCode+0xc8>)
 8001c70:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001c72:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <FLASH_SetErrorCode+0xc4>)
 8001c74:	2280      	movs	r2, #128	@ 0x80
 8001c76:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001c78:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <FLASH_SetErrorCode+0xc4>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d009      	beq.n	8001c98 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc4 <FLASH_SetErrorCode+0xc8>)
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc4 <FLASH_SetErrorCode+0xc8>)
 8001c8e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001c90:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <FLASH_SetErrorCode+0xc4>)
 8001c92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c96:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001c98:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <FLASH_SetErrorCode+0xc4>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d008      	beq.n	8001cb6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001ca4:	4b07      	ldr	r3, [pc, #28]	@ (8001cc4 <FLASH_SetErrorCode+0xc8>)
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	f043 0320 	orr.w	r3, r3, #32
 8001cac:	4a05      	ldr	r2, [pc, #20]	@ (8001cc4 <FLASH_SetErrorCode+0xc8>)
 8001cae:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001cb0:	4b03      	ldr	r3, [pc, #12]	@ (8001cc0 <FLASH_SetErrorCode+0xc4>)
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	60da      	str	r2, [r3, #12]
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	40023c00 	.word	0x40023c00
 8001cc4:	20000238 	.word	0x20000238

08001cc8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001cd6:	4b31      	ldr	r3, [pc, #196]	@ (8001d9c <HAL_FLASHEx_Erase+0xd4>)
 8001cd8:	7e1b      	ldrb	r3, [r3, #24]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d101      	bne.n	8001ce2 <HAL_FLASHEx_Erase+0x1a>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e058      	b.n	8001d94 <HAL_FLASHEx_Erase+0xcc>
 8001ce2:	4b2e      	ldr	r3, [pc, #184]	@ (8001d9c <HAL_FLASHEx_Erase+0xd4>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ce8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001cec:	f7ff feac 	bl	8001a48 <FLASH_WaitForLastOperation>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d148      	bne.n	8001d8c <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001d00:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d115      	bne.n	8001d36 <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	4619      	mov	r1, r3
 8001d16:	4610      	mov	r0, r2
 8001d18:	f000 f844 	bl	8001da4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d1c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001d20:	f7ff fe92 	bl	8001a48 <FLASH_WaitForLastOperation>
 8001d24:	4603      	mov	r3, r0
 8001d26:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001d28:	4b1d      	ldr	r3, [pc, #116]	@ (8001da0 <HAL_FLASHEx_Erase+0xd8>)
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8001da0 <HAL_FLASHEx_Erase+0xd8>)
 8001d2e:	f023 0304 	bic.w	r3, r3, #4
 8001d32:	6113      	str	r3, [r2, #16]
 8001d34:	e028      	b.n	8001d88 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	e01c      	b.n	8001d78 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	4619      	mov	r1, r3
 8001d46:	68b8      	ldr	r0, [r7, #8]
 8001d48:	f000 f850 	bl	8001dec <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d4c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001d50:	f7ff fe7a 	bl	8001a48 <FLASH_WaitForLastOperation>
 8001d54:	4603      	mov	r3, r0
 8001d56:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001d58:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <HAL_FLASHEx_Erase+0xd8>)
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	4a10      	ldr	r2, [pc, #64]	@ (8001da0 <HAL_FLASHEx_Erase+0xd8>)
 8001d5e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8001d62:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	601a      	str	r2, [r3, #0]
          break;
 8001d70:	e00a      	b.n	8001d88 <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	3301      	adds	r3, #1
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4413      	add	r3, r2
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d3da      	bcc.n	8001d3e <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001d88:	f000 f878 	bl	8001e7c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001d8c:	4b03      	ldr	r3, [pc, #12]	@ (8001d9c <HAL_FLASHEx_Erase+0xd4>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	761a      	strb	r2, [r3, #24]

  return status;
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000238 	.word	0x20000238
 8001da0:	40023c00 	.word	0x40023c00

08001da4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001db0:	4b0d      	ldr	r3, [pc, #52]	@ (8001de8 <FLASH_MassErase+0x44>)
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	4a0c      	ldr	r2, [pc, #48]	@ (8001de8 <FLASH_MassErase+0x44>)
 8001db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <FLASH_MassErase+0x44>)
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	4a09      	ldr	r2, [pc, #36]	@ (8001de8 <FLASH_MassErase+0x44>)
 8001dc2:	f043 0304 	orr.w	r3, r3, #4
 8001dc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001dc8:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <FLASH_MassErase+0x44>)
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	021b      	lsls	r3, r3, #8
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	4a05      	ldr	r2, [pc, #20]	@ (8001de8 <FLASH_MassErase+0x44>)
 8001dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dd8:	6113      	str	r3, [r2, #16]
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40023c00 	.word	0x40023c00

08001dec <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d102      	bne.n	8001e08 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	e010      	b.n	8001e2a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d103      	bne.n	8001e16 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001e0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	e009      	b.n	8001e2a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001e16:	78fb      	ldrb	r3, [r7, #3]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d103      	bne.n	8001e24 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001e1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	e002      	b.n	8001e2a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001e24:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e28:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e2a:	4b13      	ldr	r3, [pc, #76]	@ (8001e78 <FLASH_Erase_Sector+0x8c>)
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	4a12      	ldr	r2, [pc, #72]	@ (8001e78 <FLASH_Erase_Sector+0x8c>)
 8001e30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e34:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001e36:	4b10      	ldr	r3, [pc, #64]	@ (8001e78 <FLASH_Erase_Sector+0x8c>)
 8001e38:	691a      	ldr	r2, [r3, #16]
 8001e3a:	490f      	ldr	r1, [pc, #60]	@ (8001e78 <FLASH_Erase_Sector+0x8c>)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001e42:	4b0d      	ldr	r3, [pc, #52]	@ (8001e78 <FLASH_Erase_Sector+0x8c>)
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	4a0c      	ldr	r2, [pc, #48]	@ (8001e78 <FLASH_Erase_Sector+0x8c>)
 8001e48:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001e4c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <FLASH_Erase_Sector+0x8c>)
 8001e50:	691a      	ldr	r2, [r3, #16]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4313      	orrs	r3, r2
 8001e58:	4a07      	ldr	r2, [pc, #28]	@ (8001e78 <FLASH_Erase_Sector+0x8c>)
 8001e5a:	f043 0302 	orr.w	r3, r3, #2
 8001e5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001e60:	4b05      	ldr	r3, [pc, #20]	@ (8001e78 <FLASH_Erase_Sector+0x8c>)
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	4a04      	ldr	r2, [pc, #16]	@ (8001e78 <FLASH_Erase_Sector+0x8c>)
 8001e66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e6a:	6113      	str	r3, [r2, #16]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	40023c00 	.word	0x40023c00

08001e7c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001e80:	4b20      	ldr	r3, [pc, #128]	@ (8001f04 <FLASH_FlushCaches+0x88>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d017      	beq.n	8001ebc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f04 <FLASH_FlushCaches+0x88>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a1c      	ldr	r2, [pc, #112]	@ (8001f04 <FLASH_FlushCaches+0x88>)
 8001e92:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001e96:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001e98:	4b1a      	ldr	r3, [pc, #104]	@ (8001f04 <FLASH_FlushCaches+0x88>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a19      	ldr	r2, [pc, #100]	@ (8001f04 <FLASH_FlushCaches+0x88>)
 8001e9e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4b17      	ldr	r3, [pc, #92]	@ (8001f04 <FLASH_FlushCaches+0x88>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a16      	ldr	r2, [pc, #88]	@ (8001f04 <FLASH_FlushCaches+0x88>)
 8001eaa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001eae:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eb0:	4b14      	ldr	r3, [pc, #80]	@ (8001f04 <FLASH_FlushCaches+0x88>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a13      	ldr	r2, [pc, #76]	@ (8001f04 <FLASH_FlushCaches+0x88>)
 8001eb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eba:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001ebc:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <FLASH_FlushCaches+0x88>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d017      	beq.n	8001ef8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <FLASH_FlushCaches+0x88>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f04 <FLASH_FlushCaches+0x88>)
 8001ece:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001ed2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f04 <FLASH_FlushCaches+0x88>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8001f04 <FLASH_FlushCaches+0x88>)
 8001eda:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <FLASH_FlushCaches+0x88>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a07      	ldr	r2, [pc, #28]	@ (8001f04 <FLASH_FlushCaches+0x88>)
 8001ee6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001eea:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eec:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <FLASH_FlushCaches+0x88>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a04      	ldr	r2, [pc, #16]	@ (8001f04 <FLASH_FlushCaches+0x88>)
 8001ef2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ef6:	6013      	str	r3, [r2, #0]
  }
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40023c00 	.word	0x40023c00

08001f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b089      	sub	sp, #36	@ 0x24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
 8001f22:	e165      	b.n	80021f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f24:	2201      	movs	r2, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	f040 8154 	bne.w	80021ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d005      	beq.n	8001f5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d130      	bne.n	8001fbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	2203      	movs	r2, #3
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f90:	2201      	movs	r2, #1
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f003 0201 	and.w	r2, r3, #1
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d017      	beq.n	8001ff8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d123      	bne.n	800204c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	08da      	lsrs	r2, r3, #3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3208      	adds	r2, #8
 800200c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002010:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	220f      	movs	r2, #15
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	08da      	lsrs	r2, r3, #3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3208      	adds	r2, #8
 8002046:	69b9      	ldr	r1, [r7, #24]
 8002048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0203 	and.w	r2, r3, #3
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80ae 	beq.w	80021ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b5d      	ldr	r3, [pc, #372]	@ (8002208 <HAL_GPIO_Init+0x300>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002096:	4a5c      	ldr	r2, [pc, #368]	@ (8002208 <HAL_GPIO_Init+0x300>)
 8002098:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800209c:	6453      	str	r3, [r2, #68]	@ 0x44
 800209e:	4b5a      	ldr	r3, [pc, #360]	@ (8002208 <HAL_GPIO_Init+0x300>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020aa:	4a58      	ldr	r2, [pc, #352]	@ (800220c <HAL_GPIO_Init+0x304>)
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	089b      	lsrs	r3, r3, #2
 80020b0:	3302      	adds	r3, #2
 80020b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	220f      	movs	r2, #15
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002210 <HAL_GPIO_Init+0x308>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d025      	beq.n	8002122 <HAL_GPIO_Init+0x21a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002214 <HAL_GPIO_Init+0x30c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d01f      	beq.n	800211e <HAL_GPIO_Init+0x216>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002218 <HAL_GPIO_Init+0x310>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d019      	beq.n	800211a <HAL_GPIO_Init+0x212>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a4c      	ldr	r2, [pc, #304]	@ (800221c <HAL_GPIO_Init+0x314>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_GPIO_Init+0x20e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002220 <HAL_GPIO_Init+0x318>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00d      	beq.n	8002112 <HAL_GPIO_Init+0x20a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a4a      	ldr	r2, [pc, #296]	@ (8002224 <HAL_GPIO_Init+0x31c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d007      	beq.n	800210e <HAL_GPIO_Init+0x206>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a49      	ldr	r2, [pc, #292]	@ (8002228 <HAL_GPIO_Init+0x320>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d101      	bne.n	800210a <HAL_GPIO_Init+0x202>
 8002106:	2306      	movs	r3, #6
 8002108:	e00c      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 800210a:	2307      	movs	r3, #7
 800210c:	e00a      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 800210e:	2305      	movs	r3, #5
 8002110:	e008      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 8002112:	2304      	movs	r3, #4
 8002114:	e006      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 8002116:	2303      	movs	r3, #3
 8002118:	e004      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 800211a:	2302      	movs	r3, #2
 800211c:	e002      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_GPIO_Init+0x21c>
 8002122:	2300      	movs	r3, #0
 8002124:	69fa      	ldr	r2, [r7, #28]
 8002126:	f002 0203 	and.w	r2, r2, #3
 800212a:	0092      	lsls	r2, r2, #2
 800212c:	4093      	lsls	r3, r2
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002134:	4935      	ldr	r1, [pc, #212]	@ (800220c <HAL_GPIO_Init+0x304>)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	089b      	lsrs	r3, r3, #2
 800213a:	3302      	adds	r3, #2
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002142:	4b3a      	ldr	r3, [pc, #232]	@ (800222c <HAL_GPIO_Init+0x324>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002166:	4a31      	ldr	r2, [pc, #196]	@ (800222c <HAL_GPIO_Init+0x324>)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800216c:	4b2f      	ldr	r3, [pc, #188]	@ (800222c <HAL_GPIO_Init+0x324>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002190:	4a26      	ldr	r2, [pc, #152]	@ (800222c <HAL_GPIO_Init+0x324>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002196:	4b25      	ldr	r3, [pc, #148]	@ (800222c <HAL_GPIO_Init+0x324>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ba:	4a1c      	ldr	r2, [pc, #112]	@ (800222c <HAL_GPIO_Init+0x324>)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021c0:	4b1a      	ldr	r3, [pc, #104]	@ (800222c <HAL_GPIO_Init+0x324>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021e4:	4a11      	ldr	r2, [pc, #68]	@ (800222c <HAL_GPIO_Init+0x324>)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3301      	adds	r3, #1
 80021ee:	61fb      	str	r3, [r7, #28]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	2b0f      	cmp	r3, #15
 80021f4:	f67f ae96 	bls.w	8001f24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	3724      	adds	r7, #36	@ 0x24
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800
 800220c:	40013800 	.word	0x40013800
 8002210:	40020000 	.word	0x40020000
 8002214:	40020400 	.word	0x40020400
 8002218:	40020800 	.word	0x40020800
 800221c:	40020c00 	.word	0x40020c00
 8002220:	40021000 	.word	0x40021000
 8002224:	40021400 	.word	0x40021400
 8002228:	40021800 	.word	0x40021800
 800222c:	40013c00 	.word	0x40013c00

08002230 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	887b      	ldrh	r3, [r7, #2]
 8002242:	4013      	ands	r3, r2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
 800224c:	e001      	b.n	8002252 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002252:	7bfb      	ldrb	r3, [r7, #15]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
 800226c:	4613      	mov	r3, r2
 800226e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002270:	787b      	ldrb	r3, [r7, #1]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800227c:	e003      	b.n	8002286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800227e:	887b      	ldrh	r3, [r7, #2]
 8002280:	041a      	lsls	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	619a      	str	r2, [r3, #24]
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	4b20      	ldr	r3, [pc, #128]	@ (8002324 <HAL_PWREx_EnableOverDrive+0x90>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	4a1f      	ldr	r2, [pc, #124]	@ (8002324 <HAL_PWREx_EnableOverDrive+0x90>)
 80022a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002324 <HAL_PWREx_EnableOverDrive+0x90>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80022ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002328 <HAL_PWREx_EnableOverDrive+0x94>)
 80022bc:	2201      	movs	r2, #1
 80022be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022c0:	f7ff f9e2 	bl	8001688 <HAL_GetTick>
 80022c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022c6:	e009      	b.n	80022dc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022c8:	f7ff f9de 	bl	8001688 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022d6:	d901      	bls.n	80022dc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e01f      	b.n	800231c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80022dc:	4b13      	ldr	r3, [pc, #76]	@ (800232c <HAL_PWREx_EnableOverDrive+0x98>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022e8:	d1ee      	bne.n	80022c8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80022ea:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <HAL_PWREx_EnableOverDrive+0x9c>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022f0:	f7ff f9ca 	bl	8001688 <HAL_GetTick>
 80022f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022f6:	e009      	b.n	800230c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022f8:	f7ff f9c6 	bl	8001688 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002306:	d901      	bls.n	800230c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e007      	b.n	800231c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800230c:	4b07      	ldr	r3, [pc, #28]	@ (800232c <HAL_PWREx_EnableOverDrive+0x98>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002314:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002318:	d1ee      	bne.n	80022f8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40023800 	.word	0x40023800
 8002328:	420e0040 	.word	0x420e0040
 800232c:	40007000 	.word	0x40007000
 8002330:	420e0044 	.word	0x420e0044

08002334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0cc      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002348:	4b68      	ldr	r3, [pc, #416]	@ (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d90c      	bls.n	8002370 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b65      	ldr	r3, [pc, #404]	@ (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b63      	ldr	r3, [pc, #396]	@ (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0b8      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d020      	beq.n	80023be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002388:	4b59      	ldr	r3, [pc, #356]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4a58      	ldr	r2, [pc, #352]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002392:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023a0:	4b53      	ldr	r3, [pc, #332]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	4a52      	ldr	r2, [pc, #328]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ac:	4b50      	ldr	r3, [pc, #320]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	494d      	ldr	r1, [pc, #308]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d044      	beq.n	8002454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d107      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d2:	4b47      	ldr	r3, [pc, #284]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d119      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e07f      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d003      	beq.n	80023f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f2:	4b3f      	ldr	r3, [pc, #252]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e06f      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002402:	4b3b      	ldr	r3, [pc, #236]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e067      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002412:	4b37      	ldr	r3, [pc, #220]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f023 0203 	bic.w	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4934      	ldr	r1, [pc, #208]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	4313      	orrs	r3, r2
 8002422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002424:	f7ff f930 	bl	8001688 <HAL_GetTick>
 8002428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242a:	e00a      	b.n	8002442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242c:	f7ff f92c 	bl	8001688 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e04f      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	4b2b      	ldr	r3, [pc, #172]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 020c 	and.w	r2, r3, #12
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	429a      	cmp	r2, r3
 8002452:	d1eb      	bne.n	800242c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002454:	4b25      	ldr	r3, [pc, #148]	@ (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d20c      	bcs.n	800247c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b22      	ldr	r3, [pc, #136]	@ (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246a:	4b20      	ldr	r3, [pc, #128]	@ (80024ec <HAL_RCC_ClockConfig+0x1b8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e032      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002488:	4b19      	ldr	r3, [pc, #100]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4916      	ldr	r1, [pc, #88]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	4313      	orrs	r3, r2
 8002498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d009      	beq.n	80024ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024a6:	4b12      	ldr	r3, [pc, #72]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	490e      	ldr	r1, [pc, #56]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ba:	f000 f855 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 80024be:	4602      	mov	r2, r0
 80024c0:	4b0b      	ldr	r3, [pc, #44]	@ (80024f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	490a      	ldr	r1, [pc, #40]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 80024cc:	5ccb      	ldrb	r3, [r1, r3]
 80024ce:	fa22 f303 	lsr.w	r3, r2, r3
 80024d2:	4a09      	ldr	r2, [pc, #36]	@ (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024d6:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff f890 	bl	8001600 <HAL_InitTick>

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40023c00 	.word	0x40023c00
 80024f0:	40023800 	.word	0x40023800
 80024f4:	08004b4c 	.word	0x08004b4c
 80024f8:	20000000 	.word	0x20000000
 80024fc:	20000004 	.word	0x20000004

08002500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002504:	4b03      	ldr	r3, [pc, #12]	@ (8002514 <HAL_RCC_GetHCLKFreq+0x14>)
 8002506:	681b      	ldr	r3, [r3, #0]
}
 8002508:	4618      	mov	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	20000000 	.word	0x20000000

08002518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800251c:	f7ff fff0 	bl	8002500 <HAL_RCC_GetHCLKFreq>
 8002520:	4602      	mov	r2, r0
 8002522:	4b05      	ldr	r3, [pc, #20]	@ (8002538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	0a9b      	lsrs	r3, r3, #10
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	4903      	ldr	r1, [pc, #12]	@ (800253c <HAL_RCC_GetPCLK1Freq+0x24>)
 800252e:	5ccb      	ldrb	r3, [r1, r3]
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002534:	4618      	mov	r0, r3
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40023800 	.word	0x40023800
 800253c:	08004b5c 	.word	0x08004b5c

08002540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002544:	f7ff ffdc 	bl	8002500 <HAL_RCC_GetHCLKFreq>
 8002548:	4602      	mov	r2, r0
 800254a:	4b05      	ldr	r3, [pc, #20]	@ (8002560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	0b5b      	lsrs	r3, r3, #13
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	4903      	ldr	r1, [pc, #12]	@ (8002564 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002556:	5ccb      	ldrb	r3, [r1, r3]
 8002558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800255c:	4618      	mov	r0, r3
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40023800 	.word	0x40023800
 8002564:	08004b5c 	.word	0x08004b5c

08002568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800256c:	b0a6      	sub	sp, #152	@ 0x98
 800256e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002576:	2300      	movs	r3, #0
 8002578:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800258e:	4bc8      	ldr	r3, [pc, #800]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b0c      	cmp	r3, #12
 8002598:	f200 817e 	bhi.w	8002898 <HAL_RCC_GetSysClockFreq+0x330>
 800259c:	a201      	add	r2, pc, #4	@ (adr r2, 80025a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800259e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a2:	bf00      	nop
 80025a4:	080025d9 	.word	0x080025d9
 80025a8:	08002899 	.word	0x08002899
 80025ac:	08002899 	.word	0x08002899
 80025b0:	08002899 	.word	0x08002899
 80025b4:	080025e1 	.word	0x080025e1
 80025b8:	08002899 	.word	0x08002899
 80025bc:	08002899 	.word	0x08002899
 80025c0:	08002899 	.word	0x08002899
 80025c4:	080025e9 	.word	0x080025e9
 80025c8:	08002899 	.word	0x08002899
 80025cc:	08002899 	.word	0x08002899
 80025d0:	08002899 	.word	0x08002899
 80025d4:	08002753 	.word	0x08002753
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025d8:	4bb6      	ldr	r3, [pc, #728]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80025da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80025de:	e15f      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025e0:	4bb5      	ldr	r3, [pc, #724]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x350>)
 80025e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80025e6:	e15b      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025e8:	4bb1      	ldr	r3, [pc, #708]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x348>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025f4:	4bae      	ldr	r3, [pc, #696]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x348>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d031      	beq.n	8002664 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002600:	4bab      	ldr	r3, [pc, #684]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	099b      	lsrs	r3, r3, #6
 8002606:	2200      	movs	r2, #0
 8002608:	66bb      	str	r3, [r7, #104]	@ 0x68
 800260a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800260c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800260e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002612:	663b      	str	r3, [r7, #96]	@ 0x60
 8002614:	2300      	movs	r3, #0
 8002616:	667b      	str	r3, [r7, #100]	@ 0x64
 8002618:	4ba7      	ldr	r3, [pc, #668]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x350>)
 800261a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800261e:	462a      	mov	r2, r5
 8002620:	fb03 f202 	mul.w	r2, r3, r2
 8002624:	2300      	movs	r3, #0
 8002626:	4621      	mov	r1, r4
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	4413      	add	r3, r2
 800262e:	4aa2      	ldr	r2, [pc, #648]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002630:	4621      	mov	r1, r4
 8002632:	fba1 1202 	umull	r1, r2, r1, r2
 8002636:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002638:	460a      	mov	r2, r1
 800263a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800263c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800263e:	4413      	add	r3, r2
 8002640:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002642:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002646:	2200      	movs	r2, #0
 8002648:	65bb      	str	r3, [r7, #88]	@ 0x58
 800264a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800264c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002650:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002654:	f7fd fe2c 	bl	80002b0 <__aeabi_uldivmod>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4613      	mov	r3, r2
 800265e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002662:	e064      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002664:	4b92      	ldr	r3, [pc, #584]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	099b      	lsrs	r3, r3, #6
 800266a:	2200      	movs	r2, #0
 800266c:	653b      	str	r3, [r7, #80]	@ 0x50
 800266e:	657a      	str	r2, [r7, #84]	@ 0x54
 8002670:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002676:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002678:	2300      	movs	r3, #0
 800267a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800267c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002680:	4622      	mov	r2, r4
 8002682:	462b      	mov	r3, r5
 8002684:	f04f 0000 	mov.w	r0, #0
 8002688:	f04f 0100 	mov.w	r1, #0
 800268c:	0159      	lsls	r1, r3, #5
 800268e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002692:	0150      	lsls	r0, r2, #5
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4621      	mov	r1, r4
 800269a:	1a51      	subs	r1, r2, r1
 800269c:	6139      	str	r1, [r7, #16]
 800269e:	4629      	mov	r1, r5
 80026a0:	eb63 0301 	sbc.w	r3, r3, r1
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026b2:	4659      	mov	r1, fp
 80026b4:	018b      	lsls	r3, r1, #6
 80026b6:	4651      	mov	r1, sl
 80026b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026bc:	4651      	mov	r1, sl
 80026be:	018a      	lsls	r2, r1, #6
 80026c0:	4651      	mov	r1, sl
 80026c2:	ebb2 0801 	subs.w	r8, r2, r1
 80026c6:	4659      	mov	r1, fp
 80026c8:	eb63 0901 	sbc.w	r9, r3, r1
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026e0:	4690      	mov	r8, r2
 80026e2:	4699      	mov	r9, r3
 80026e4:	4623      	mov	r3, r4
 80026e6:	eb18 0303 	adds.w	r3, r8, r3
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	462b      	mov	r3, r5
 80026ee:	eb49 0303 	adc.w	r3, r9, r3
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002700:	4629      	mov	r1, r5
 8002702:	028b      	lsls	r3, r1, #10
 8002704:	4621      	mov	r1, r4
 8002706:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800270a:	4621      	mov	r1, r4
 800270c:	028a      	lsls	r2, r1, #10
 800270e:	4610      	mov	r0, r2
 8002710:	4619      	mov	r1, r3
 8002712:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002716:	2200      	movs	r2, #0
 8002718:	643b      	str	r3, [r7, #64]	@ 0x40
 800271a:	647a      	str	r2, [r7, #68]	@ 0x44
 800271c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002720:	f7fd fdc6 	bl	80002b0 <__aeabi_uldivmod>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4613      	mov	r3, r2
 800272a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800272e:	4b60      	ldr	r3, [pc, #384]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	0c1b      	lsrs	r3, r3, #16
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	3301      	adds	r3, #1
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002740:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002744:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002748:	fbb2 f3f3 	udiv	r3, r2, r3
 800274c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002750:	e0a6      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002752:	4b57      	ldr	r3, [pc, #348]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800275a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800275e:	4b54      	ldr	r3, [pc, #336]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d02a      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800276a:	4b51      	ldr	r3, [pc, #324]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x348>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	099b      	lsrs	r3, r3, #6
 8002770:	2200      	movs	r2, #0
 8002772:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002774:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002778:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800277c:	2100      	movs	r1, #0
 800277e:	4b4e      	ldr	r3, [pc, #312]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002780:	fb03 f201 	mul.w	r2, r3, r1
 8002784:	2300      	movs	r3, #0
 8002786:	fb00 f303 	mul.w	r3, r0, r3
 800278a:	4413      	add	r3, r2
 800278c:	4a4a      	ldr	r2, [pc, #296]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x350>)
 800278e:	fba0 1202 	umull	r1, r2, r0, r2
 8002792:	677a      	str	r2, [r7, #116]	@ 0x74
 8002794:	460a      	mov	r2, r1
 8002796:	673a      	str	r2, [r7, #112]	@ 0x70
 8002798:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800279a:	4413      	add	r3, r2
 800279c:	677b      	str	r3, [r7, #116]	@ 0x74
 800279e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027a2:	2200      	movs	r2, #0
 80027a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80027a6:	637a      	str	r2, [r7, #52]	@ 0x34
 80027a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80027ac:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80027b0:	f7fd fd7e 	bl	80002b0 <__aeabi_uldivmod>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4613      	mov	r3, r2
 80027ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80027be:	e05b      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027c0:	4b3b      	ldr	r3, [pc, #236]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x348>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	099b      	lsrs	r3, r3, #6
 80027c6:	2200      	movs	r2, #0
 80027c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d2:	623b      	str	r3, [r7, #32]
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80027d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027dc:	4642      	mov	r2, r8
 80027de:	464b      	mov	r3, r9
 80027e0:	f04f 0000 	mov.w	r0, #0
 80027e4:	f04f 0100 	mov.w	r1, #0
 80027e8:	0159      	lsls	r1, r3, #5
 80027ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ee:	0150      	lsls	r0, r2, #5
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4641      	mov	r1, r8
 80027f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80027fa:	4649      	mov	r1, r9
 80027fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800280c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002810:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002814:	ebb2 040a 	subs.w	r4, r2, sl
 8002818:	eb63 050b 	sbc.w	r5, r3, fp
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	00eb      	lsls	r3, r5, #3
 8002826:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800282a:	00e2      	lsls	r2, r4, #3
 800282c:	4614      	mov	r4, r2
 800282e:	461d      	mov	r5, r3
 8002830:	4643      	mov	r3, r8
 8002832:	18e3      	adds	r3, r4, r3
 8002834:	603b      	str	r3, [r7, #0]
 8002836:	464b      	mov	r3, r9
 8002838:	eb45 0303 	adc.w	r3, r5, r3
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	e9d7 4500 	ldrd	r4, r5, [r7]
 800284a:	4629      	mov	r1, r5
 800284c:	028b      	lsls	r3, r1, #10
 800284e:	4621      	mov	r1, r4
 8002850:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002854:	4621      	mov	r1, r4
 8002856:	028a      	lsls	r2, r1, #10
 8002858:	4610      	mov	r0, r2
 800285a:	4619      	mov	r1, r3
 800285c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002860:	2200      	movs	r2, #0
 8002862:	61bb      	str	r3, [r7, #24]
 8002864:	61fa      	str	r2, [r7, #28]
 8002866:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800286a:	f7fd fd21 	bl	80002b0 <__aeabi_uldivmod>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4613      	mov	r3, r2
 8002874:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002878:	4b0d      	ldr	r3, [pc, #52]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x348>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	0f1b      	lsrs	r3, r3, #28
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002886:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800288a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800288e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002892:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002896:	e003      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002898:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x34c>)
 800289a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800289e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3798      	adds	r7, #152	@ 0x98
 80028a8:	46bd      	mov	sp, r7
 80028aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	00f42400 	.word	0x00f42400
 80028b8:	017d7840 	.word	0x017d7840

080028bc <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80028c2:	f7fe fee1 	bl	8001688 <HAL_GetTick>
 80028c6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80028c8:	4b72      	ldr	r3, [pc, #456]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a71      	ldr	r2, [pc, #452]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d6:	f7fe fed7 	bl	8001688 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e0d0      	b.n	8002a8a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80028e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0f0      	beq.n	80028d6 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80028f4:	4b67      	ldr	r3, [pc, #412]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a66      	ldr	r2, [pc, #408]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 80028fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002900:	f7fe fec2 	bl	8001688 <HAL_GetTick>
 8002904:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002906:	4b63      	ldr	r3, [pc, #396]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800290c:	e00a      	b.n	8002924 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800290e:	f7fe febb 	bl	8001688 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291c:	4293      	cmp	r3, r2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e0b2      	b.n	8002a8a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002924:	4b5b      	ldr	r3, [pc, #364]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 030c 	and.w	r3, r3, #12
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1ee      	bne.n	800290e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002930:	f7fe feaa 	bl	8001688 <HAL_GetTick>
 8002934:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002936:	4b57      	ldr	r3, [pc, #348]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a56      	ldr	r2, [pc, #344]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 800293c:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8002940:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002944:	f7fe fea0 	bl	8001688 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b64      	cmp	r3, #100	@ 0x64
 8002950:	d901      	bls.n	8002956 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e099      	b.n	8002a8a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002956:	4b4f      	ldr	r3, [pc, #316]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002962:	f7fe fe91 	bl	8001688 <HAL_GetTick>
 8002966:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002968:	4b4a      	ldr	r3, [pc, #296]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a49      	ldr	r2, [pc, #292]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 800296e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002972:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002976:	f7fe fe87 	bl	8001688 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e080      	b.n	8002a8a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002988:	4b42      	ldr	r3, [pc, #264]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f0      	bne.n	8002976 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002994:	f7fe fe78 	bl	8001688 <HAL_GetTick>
 8002998:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800299a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a3d      	ldr	r2, [pc, #244]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 80029a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80029a4:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029a8:	f7fe fe6e 	bl	8001688 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e067      	b.n	8002a8a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80029ba:	4b36      	ldr	r3, [pc, #216]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80029c6:	f7fe fe5f 	bl	8001688 <HAL_GetTick>
 80029ca:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 80029cc:	4b31      	ldr	r3, [pc, #196]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a30      	ldr	r2, [pc, #192]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 80029d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029d6:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80029da:	f7fe fe55 	bl	8001688 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e04e      	b.n	8002a8a <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80029ec:	4b29      	ldr	r3, [pc, #164]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f0      	bne.n	80029da <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 80029f8:	4b26      	ldr	r3, [pc, #152]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 80029fa:	4a27      	ldr	r2, [pc, #156]	@ (8002a98 <HAL_RCC_DeInit+0x1dc>)
 80029fc:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80029fe:	4b25      	ldr	r3, [pc, #148]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 8002a00:	4a25      	ldr	r2, [pc, #148]	@ (8002a98 <HAL_RCC_DeInit+0x1dc>)
 8002a02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 8002a06:	4b23      	ldr	r3, [pc, #140]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 8002a08:	4a24      	ldr	r2, [pc, #144]	@ (8002a9c <HAL_RCC_DeInit+0x1e0>)
 8002a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002a0e:	4b21      	ldr	r3, [pc, #132]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	4a20      	ldr	r2, [pc, #128]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 8002a14:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8002a18:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	4a1d      	ldr	r2, [pc, #116]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 8002a20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a24:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8002a26:	4b1b      	ldr	r3, [pc, #108]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	4a1a      	ldr	r2, [pc, #104]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 8002a2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a30:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 8002a32:	4b18      	ldr	r3, [pc, #96]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	4a17      	ldr	r2, [pc, #92]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 8002a38:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8002a3c:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002a3e:	4b15      	ldr	r3, [pc, #84]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	4a14      	ldr	r2, [pc, #80]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 8002a44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a48:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8002a4a:	4b12      	ldr	r3, [pc, #72]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	4a11      	ldr	r2, [pc, #68]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 8002a50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a54:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002a56:	4b0f      	ldr	r3, [pc, #60]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 8002a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a5a:	4a0e      	ldr	r2, [pc, #56]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002a62:	4b0c      	ldr	r3, [pc, #48]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 8002a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a66:	4a0b      	ldr	r2, [pc, #44]	@ (8002a94 <HAL_RCC_DeInit+0x1d8>)
 8002a68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a6c:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <HAL_RCC_DeInit+0x1e4>)
 8002a70:	4a0c      	ldr	r2, [pc, #48]	@ (8002aa4 <HAL_RCC_DeInit+0x1e8>)
 8002a72:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a74:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa8 <HAL_RCC_DeInit+0x1ec>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe fdc1 	bl	8001600 <HAL_InitTick>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e000      	b.n	8002a8a <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8002a88:	2300      	movs	r3, #0
  }
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800
 8002a98:	24003010 	.word	0x24003010
 8002a9c:	04003010 	.word	0x04003010
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	00f42400 	.word	0x00f42400
 8002aa8:	20000004 	.word	0x20000004

08002aac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e28d      	b.n	8002fda <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8083 	beq.w	8002bd2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002acc:	4b94      	ldr	r3, [pc, #592]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d019      	beq.n	8002b0c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ad8:	4b91      	ldr	r3, [pc, #580]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 030c 	and.w	r3, r3, #12
        || \
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d106      	bne.n	8002af2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ae4:	4b8e      	ldr	r3, [pc, #568]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002af0:	d00c      	beq.n	8002b0c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002af2:	4b8b      	ldr	r3, [pc, #556]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002afa:	2b0c      	cmp	r3, #12
 8002afc:	d112      	bne.n	8002b24 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002afe:	4b88      	ldr	r3, [pc, #544]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b0a:	d10b      	bne.n	8002b24 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0c:	4b84      	ldr	r3, [pc, #528]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d05b      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x124>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d157      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e25a      	b.n	8002fda <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b2c:	d106      	bne.n	8002b3c <HAL_RCC_OscConfig+0x90>
 8002b2e:	4b7c      	ldr	r3, [pc, #496]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a7b      	ldr	r2, [pc, #492]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	e01d      	b.n	8002b78 <HAL_RCC_OscConfig+0xcc>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b44:	d10c      	bne.n	8002b60 <HAL_RCC_OscConfig+0xb4>
 8002b46:	4b76      	ldr	r3, [pc, #472]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a75      	ldr	r2, [pc, #468]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002b4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	4b73      	ldr	r3, [pc, #460]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a72      	ldr	r2, [pc, #456]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	e00b      	b.n	8002b78 <HAL_RCC_OscConfig+0xcc>
 8002b60:	4b6f      	ldr	r3, [pc, #444]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a6e      	ldr	r2, [pc, #440]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002b66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	4b6c      	ldr	r3, [pc, #432]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a6b      	ldr	r2, [pc, #428]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002b72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d013      	beq.n	8002ba8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7fe fd82 	bl	8001688 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b88:	f7fe fd7e 	bl	8001688 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b64      	cmp	r3, #100	@ 0x64
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e21f      	b.n	8002fda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	4b61      	ldr	r3, [pc, #388]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0xdc>
 8002ba6:	e014      	b.n	8002bd2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fd6e 	bl	8001688 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb0:	f7fe fd6a 	bl	8001688 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	@ 0x64
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e20b      	b.n	8002fda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc2:	4b57      	ldr	r3, [pc, #348]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x104>
 8002bce:	e000      	b.n	8002bd2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d06f      	beq.n	8002cbe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002bde:	4b50      	ldr	r3, [pc, #320]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d017      	beq.n	8002c1a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002bea:	4b4d      	ldr	r3, [pc, #308]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
        || \
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d105      	bne.n	8002c02 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00b      	beq.n	8002c1a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c02:	4b47      	ldr	r3, [pc, #284]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c0a:	2b0c      	cmp	r3, #12
 8002c0c:	d11c      	bne.n	8002c48 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c0e:	4b44      	ldr	r3, [pc, #272]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d116      	bne.n	8002c48 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1a:	4b41      	ldr	r3, [pc, #260]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d005      	beq.n	8002c32 <HAL_RCC_OscConfig+0x186>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d001      	beq.n	8002c32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e1d3      	b.n	8002fda <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c32:	4b3b      	ldr	r3, [pc, #236]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4937      	ldr	r1, [pc, #220]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c46:	e03a      	b.n	8002cbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d020      	beq.n	8002c92 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c50:	4b34      	ldr	r3, [pc, #208]	@ (8002d24 <HAL_RCC_OscConfig+0x278>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c56:	f7fe fd17 	bl	8001688 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5e:	f7fe fd13 	bl	8001688 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e1b4      	b.n	8002fda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c70:	4b2b      	ldr	r3, [pc, #172]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7c:	4b28      	ldr	r3, [pc, #160]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	4925      	ldr	r1, [pc, #148]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	600b      	str	r3, [r1, #0]
 8002c90:	e015      	b.n	8002cbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c92:	4b24      	ldr	r3, [pc, #144]	@ (8002d24 <HAL_RCC_OscConfig+0x278>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7fe fcf6 	bl	8001688 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca0:	f7fe fcf2 	bl	8001688 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e193      	b.n	8002fda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d036      	beq.n	8002d38 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d016      	beq.n	8002d00 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cd2:	4b15      	ldr	r3, [pc, #84]	@ (8002d28 <HAL_RCC_OscConfig+0x27c>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7fe fcd6 	bl	8001688 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce0:	f7fe fcd2 	bl	8001688 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e173      	b.n	8002fda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x234>
 8002cfe:	e01b      	b.n	8002d38 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d00:	4b09      	ldr	r3, [pc, #36]	@ (8002d28 <HAL_RCC_OscConfig+0x27c>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d06:	f7fe fcbf 	bl	8001688 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d0c:	e00e      	b.n	8002d2c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d0e:	f7fe fcbb 	bl	8001688 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d907      	bls.n	8002d2c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e15c      	b.n	8002fda <HAL_RCC_OscConfig+0x52e>
 8002d20:	40023800 	.word	0x40023800
 8002d24:	42470000 	.word	0x42470000
 8002d28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d2c:	4b8a      	ldr	r3, [pc, #552]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002d2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1ea      	bne.n	8002d0e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 8097 	beq.w	8002e74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d46:	2300      	movs	r3, #0
 8002d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d4a:	4b83      	ldr	r3, [pc, #524]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10f      	bne.n	8002d76 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d66:	4b7c      	ldr	r3, [pc, #496]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d72:	2301      	movs	r3, #1
 8002d74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d76:	4b79      	ldr	r3, [pc, #484]	@ (8002f5c <HAL_RCC_OscConfig+0x4b0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d118      	bne.n	8002db4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d82:	4b76      	ldr	r3, [pc, #472]	@ (8002f5c <HAL_RCC_OscConfig+0x4b0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a75      	ldr	r2, [pc, #468]	@ (8002f5c <HAL_RCC_OscConfig+0x4b0>)
 8002d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d8e:	f7fe fc7b 	bl	8001688 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d96:	f7fe fc77 	bl	8001688 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e118      	b.n	8002fda <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da8:	4b6c      	ldr	r3, [pc, #432]	@ (8002f5c <HAL_RCC_OscConfig+0x4b0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d106      	bne.n	8002dca <HAL_RCC_OscConfig+0x31e>
 8002dbc:	4b66      	ldr	r3, [pc, #408]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc0:	4a65      	ldr	r2, [pc, #404]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dc8:	e01c      	b.n	8002e04 <HAL_RCC_OscConfig+0x358>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b05      	cmp	r3, #5
 8002dd0:	d10c      	bne.n	8002dec <HAL_RCC_OscConfig+0x340>
 8002dd2:	4b61      	ldr	r3, [pc, #388]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd6:	4a60      	ldr	r2, [pc, #384]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002dd8:	f043 0304 	orr.w	r3, r3, #4
 8002ddc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dde:	4b5e      	ldr	r3, [pc, #376]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de2:	4a5d      	ldr	r2, [pc, #372]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dea:	e00b      	b.n	8002e04 <HAL_RCC_OscConfig+0x358>
 8002dec:	4b5a      	ldr	r3, [pc, #360]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df0:	4a59      	ldr	r2, [pc, #356]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002df2:	f023 0301 	bic.w	r3, r3, #1
 8002df6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002df8:	4b57      	ldr	r3, [pc, #348]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfc:	4a56      	ldr	r2, [pc, #344]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002dfe:	f023 0304 	bic.w	r3, r3, #4
 8002e02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d015      	beq.n	8002e38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0c:	f7fe fc3c 	bl	8001688 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e12:	e00a      	b.n	8002e2a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e14:	f7fe fc38 	bl	8001688 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e0d7      	b.n	8002fda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2a:	4b4b      	ldr	r3, [pc, #300]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0ee      	beq.n	8002e14 <HAL_RCC_OscConfig+0x368>
 8002e36:	e014      	b.n	8002e62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e38:	f7fe fc26 	bl	8001688 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e3e:	e00a      	b.n	8002e56 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e40:	f7fe fc22 	bl	8001688 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e0c1      	b.n	8002fda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e56:	4b40      	ldr	r3, [pc, #256]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1ee      	bne.n	8002e40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e62:	7dfb      	ldrb	r3, [r7, #23]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d105      	bne.n	8002e74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e68:	4b3b      	ldr	r3, [pc, #236]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6c:	4a3a      	ldr	r2, [pc, #232]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002e6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80ad 	beq.w	8002fd8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e7e:	4b36      	ldr	r3, [pc, #216]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d060      	beq.n	8002f4c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d145      	bne.n	8002f1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e92:	4b33      	ldr	r3, [pc, #204]	@ (8002f60 <HAL_RCC_OscConfig+0x4b4>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe fbf6 	bl	8001688 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7fe fbf2 	bl	8001688 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e093      	b.n	8002fda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb2:	4b29      	ldr	r3, [pc, #164]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69da      	ldr	r2, [r3, #28]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ecc:	019b      	lsls	r3, r3, #6
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed4:	085b      	lsrs	r3, r3, #1
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	041b      	lsls	r3, r3, #16
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee0:	061b      	lsls	r3, r3, #24
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee8:	071b      	lsls	r3, r3, #28
 8002eea:	491b      	ldr	r1, [pc, #108]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f60 <HAL_RCC_OscConfig+0x4b4>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef6:	f7fe fbc7 	bl	8001688 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efe:	f7fe fbc3 	bl	8001688 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e064      	b.n	8002fda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f10:	4b11      	ldr	r3, [pc, #68]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x452>
 8002f1c:	e05c      	b.n	8002fd8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1e:	4b10      	ldr	r3, [pc, #64]	@ (8002f60 <HAL_RCC_OscConfig+0x4b4>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe fbb0 	bl	8001688 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2c:	f7fe fbac 	bl	8001688 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e04d      	b.n	8002fda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3e:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <HAL_RCC_OscConfig+0x4ac>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x480>
 8002f4a:	e045      	b.n	8002fd8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d107      	bne.n	8002f64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e040      	b.n	8002fda <HAL_RCC_OscConfig+0x52e>
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40007000 	.word	0x40007000
 8002f60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f64:	4b1f      	ldr	r3, [pc, #124]	@ (8002fe4 <HAL_RCC_OscConfig+0x538>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d030      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d129      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d122      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f94:	4013      	ands	r3, r2
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d119      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002faa:	085b      	lsrs	r3, r3, #1
 8002fac:	3b01      	subs	r3, #1
 8002fae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d10f      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d107      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800

08002fe8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e042      	b.n	8003080 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fe f89c 	bl	800114c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2224      	movs	r2, #36	@ 0x24
 8003018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800302a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 fa09 	bl	8003444 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003040:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003050:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003060:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08a      	sub	sp, #40	@ 0x28
 800308c:	af02      	add	r7, sp, #8
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	4613      	mov	r3, r2
 8003096:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	d175      	bne.n	8003194 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <HAL_UART_Transmit+0x2c>
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e06e      	b.n	8003196 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2221      	movs	r2, #33	@ 0x21
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030c6:	f7fe fadf 	bl	8001688 <HAL_GetTick>
 80030ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	88fa      	ldrh	r2, [r7, #6]
 80030d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	88fa      	ldrh	r2, [r7, #6]
 80030d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030e0:	d108      	bne.n	80030f4 <HAL_UART_Transmit+0x6c>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d104      	bne.n	80030f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	61bb      	str	r3, [r7, #24]
 80030f2:	e003      	b.n	80030fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030fc:	e02e      	b.n	800315c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2200      	movs	r2, #0
 8003106:	2180      	movs	r1, #128	@ 0x80
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f8df 	bl	80032cc <UART_WaitOnFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e03a      	b.n	8003196 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10b      	bne.n	800313e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003134:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	3302      	adds	r3, #2
 800313a:	61bb      	str	r3, [r7, #24]
 800313c:	e007      	b.n	800314e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	781a      	ldrb	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	3301      	adds	r3, #1
 800314c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1cb      	bne.n	80030fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2200      	movs	r2, #0
 800316e:	2140      	movs	r1, #64	@ 0x40
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 f8ab 	bl	80032cc <UART_WaitOnFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e006      	b.n	8003196 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	e000      	b.n	8003196 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003194:	2302      	movs	r3, #2
  }
}
 8003196:	4618      	mov	r0, r3
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b08a      	sub	sp, #40	@ 0x28
 80031a2:	af02      	add	r7, sp, #8
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	603b      	str	r3, [r7, #0]
 80031aa:	4613      	mov	r3, r2
 80031ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	f040 8081 	bne.w	80032c2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <HAL_UART_Receive+0x2e>
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e079      	b.n	80032c4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2222      	movs	r2, #34	@ 0x22
 80031da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031e4:	f7fe fa50 	bl	8001688 <HAL_GetTick>
 80031e8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	88fa      	ldrh	r2, [r7, #6]
 80031ee:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	88fa      	ldrh	r2, [r7, #6]
 80031f4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031fe:	d108      	bne.n	8003212 <HAL_UART_Receive+0x74>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d104      	bne.n	8003212 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003208:	2300      	movs	r3, #0
 800320a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	61bb      	str	r3, [r7, #24]
 8003210:	e003      	b.n	800321a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003216:	2300      	movs	r3, #0
 8003218:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800321a:	e047      	b.n	80032ac <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2200      	movs	r2, #0
 8003224:	2120      	movs	r1, #32
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f850 	bl	80032cc <UART_WaitOnFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d005      	beq.n	800323e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e042      	b.n	80032c4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10c      	bne.n	800325e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	b29b      	uxth	r3, r3
 800324c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003250:	b29a      	uxth	r2, r3
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	3302      	adds	r3, #2
 800325a:	61bb      	str	r3, [r7, #24]
 800325c:	e01f      	b.n	800329e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003266:	d007      	beq.n	8003278 <HAL_UART_Receive+0xda>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10a      	bne.n	8003286 <HAL_UART_Receive+0xe8>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d106      	bne.n	8003286 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	b2da      	uxtb	r2, r3
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	e008      	b.n	8003298 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003292:	b2da      	uxtb	r2, r3
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	3301      	adds	r3, #1
 800329c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1b2      	bne.n	800321c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	e000      	b.n	80032c4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80032c2:	2302      	movs	r3, #2
  }
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3720      	adds	r7, #32
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032dc:	e03b      	b.n	8003356 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e4:	d037      	beq.n	8003356 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e6:	f7fe f9cf 	bl	8001688 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	6a3a      	ldr	r2, [r7, #32]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d302      	bcc.n	80032fc <UART_WaitOnFlagUntilTimeout+0x30>
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e03a      	b.n	8003376 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b00      	cmp	r3, #0
 800330c:	d023      	beq.n	8003356 <UART_WaitOnFlagUntilTimeout+0x8a>
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b80      	cmp	r3, #128	@ 0x80
 8003312:	d020      	beq.n	8003356 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b40      	cmp	r3, #64	@ 0x40
 8003318:	d01d      	beq.n	8003356 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b08      	cmp	r3, #8
 8003326:	d116      	bne.n	8003356 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 f81d 	bl	800337e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2208      	movs	r2, #8
 8003348:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e00f      	b.n	8003376 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4013      	ands	r3, r2
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	429a      	cmp	r2, r3
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	429a      	cmp	r2, r3
 8003372:	d0b4      	beq.n	80032de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800337e:	b480      	push	{r7}
 8003380:	b095      	sub	sp, #84	@ 0x54
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	330c      	adds	r3, #12
 800338c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003390:	e853 3f00 	ldrex	r3, [r3]
 8003394:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003398:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800339c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	330c      	adds	r3, #12
 80033a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80033a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033ae:	e841 2300 	strex	r3, r2, [r1]
 80033b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1e5      	bne.n	8003386 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3314      	adds	r3, #20
 80033c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	e853 3f00 	ldrex	r3, [r3]
 80033c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3314      	adds	r3, #20
 80033d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033e2:	e841 2300 	strex	r3, r2, [r1]
 80033e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1e5      	bne.n	80033ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d119      	bne.n	800342a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	330c      	adds	r3, #12
 80033fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	e853 3f00 	ldrex	r3, [r3]
 8003404:	60bb      	str	r3, [r7, #8]
   return(result);
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f023 0310 	bic.w	r3, r3, #16
 800340c:	647b      	str	r3, [r7, #68]	@ 0x44
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	330c      	adds	r3, #12
 8003414:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003416:	61ba      	str	r2, [r7, #24]
 8003418:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341a:	6979      	ldr	r1, [r7, #20]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	e841 2300 	strex	r3, r2, [r1]
 8003422:	613b      	str	r3, [r7, #16]
   return(result);
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1e5      	bne.n	80033f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003438:	bf00      	nop
 800343a:	3754      	adds	r7, #84	@ 0x54
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003448:	b0c0      	sub	sp, #256	@ 0x100
 800344a:	af00      	add	r7, sp, #0
 800344c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003460:	68d9      	ldr	r1, [r3, #12]
 8003462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	ea40 0301 	orr.w	r3, r0, r1
 800346c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800346e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	431a      	orrs	r2, r3
 800347c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	431a      	orrs	r2, r3
 8003484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800349c:	f021 010c 	bic.w	r1, r1, #12
 80034a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80034aa:	430b      	orrs	r3, r1
 80034ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80034ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034be:	6999      	ldr	r1, [r3, #24]
 80034c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	ea40 0301 	orr.w	r3, r0, r1
 80034ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	4b8f      	ldr	r3, [pc, #572]	@ (8003710 <UART_SetConfig+0x2cc>)
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d005      	beq.n	80034e4 <UART_SetConfig+0xa0>
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	4b8d      	ldr	r3, [pc, #564]	@ (8003714 <UART_SetConfig+0x2d0>)
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d104      	bne.n	80034ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034e4:	f7ff f82c 	bl	8002540 <HAL_RCC_GetPCLK2Freq>
 80034e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80034ec:	e003      	b.n	80034f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034ee:	f7ff f813 	bl	8002518 <HAL_RCC_GetPCLK1Freq>
 80034f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003500:	f040 810c 	bne.w	800371c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003508:	2200      	movs	r2, #0
 800350a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800350e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003512:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003516:	4622      	mov	r2, r4
 8003518:	462b      	mov	r3, r5
 800351a:	1891      	adds	r1, r2, r2
 800351c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800351e:	415b      	adcs	r3, r3
 8003520:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003522:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003526:	4621      	mov	r1, r4
 8003528:	eb12 0801 	adds.w	r8, r2, r1
 800352c:	4629      	mov	r1, r5
 800352e:	eb43 0901 	adc.w	r9, r3, r1
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800353e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003542:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003546:	4690      	mov	r8, r2
 8003548:	4699      	mov	r9, r3
 800354a:	4623      	mov	r3, r4
 800354c:	eb18 0303 	adds.w	r3, r8, r3
 8003550:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003554:	462b      	mov	r3, r5
 8003556:	eb49 0303 	adc.w	r3, r9, r3
 800355a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800355e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800356a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800356e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003572:	460b      	mov	r3, r1
 8003574:	18db      	adds	r3, r3, r3
 8003576:	653b      	str	r3, [r7, #80]	@ 0x50
 8003578:	4613      	mov	r3, r2
 800357a:	eb42 0303 	adc.w	r3, r2, r3
 800357e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003580:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003584:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003588:	f7fc fe92 	bl	80002b0 <__aeabi_uldivmod>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4b61      	ldr	r3, [pc, #388]	@ (8003718 <UART_SetConfig+0x2d4>)
 8003592:	fba3 2302 	umull	r2, r3, r3, r2
 8003596:	095b      	lsrs	r3, r3, #5
 8003598:	011c      	lsls	r4, r3, #4
 800359a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800359e:	2200      	movs	r2, #0
 80035a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80035a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80035ac:	4642      	mov	r2, r8
 80035ae:	464b      	mov	r3, r9
 80035b0:	1891      	adds	r1, r2, r2
 80035b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80035b4:	415b      	adcs	r3, r3
 80035b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80035bc:	4641      	mov	r1, r8
 80035be:	eb12 0a01 	adds.w	sl, r2, r1
 80035c2:	4649      	mov	r1, r9
 80035c4:	eb43 0b01 	adc.w	fp, r3, r1
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035dc:	4692      	mov	sl, r2
 80035de:	469b      	mov	fp, r3
 80035e0:	4643      	mov	r3, r8
 80035e2:	eb1a 0303 	adds.w	r3, sl, r3
 80035e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035ea:	464b      	mov	r3, r9
 80035ec:	eb4b 0303 	adc.w	r3, fp, r3
 80035f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003600:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003604:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003608:	460b      	mov	r3, r1
 800360a:	18db      	adds	r3, r3, r3
 800360c:	643b      	str	r3, [r7, #64]	@ 0x40
 800360e:	4613      	mov	r3, r2
 8003610:	eb42 0303 	adc.w	r3, r2, r3
 8003614:	647b      	str	r3, [r7, #68]	@ 0x44
 8003616:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800361a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800361e:	f7fc fe47 	bl	80002b0 <__aeabi_uldivmod>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4611      	mov	r1, r2
 8003628:	4b3b      	ldr	r3, [pc, #236]	@ (8003718 <UART_SetConfig+0x2d4>)
 800362a:	fba3 2301 	umull	r2, r3, r3, r1
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	2264      	movs	r2, #100	@ 0x64
 8003632:	fb02 f303 	mul.w	r3, r2, r3
 8003636:	1acb      	subs	r3, r1, r3
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800363e:	4b36      	ldr	r3, [pc, #216]	@ (8003718 <UART_SetConfig+0x2d4>)
 8003640:	fba3 2302 	umull	r2, r3, r3, r2
 8003644:	095b      	lsrs	r3, r3, #5
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800364c:	441c      	add	r4, r3
 800364e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003652:	2200      	movs	r2, #0
 8003654:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003658:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800365c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003660:	4642      	mov	r2, r8
 8003662:	464b      	mov	r3, r9
 8003664:	1891      	adds	r1, r2, r2
 8003666:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003668:	415b      	adcs	r3, r3
 800366a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800366c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003670:	4641      	mov	r1, r8
 8003672:	1851      	adds	r1, r2, r1
 8003674:	6339      	str	r1, [r7, #48]	@ 0x30
 8003676:	4649      	mov	r1, r9
 8003678:	414b      	adcs	r3, r1
 800367a:	637b      	str	r3, [r7, #52]	@ 0x34
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003688:	4659      	mov	r1, fp
 800368a:	00cb      	lsls	r3, r1, #3
 800368c:	4651      	mov	r1, sl
 800368e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003692:	4651      	mov	r1, sl
 8003694:	00ca      	lsls	r2, r1, #3
 8003696:	4610      	mov	r0, r2
 8003698:	4619      	mov	r1, r3
 800369a:	4603      	mov	r3, r0
 800369c:	4642      	mov	r2, r8
 800369e:	189b      	adds	r3, r3, r2
 80036a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036a4:	464b      	mov	r3, r9
 80036a6:	460a      	mov	r2, r1
 80036a8:	eb42 0303 	adc.w	r3, r2, r3
 80036ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80036bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80036c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80036c4:	460b      	mov	r3, r1
 80036c6:	18db      	adds	r3, r3, r3
 80036c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036ca:	4613      	mov	r3, r2
 80036cc:	eb42 0303 	adc.w	r3, r2, r3
 80036d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80036da:	f7fc fde9 	bl	80002b0 <__aeabi_uldivmod>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003718 <UART_SetConfig+0x2d4>)
 80036e4:	fba3 1302 	umull	r1, r3, r3, r2
 80036e8:	095b      	lsrs	r3, r3, #5
 80036ea:	2164      	movs	r1, #100	@ 0x64
 80036ec:	fb01 f303 	mul.w	r3, r1, r3
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	3332      	adds	r3, #50	@ 0x32
 80036f6:	4a08      	ldr	r2, [pc, #32]	@ (8003718 <UART_SetConfig+0x2d4>)
 80036f8:	fba2 2303 	umull	r2, r3, r2, r3
 80036fc:	095b      	lsrs	r3, r3, #5
 80036fe:	f003 0207 	and.w	r2, r3, #7
 8003702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4422      	add	r2, r4
 800370a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800370c:	e106      	b.n	800391c <UART_SetConfig+0x4d8>
 800370e:	bf00      	nop
 8003710:	40011000 	.word	0x40011000
 8003714:	40011400 	.word	0x40011400
 8003718:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800371c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003720:	2200      	movs	r2, #0
 8003722:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003726:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800372a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800372e:	4642      	mov	r2, r8
 8003730:	464b      	mov	r3, r9
 8003732:	1891      	adds	r1, r2, r2
 8003734:	6239      	str	r1, [r7, #32]
 8003736:	415b      	adcs	r3, r3
 8003738:	627b      	str	r3, [r7, #36]	@ 0x24
 800373a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800373e:	4641      	mov	r1, r8
 8003740:	1854      	adds	r4, r2, r1
 8003742:	4649      	mov	r1, r9
 8003744:	eb43 0501 	adc.w	r5, r3, r1
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	00eb      	lsls	r3, r5, #3
 8003752:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003756:	00e2      	lsls	r2, r4, #3
 8003758:	4614      	mov	r4, r2
 800375a:	461d      	mov	r5, r3
 800375c:	4643      	mov	r3, r8
 800375e:	18e3      	adds	r3, r4, r3
 8003760:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003764:	464b      	mov	r3, r9
 8003766:	eb45 0303 	adc.w	r3, r5, r3
 800376a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800376e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800377a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800378a:	4629      	mov	r1, r5
 800378c:	008b      	lsls	r3, r1, #2
 800378e:	4621      	mov	r1, r4
 8003790:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003794:	4621      	mov	r1, r4
 8003796:	008a      	lsls	r2, r1, #2
 8003798:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800379c:	f7fc fd88 	bl	80002b0 <__aeabi_uldivmod>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4b60      	ldr	r3, [pc, #384]	@ (8003928 <UART_SetConfig+0x4e4>)
 80037a6:	fba3 2302 	umull	r2, r3, r3, r2
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	011c      	lsls	r4, r3, #4
 80037ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037b2:	2200      	movs	r2, #0
 80037b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80037bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80037c0:	4642      	mov	r2, r8
 80037c2:	464b      	mov	r3, r9
 80037c4:	1891      	adds	r1, r2, r2
 80037c6:	61b9      	str	r1, [r7, #24]
 80037c8:	415b      	adcs	r3, r3
 80037ca:	61fb      	str	r3, [r7, #28]
 80037cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037d0:	4641      	mov	r1, r8
 80037d2:	1851      	adds	r1, r2, r1
 80037d4:	6139      	str	r1, [r7, #16]
 80037d6:	4649      	mov	r1, r9
 80037d8:	414b      	adcs	r3, r1
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037e8:	4659      	mov	r1, fp
 80037ea:	00cb      	lsls	r3, r1, #3
 80037ec:	4651      	mov	r1, sl
 80037ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037f2:	4651      	mov	r1, sl
 80037f4:	00ca      	lsls	r2, r1, #3
 80037f6:	4610      	mov	r0, r2
 80037f8:	4619      	mov	r1, r3
 80037fa:	4603      	mov	r3, r0
 80037fc:	4642      	mov	r2, r8
 80037fe:	189b      	adds	r3, r3, r2
 8003800:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003804:	464b      	mov	r3, r9
 8003806:	460a      	mov	r2, r1
 8003808:	eb42 0303 	adc.w	r3, r2, r3
 800380c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	67bb      	str	r3, [r7, #120]	@ 0x78
 800381a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003828:	4649      	mov	r1, r9
 800382a:	008b      	lsls	r3, r1, #2
 800382c:	4641      	mov	r1, r8
 800382e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003832:	4641      	mov	r1, r8
 8003834:	008a      	lsls	r2, r1, #2
 8003836:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800383a:	f7fc fd39 	bl	80002b0 <__aeabi_uldivmod>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4611      	mov	r1, r2
 8003844:	4b38      	ldr	r3, [pc, #224]	@ (8003928 <UART_SetConfig+0x4e4>)
 8003846:	fba3 2301 	umull	r2, r3, r3, r1
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	2264      	movs	r2, #100	@ 0x64
 800384e:	fb02 f303 	mul.w	r3, r2, r3
 8003852:	1acb      	subs	r3, r1, r3
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	3332      	adds	r3, #50	@ 0x32
 8003858:	4a33      	ldr	r2, [pc, #204]	@ (8003928 <UART_SetConfig+0x4e4>)
 800385a:	fba2 2303 	umull	r2, r3, r2, r3
 800385e:	095b      	lsrs	r3, r3, #5
 8003860:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003864:	441c      	add	r4, r3
 8003866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800386a:	2200      	movs	r2, #0
 800386c:	673b      	str	r3, [r7, #112]	@ 0x70
 800386e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003870:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003874:	4642      	mov	r2, r8
 8003876:	464b      	mov	r3, r9
 8003878:	1891      	adds	r1, r2, r2
 800387a:	60b9      	str	r1, [r7, #8]
 800387c:	415b      	adcs	r3, r3
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003884:	4641      	mov	r1, r8
 8003886:	1851      	adds	r1, r2, r1
 8003888:	6039      	str	r1, [r7, #0]
 800388a:	4649      	mov	r1, r9
 800388c:	414b      	adcs	r3, r1
 800388e:	607b      	str	r3, [r7, #4]
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800389c:	4659      	mov	r1, fp
 800389e:	00cb      	lsls	r3, r1, #3
 80038a0:	4651      	mov	r1, sl
 80038a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038a6:	4651      	mov	r1, sl
 80038a8:	00ca      	lsls	r2, r1, #3
 80038aa:	4610      	mov	r0, r2
 80038ac:	4619      	mov	r1, r3
 80038ae:	4603      	mov	r3, r0
 80038b0:	4642      	mov	r2, r8
 80038b2:	189b      	adds	r3, r3, r2
 80038b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038b6:	464b      	mov	r3, r9
 80038b8:	460a      	mov	r2, r1
 80038ba:	eb42 0303 	adc.w	r3, r2, r3
 80038be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80038ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80038d8:	4649      	mov	r1, r9
 80038da:	008b      	lsls	r3, r1, #2
 80038dc:	4641      	mov	r1, r8
 80038de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038e2:	4641      	mov	r1, r8
 80038e4:	008a      	lsls	r2, r1, #2
 80038e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80038ea:	f7fc fce1 	bl	80002b0 <__aeabi_uldivmod>
 80038ee:	4602      	mov	r2, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003928 <UART_SetConfig+0x4e4>)
 80038f4:	fba3 1302 	umull	r1, r3, r3, r2
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	2164      	movs	r1, #100	@ 0x64
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	3332      	adds	r3, #50	@ 0x32
 8003906:	4a08      	ldr	r2, [pc, #32]	@ (8003928 <UART_SetConfig+0x4e4>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	f003 020f 	and.w	r2, r3, #15
 8003912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4422      	add	r2, r4
 800391a:	609a      	str	r2, [r3, #8]
}
 800391c:	bf00      	nop
 800391e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003922:	46bd      	mov	sp, r7
 8003924:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003928:	51eb851f 	.word	0x51eb851f

0800392c <std>:
 800392c:	2300      	movs	r3, #0
 800392e:	b510      	push	{r4, lr}
 8003930:	4604      	mov	r4, r0
 8003932:	e9c0 3300 	strd	r3, r3, [r0]
 8003936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800393a:	6083      	str	r3, [r0, #8]
 800393c:	8181      	strh	r1, [r0, #12]
 800393e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003940:	81c2      	strh	r2, [r0, #14]
 8003942:	6183      	str	r3, [r0, #24]
 8003944:	4619      	mov	r1, r3
 8003946:	2208      	movs	r2, #8
 8003948:	305c      	adds	r0, #92	@ 0x5c
 800394a:	f000 f9f9 	bl	8003d40 <memset>
 800394e:	4b0d      	ldr	r3, [pc, #52]	@ (8003984 <std+0x58>)
 8003950:	6263      	str	r3, [r4, #36]	@ 0x24
 8003952:	4b0d      	ldr	r3, [pc, #52]	@ (8003988 <std+0x5c>)
 8003954:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003956:	4b0d      	ldr	r3, [pc, #52]	@ (800398c <std+0x60>)
 8003958:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800395a:	4b0d      	ldr	r3, [pc, #52]	@ (8003990 <std+0x64>)
 800395c:	6323      	str	r3, [r4, #48]	@ 0x30
 800395e:	4b0d      	ldr	r3, [pc, #52]	@ (8003994 <std+0x68>)
 8003960:	6224      	str	r4, [r4, #32]
 8003962:	429c      	cmp	r4, r3
 8003964:	d006      	beq.n	8003974 <std+0x48>
 8003966:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800396a:	4294      	cmp	r4, r2
 800396c:	d002      	beq.n	8003974 <std+0x48>
 800396e:	33d0      	adds	r3, #208	@ 0xd0
 8003970:	429c      	cmp	r4, r3
 8003972:	d105      	bne.n	8003980 <std+0x54>
 8003974:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800397c:	f000 ba58 	b.w	8003e30 <__retarget_lock_init_recursive>
 8003980:	bd10      	pop	{r4, pc}
 8003982:	bf00      	nop
 8003984:	08003b91 	.word	0x08003b91
 8003988:	08003bb3 	.word	0x08003bb3
 800398c:	08003beb 	.word	0x08003beb
 8003990:	08003c0f 	.word	0x08003c0f
 8003994:	20000258 	.word	0x20000258

08003998 <stdio_exit_handler>:
 8003998:	4a02      	ldr	r2, [pc, #8]	@ (80039a4 <stdio_exit_handler+0xc>)
 800399a:	4903      	ldr	r1, [pc, #12]	@ (80039a8 <stdio_exit_handler+0x10>)
 800399c:	4803      	ldr	r0, [pc, #12]	@ (80039ac <stdio_exit_handler+0x14>)
 800399e:	f000 b869 	b.w	8003a74 <_fwalk_sglue>
 80039a2:	bf00      	nop
 80039a4:	2000000c 	.word	0x2000000c
 80039a8:	080046cd 	.word	0x080046cd
 80039ac:	2000001c 	.word	0x2000001c

080039b0 <cleanup_stdio>:
 80039b0:	6841      	ldr	r1, [r0, #4]
 80039b2:	4b0c      	ldr	r3, [pc, #48]	@ (80039e4 <cleanup_stdio+0x34>)
 80039b4:	4299      	cmp	r1, r3
 80039b6:	b510      	push	{r4, lr}
 80039b8:	4604      	mov	r4, r0
 80039ba:	d001      	beq.n	80039c0 <cleanup_stdio+0x10>
 80039bc:	f000 fe86 	bl	80046cc <_fflush_r>
 80039c0:	68a1      	ldr	r1, [r4, #8]
 80039c2:	4b09      	ldr	r3, [pc, #36]	@ (80039e8 <cleanup_stdio+0x38>)
 80039c4:	4299      	cmp	r1, r3
 80039c6:	d002      	beq.n	80039ce <cleanup_stdio+0x1e>
 80039c8:	4620      	mov	r0, r4
 80039ca:	f000 fe7f 	bl	80046cc <_fflush_r>
 80039ce:	68e1      	ldr	r1, [r4, #12]
 80039d0:	4b06      	ldr	r3, [pc, #24]	@ (80039ec <cleanup_stdio+0x3c>)
 80039d2:	4299      	cmp	r1, r3
 80039d4:	d004      	beq.n	80039e0 <cleanup_stdio+0x30>
 80039d6:	4620      	mov	r0, r4
 80039d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039dc:	f000 be76 	b.w	80046cc <_fflush_r>
 80039e0:	bd10      	pop	{r4, pc}
 80039e2:	bf00      	nop
 80039e4:	20000258 	.word	0x20000258
 80039e8:	200002c0 	.word	0x200002c0
 80039ec:	20000328 	.word	0x20000328

080039f0 <global_stdio_init.part.0>:
 80039f0:	b510      	push	{r4, lr}
 80039f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003a20 <global_stdio_init.part.0+0x30>)
 80039f4:	4c0b      	ldr	r4, [pc, #44]	@ (8003a24 <global_stdio_init.part.0+0x34>)
 80039f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003a28 <global_stdio_init.part.0+0x38>)
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	4620      	mov	r0, r4
 80039fc:	2200      	movs	r2, #0
 80039fe:	2104      	movs	r1, #4
 8003a00:	f7ff ff94 	bl	800392c <std>
 8003a04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003a08:	2201      	movs	r2, #1
 8003a0a:	2109      	movs	r1, #9
 8003a0c:	f7ff ff8e 	bl	800392c <std>
 8003a10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003a14:	2202      	movs	r2, #2
 8003a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a1a:	2112      	movs	r1, #18
 8003a1c:	f7ff bf86 	b.w	800392c <std>
 8003a20:	20000390 	.word	0x20000390
 8003a24:	20000258 	.word	0x20000258
 8003a28:	08003999 	.word	0x08003999

08003a2c <__sfp_lock_acquire>:
 8003a2c:	4801      	ldr	r0, [pc, #4]	@ (8003a34 <__sfp_lock_acquire+0x8>)
 8003a2e:	f000 ba00 	b.w	8003e32 <__retarget_lock_acquire_recursive>
 8003a32:	bf00      	nop
 8003a34:	20000399 	.word	0x20000399

08003a38 <__sfp_lock_release>:
 8003a38:	4801      	ldr	r0, [pc, #4]	@ (8003a40 <__sfp_lock_release+0x8>)
 8003a3a:	f000 b9fb 	b.w	8003e34 <__retarget_lock_release_recursive>
 8003a3e:	bf00      	nop
 8003a40:	20000399 	.word	0x20000399

08003a44 <__sinit>:
 8003a44:	b510      	push	{r4, lr}
 8003a46:	4604      	mov	r4, r0
 8003a48:	f7ff fff0 	bl	8003a2c <__sfp_lock_acquire>
 8003a4c:	6a23      	ldr	r3, [r4, #32]
 8003a4e:	b11b      	cbz	r3, 8003a58 <__sinit+0x14>
 8003a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a54:	f7ff bff0 	b.w	8003a38 <__sfp_lock_release>
 8003a58:	4b04      	ldr	r3, [pc, #16]	@ (8003a6c <__sinit+0x28>)
 8003a5a:	6223      	str	r3, [r4, #32]
 8003a5c:	4b04      	ldr	r3, [pc, #16]	@ (8003a70 <__sinit+0x2c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1f5      	bne.n	8003a50 <__sinit+0xc>
 8003a64:	f7ff ffc4 	bl	80039f0 <global_stdio_init.part.0>
 8003a68:	e7f2      	b.n	8003a50 <__sinit+0xc>
 8003a6a:	bf00      	nop
 8003a6c:	080039b1 	.word	0x080039b1
 8003a70:	20000390 	.word	0x20000390

08003a74 <_fwalk_sglue>:
 8003a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a78:	4607      	mov	r7, r0
 8003a7a:	4688      	mov	r8, r1
 8003a7c:	4614      	mov	r4, r2
 8003a7e:	2600      	movs	r6, #0
 8003a80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a84:	f1b9 0901 	subs.w	r9, r9, #1
 8003a88:	d505      	bpl.n	8003a96 <_fwalk_sglue+0x22>
 8003a8a:	6824      	ldr	r4, [r4, #0]
 8003a8c:	2c00      	cmp	r4, #0
 8003a8e:	d1f7      	bne.n	8003a80 <_fwalk_sglue+0xc>
 8003a90:	4630      	mov	r0, r6
 8003a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a96:	89ab      	ldrh	r3, [r5, #12]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d907      	bls.n	8003aac <_fwalk_sglue+0x38>
 8003a9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	d003      	beq.n	8003aac <_fwalk_sglue+0x38>
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	4638      	mov	r0, r7
 8003aa8:	47c0      	blx	r8
 8003aaa:	4306      	orrs	r6, r0
 8003aac:	3568      	adds	r5, #104	@ 0x68
 8003aae:	e7e9      	b.n	8003a84 <_fwalk_sglue+0x10>

08003ab0 <iprintf>:
 8003ab0:	b40f      	push	{r0, r1, r2, r3}
 8003ab2:	b507      	push	{r0, r1, r2, lr}
 8003ab4:	4906      	ldr	r1, [pc, #24]	@ (8003ad0 <iprintf+0x20>)
 8003ab6:	ab04      	add	r3, sp, #16
 8003ab8:	6808      	ldr	r0, [r1, #0]
 8003aba:	f853 2b04 	ldr.w	r2, [r3], #4
 8003abe:	6881      	ldr	r1, [r0, #8]
 8003ac0:	9301      	str	r3, [sp, #4]
 8003ac2:	f000 fadb 	bl	800407c <_vfiprintf_r>
 8003ac6:	b003      	add	sp, #12
 8003ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003acc:	b004      	add	sp, #16
 8003ace:	4770      	bx	lr
 8003ad0:	20000018 	.word	0x20000018

08003ad4 <_puts_r>:
 8003ad4:	6a03      	ldr	r3, [r0, #32]
 8003ad6:	b570      	push	{r4, r5, r6, lr}
 8003ad8:	6884      	ldr	r4, [r0, #8]
 8003ada:	4605      	mov	r5, r0
 8003adc:	460e      	mov	r6, r1
 8003ade:	b90b      	cbnz	r3, 8003ae4 <_puts_r+0x10>
 8003ae0:	f7ff ffb0 	bl	8003a44 <__sinit>
 8003ae4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ae6:	07db      	lsls	r3, r3, #31
 8003ae8:	d405      	bmi.n	8003af6 <_puts_r+0x22>
 8003aea:	89a3      	ldrh	r3, [r4, #12]
 8003aec:	0598      	lsls	r0, r3, #22
 8003aee:	d402      	bmi.n	8003af6 <_puts_r+0x22>
 8003af0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003af2:	f000 f99e 	bl	8003e32 <__retarget_lock_acquire_recursive>
 8003af6:	89a3      	ldrh	r3, [r4, #12]
 8003af8:	0719      	lsls	r1, r3, #28
 8003afa:	d502      	bpl.n	8003b02 <_puts_r+0x2e>
 8003afc:	6923      	ldr	r3, [r4, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d135      	bne.n	8003b6e <_puts_r+0x9a>
 8003b02:	4621      	mov	r1, r4
 8003b04:	4628      	mov	r0, r5
 8003b06:	f000 f8c5 	bl	8003c94 <__swsetup_r>
 8003b0a:	b380      	cbz	r0, 8003b6e <_puts_r+0x9a>
 8003b0c:	f04f 35ff 	mov.w	r5, #4294967295
 8003b10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b12:	07da      	lsls	r2, r3, #31
 8003b14:	d405      	bmi.n	8003b22 <_puts_r+0x4e>
 8003b16:	89a3      	ldrh	r3, [r4, #12]
 8003b18:	059b      	lsls	r3, r3, #22
 8003b1a:	d402      	bmi.n	8003b22 <_puts_r+0x4e>
 8003b1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b1e:	f000 f989 	bl	8003e34 <__retarget_lock_release_recursive>
 8003b22:	4628      	mov	r0, r5
 8003b24:	bd70      	pop	{r4, r5, r6, pc}
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	da04      	bge.n	8003b34 <_puts_r+0x60>
 8003b2a:	69a2      	ldr	r2, [r4, #24]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	dc17      	bgt.n	8003b60 <_puts_r+0x8c>
 8003b30:	290a      	cmp	r1, #10
 8003b32:	d015      	beq.n	8003b60 <_puts_r+0x8c>
 8003b34:	6823      	ldr	r3, [r4, #0]
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	6022      	str	r2, [r4, #0]
 8003b3a:	7019      	strb	r1, [r3, #0]
 8003b3c:	68a3      	ldr	r3, [r4, #8]
 8003b3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b42:	3b01      	subs	r3, #1
 8003b44:	60a3      	str	r3, [r4, #8]
 8003b46:	2900      	cmp	r1, #0
 8003b48:	d1ed      	bne.n	8003b26 <_puts_r+0x52>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	da11      	bge.n	8003b72 <_puts_r+0x9e>
 8003b4e:	4622      	mov	r2, r4
 8003b50:	210a      	movs	r1, #10
 8003b52:	4628      	mov	r0, r5
 8003b54:	f000 f85f 	bl	8003c16 <__swbuf_r>
 8003b58:	3001      	adds	r0, #1
 8003b5a:	d0d7      	beq.n	8003b0c <_puts_r+0x38>
 8003b5c:	250a      	movs	r5, #10
 8003b5e:	e7d7      	b.n	8003b10 <_puts_r+0x3c>
 8003b60:	4622      	mov	r2, r4
 8003b62:	4628      	mov	r0, r5
 8003b64:	f000 f857 	bl	8003c16 <__swbuf_r>
 8003b68:	3001      	adds	r0, #1
 8003b6a:	d1e7      	bne.n	8003b3c <_puts_r+0x68>
 8003b6c:	e7ce      	b.n	8003b0c <_puts_r+0x38>
 8003b6e:	3e01      	subs	r6, #1
 8003b70:	e7e4      	b.n	8003b3c <_puts_r+0x68>
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	6022      	str	r2, [r4, #0]
 8003b78:	220a      	movs	r2, #10
 8003b7a:	701a      	strb	r2, [r3, #0]
 8003b7c:	e7ee      	b.n	8003b5c <_puts_r+0x88>
	...

08003b80 <puts>:
 8003b80:	4b02      	ldr	r3, [pc, #8]	@ (8003b8c <puts+0xc>)
 8003b82:	4601      	mov	r1, r0
 8003b84:	6818      	ldr	r0, [r3, #0]
 8003b86:	f7ff bfa5 	b.w	8003ad4 <_puts_r>
 8003b8a:	bf00      	nop
 8003b8c:	20000018 	.word	0x20000018

08003b90 <__sread>:
 8003b90:	b510      	push	{r4, lr}
 8003b92:	460c      	mov	r4, r1
 8003b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b98:	f000 f8fc 	bl	8003d94 <_read_r>
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	bfab      	itete	ge
 8003ba0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003ba2:	89a3      	ldrhlt	r3, [r4, #12]
 8003ba4:	181b      	addge	r3, r3, r0
 8003ba6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003baa:	bfac      	ite	ge
 8003bac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003bae:	81a3      	strhlt	r3, [r4, #12]
 8003bb0:	bd10      	pop	{r4, pc}

08003bb2 <__swrite>:
 8003bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bb6:	461f      	mov	r7, r3
 8003bb8:	898b      	ldrh	r3, [r1, #12]
 8003bba:	05db      	lsls	r3, r3, #23
 8003bbc:	4605      	mov	r5, r0
 8003bbe:	460c      	mov	r4, r1
 8003bc0:	4616      	mov	r6, r2
 8003bc2:	d505      	bpl.n	8003bd0 <__swrite+0x1e>
 8003bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bc8:	2302      	movs	r3, #2
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f000 f8d0 	bl	8003d70 <_lseek_r>
 8003bd0:	89a3      	ldrh	r3, [r4, #12]
 8003bd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bda:	81a3      	strh	r3, [r4, #12]
 8003bdc:	4632      	mov	r2, r6
 8003bde:	463b      	mov	r3, r7
 8003be0:	4628      	mov	r0, r5
 8003be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003be6:	f000 b8e7 	b.w	8003db8 <_write_r>

08003bea <__sseek>:
 8003bea:	b510      	push	{r4, lr}
 8003bec:	460c      	mov	r4, r1
 8003bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bf2:	f000 f8bd 	bl	8003d70 <_lseek_r>
 8003bf6:	1c43      	adds	r3, r0, #1
 8003bf8:	89a3      	ldrh	r3, [r4, #12]
 8003bfa:	bf15      	itete	ne
 8003bfc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003bfe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003c02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003c06:	81a3      	strheq	r3, [r4, #12]
 8003c08:	bf18      	it	ne
 8003c0a:	81a3      	strhne	r3, [r4, #12]
 8003c0c:	bd10      	pop	{r4, pc}

08003c0e <__sclose>:
 8003c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c12:	f000 b89d 	b.w	8003d50 <_close_r>

08003c16 <__swbuf_r>:
 8003c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c18:	460e      	mov	r6, r1
 8003c1a:	4614      	mov	r4, r2
 8003c1c:	4605      	mov	r5, r0
 8003c1e:	b118      	cbz	r0, 8003c28 <__swbuf_r+0x12>
 8003c20:	6a03      	ldr	r3, [r0, #32]
 8003c22:	b90b      	cbnz	r3, 8003c28 <__swbuf_r+0x12>
 8003c24:	f7ff ff0e 	bl	8003a44 <__sinit>
 8003c28:	69a3      	ldr	r3, [r4, #24]
 8003c2a:	60a3      	str	r3, [r4, #8]
 8003c2c:	89a3      	ldrh	r3, [r4, #12]
 8003c2e:	071a      	lsls	r2, r3, #28
 8003c30:	d501      	bpl.n	8003c36 <__swbuf_r+0x20>
 8003c32:	6923      	ldr	r3, [r4, #16]
 8003c34:	b943      	cbnz	r3, 8003c48 <__swbuf_r+0x32>
 8003c36:	4621      	mov	r1, r4
 8003c38:	4628      	mov	r0, r5
 8003c3a:	f000 f82b 	bl	8003c94 <__swsetup_r>
 8003c3e:	b118      	cbz	r0, 8003c48 <__swbuf_r+0x32>
 8003c40:	f04f 37ff 	mov.w	r7, #4294967295
 8003c44:	4638      	mov	r0, r7
 8003c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c48:	6823      	ldr	r3, [r4, #0]
 8003c4a:	6922      	ldr	r2, [r4, #16]
 8003c4c:	1a98      	subs	r0, r3, r2
 8003c4e:	6963      	ldr	r3, [r4, #20]
 8003c50:	b2f6      	uxtb	r6, r6
 8003c52:	4283      	cmp	r3, r0
 8003c54:	4637      	mov	r7, r6
 8003c56:	dc05      	bgt.n	8003c64 <__swbuf_r+0x4e>
 8003c58:	4621      	mov	r1, r4
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	f000 fd36 	bl	80046cc <_fflush_r>
 8003c60:	2800      	cmp	r0, #0
 8003c62:	d1ed      	bne.n	8003c40 <__swbuf_r+0x2a>
 8003c64:	68a3      	ldr	r3, [r4, #8]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	60a3      	str	r3, [r4, #8]
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	6022      	str	r2, [r4, #0]
 8003c70:	701e      	strb	r6, [r3, #0]
 8003c72:	6962      	ldr	r2, [r4, #20]
 8003c74:	1c43      	adds	r3, r0, #1
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d004      	beq.n	8003c84 <__swbuf_r+0x6e>
 8003c7a:	89a3      	ldrh	r3, [r4, #12]
 8003c7c:	07db      	lsls	r3, r3, #31
 8003c7e:	d5e1      	bpl.n	8003c44 <__swbuf_r+0x2e>
 8003c80:	2e0a      	cmp	r6, #10
 8003c82:	d1df      	bne.n	8003c44 <__swbuf_r+0x2e>
 8003c84:	4621      	mov	r1, r4
 8003c86:	4628      	mov	r0, r5
 8003c88:	f000 fd20 	bl	80046cc <_fflush_r>
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	d0d9      	beq.n	8003c44 <__swbuf_r+0x2e>
 8003c90:	e7d6      	b.n	8003c40 <__swbuf_r+0x2a>
	...

08003c94 <__swsetup_r>:
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	4b29      	ldr	r3, [pc, #164]	@ (8003d3c <__swsetup_r+0xa8>)
 8003c98:	4605      	mov	r5, r0
 8003c9a:	6818      	ldr	r0, [r3, #0]
 8003c9c:	460c      	mov	r4, r1
 8003c9e:	b118      	cbz	r0, 8003ca8 <__swsetup_r+0x14>
 8003ca0:	6a03      	ldr	r3, [r0, #32]
 8003ca2:	b90b      	cbnz	r3, 8003ca8 <__swsetup_r+0x14>
 8003ca4:	f7ff fece 	bl	8003a44 <__sinit>
 8003ca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cac:	0719      	lsls	r1, r3, #28
 8003cae:	d422      	bmi.n	8003cf6 <__swsetup_r+0x62>
 8003cb0:	06da      	lsls	r2, r3, #27
 8003cb2:	d407      	bmi.n	8003cc4 <__swsetup_r+0x30>
 8003cb4:	2209      	movs	r2, #9
 8003cb6:	602a      	str	r2, [r5, #0]
 8003cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cbc:	81a3      	strh	r3, [r4, #12]
 8003cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc2:	e033      	b.n	8003d2c <__swsetup_r+0x98>
 8003cc4:	0758      	lsls	r0, r3, #29
 8003cc6:	d512      	bpl.n	8003cee <__swsetup_r+0x5a>
 8003cc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003cca:	b141      	cbz	r1, 8003cde <__swsetup_r+0x4a>
 8003ccc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003cd0:	4299      	cmp	r1, r3
 8003cd2:	d002      	beq.n	8003cda <__swsetup_r+0x46>
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	f000 f8af 	bl	8003e38 <_free_r>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	6363      	str	r3, [r4, #52]	@ 0x34
 8003cde:	89a3      	ldrh	r3, [r4, #12]
 8003ce0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003ce4:	81a3      	strh	r3, [r4, #12]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	6063      	str	r3, [r4, #4]
 8003cea:	6923      	ldr	r3, [r4, #16]
 8003cec:	6023      	str	r3, [r4, #0]
 8003cee:	89a3      	ldrh	r3, [r4, #12]
 8003cf0:	f043 0308 	orr.w	r3, r3, #8
 8003cf4:	81a3      	strh	r3, [r4, #12]
 8003cf6:	6923      	ldr	r3, [r4, #16]
 8003cf8:	b94b      	cbnz	r3, 8003d0e <__swsetup_r+0x7a>
 8003cfa:	89a3      	ldrh	r3, [r4, #12]
 8003cfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003d00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d04:	d003      	beq.n	8003d0e <__swsetup_r+0x7a>
 8003d06:	4621      	mov	r1, r4
 8003d08:	4628      	mov	r0, r5
 8003d0a:	f000 fd2d 	bl	8004768 <__smakebuf_r>
 8003d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d12:	f013 0201 	ands.w	r2, r3, #1
 8003d16:	d00a      	beq.n	8003d2e <__swsetup_r+0x9a>
 8003d18:	2200      	movs	r2, #0
 8003d1a:	60a2      	str	r2, [r4, #8]
 8003d1c:	6962      	ldr	r2, [r4, #20]
 8003d1e:	4252      	negs	r2, r2
 8003d20:	61a2      	str	r2, [r4, #24]
 8003d22:	6922      	ldr	r2, [r4, #16]
 8003d24:	b942      	cbnz	r2, 8003d38 <__swsetup_r+0xa4>
 8003d26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003d2a:	d1c5      	bne.n	8003cb8 <__swsetup_r+0x24>
 8003d2c:	bd38      	pop	{r3, r4, r5, pc}
 8003d2e:	0799      	lsls	r1, r3, #30
 8003d30:	bf58      	it	pl
 8003d32:	6962      	ldrpl	r2, [r4, #20]
 8003d34:	60a2      	str	r2, [r4, #8]
 8003d36:	e7f4      	b.n	8003d22 <__swsetup_r+0x8e>
 8003d38:	2000      	movs	r0, #0
 8003d3a:	e7f7      	b.n	8003d2c <__swsetup_r+0x98>
 8003d3c:	20000018 	.word	0x20000018

08003d40 <memset>:
 8003d40:	4402      	add	r2, r0
 8003d42:	4603      	mov	r3, r0
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d100      	bne.n	8003d4a <memset+0xa>
 8003d48:	4770      	bx	lr
 8003d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d4e:	e7f9      	b.n	8003d44 <memset+0x4>

08003d50 <_close_r>:
 8003d50:	b538      	push	{r3, r4, r5, lr}
 8003d52:	4d06      	ldr	r5, [pc, #24]	@ (8003d6c <_close_r+0x1c>)
 8003d54:	2300      	movs	r3, #0
 8003d56:	4604      	mov	r4, r0
 8003d58:	4608      	mov	r0, r1
 8003d5a:	602b      	str	r3, [r5, #0]
 8003d5c:	f7fd fb52 	bl	8001404 <_close>
 8003d60:	1c43      	adds	r3, r0, #1
 8003d62:	d102      	bne.n	8003d6a <_close_r+0x1a>
 8003d64:	682b      	ldr	r3, [r5, #0]
 8003d66:	b103      	cbz	r3, 8003d6a <_close_r+0x1a>
 8003d68:	6023      	str	r3, [r4, #0]
 8003d6a:	bd38      	pop	{r3, r4, r5, pc}
 8003d6c:	20000394 	.word	0x20000394

08003d70 <_lseek_r>:
 8003d70:	b538      	push	{r3, r4, r5, lr}
 8003d72:	4d07      	ldr	r5, [pc, #28]	@ (8003d90 <_lseek_r+0x20>)
 8003d74:	4604      	mov	r4, r0
 8003d76:	4608      	mov	r0, r1
 8003d78:	4611      	mov	r1, r2
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	602a      	str	r2, [r5, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f7fd fb67 	bl	8001452 <_lseek>
 8003d84:	1c43      	adds	r3, r0, #1
 8003d86:	d102      	bne.n	8003d8e <_lseek_r+0x1e>
 8003d88:	682b      	ldr	r3, [r5, #0]
 8003d8a:	b103      	cbz	r3, 8003d8e <_lseek_r+0x1e>
 8003d8c:	6023      	str	r3, [r4, #0]
 8003d8e:	bd38      	pop	{r3, r4, r5, pc}
 8003d90:	20000394 	.word	0x20000394

08003d94 <_read_r>:
 8003d94:	b538      	push	{r3, r4, r5, lr}
 8003d96:	4d07      	ldr	r5, [pc, #28]	@ (8003db4 <_read_r+0x20>)
 8003d98:	4604      	mov	r4, r0
 8003d9a:	4608      	mov	r0, r1
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	2200      	movs	r2, #0
 8003da0:	602a      	str	r2, [r5, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	f7fd faf5 	bl	8001392 <_read>
 8003da8:	1c43      	adds	r3, r0, #1
 8003daa:	d102      	bne.n	8003db2 <_read_r+0x1e>
 8003dac:	682b      	ldr	r3, [r5, #0]
 8003dae:	b103      	cbz	r3, 8003db2 <_read_r+0x1e>
 8003db0:	6023      	str	r3, [r4, #0]
 8003db2:	bd38      	pop	{r3, r4, r5, pc}
 8003db4:	20000394 	.word	0x20000394

08003db8 <_write_r>:
 8003db8:	b538      	push	{r3, r4, r5, lr}
 8003dba:	4d07      	ldr	r5, [pc, #28]	@ (8003dd8 <_write_r+0x20>)
 8003dbc:	4604      	mov	r4, r0
 8003dbe:	4608      	mov	r0, r1
 8003dc0:	4611      	mov	r1, r2
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	602a      	str	r2, [r5, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f7fd fb00 	bl	80013cc <_write>
 8003dcc:	1c43      	adds	r3, r0, #1
 8003dce:	d102      	bne.n	8003dd6 <_write_r+0x1e>
 8003dd0:	682b      	ldr	r3, [r5, #0]
 8003dd2:	b103      	cbz	r3, 8003dd6 <_write_r+0x1e>
 8003dd4:	6023      	str	r3, [r4, #0]
 8003dd6:	bd38      	pop	{r3, r4, r5, pc}
 8003dd8:	20000394 	.word	0x20000394

08003ddc <__errno>:
 8003ddc:	4b01      	ldr	r3, [pc, #4]	@ (8003de4 <__errno+0x8>)
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	20000018 	.word	0x20000018

08003de8 <__libc_init_array>:
 8003de8:	b570      	push	{r4, r5, r6, lr}
 8003dea:	4d0d      	ldr	r5, [pc, #52]	@ (8003e20 <__libc_init_array+0x38>)
 8003dec:	4c0d      	ldr	r4, [pc, #52]	@ (8003e24 <__libc_init_array+0x3c>)
 8003dee:	1b64      	subs	r4, r4, r5
 8003df0:	10a4      	asrs	r4, r4, #2
 8003df2:	2600      	movs	r6, #0
 8003df4:	42a6      	cmp	r6, r4
 8003df6:	d109      	bne.n	8003e0c <__libc_init_array+0x24>
 8003df8:	4d0b      	ldr	r5, [pc, #44]	@ (8003e28 <__libc_init_array+0x40>)
 8003dfa:	4c0c      	ldr	r4, [pc, #48]	@ (8003e2c <__libc_init_array+0x44>)
 8003dfc:	f000 fd22 	bl	8004844 <_init>
 8003e00:	1b64      	subs	r4, r4, r5
 8003e02:	10a4      	asrs	r4, r4, #2
 8003e04:	2600      	movs	r6, #0
 8003e06:	42a6      	cmp	r6, r4
 8003e08:	d105      	bne.n	8003e16 <__libc_init_array+0x2e>
 8003e0a:	bd70      	pop	{r4, r5, r6, pc}
 8003e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e10:	4798      	blx	r3
 8003e12:	3601      	adds	r6, #1
 8003e14:	e7ee      	b.n	8003df4 <__libc_init_array+0xc>
 8003e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e1a:	4798      	blx	r3
 8003e1c:	3601      	adds	r6, #1
 8003e1e:	e7f2      	b.n	8003e06 <__libc_init_array+0x1e>
 8003e20:	08004ba0 	.word	0x08004ba0
 8003e24:	08004ba0 	.word	0x08004ba0
 8003e28:	08004ba0 	.word	0x08004ba0
 8003e2c:	08004ba4 	.word	0x08004ba4

08003e30 <__retarget_lock_init_recursive>:
 8003e30:	4770      	bx	lr

08003e32 <__retarget_lock_acquire_recursive>:
 8003e32:	4770      	bx	lr

08003e34 <__retarget_lock_release_recursive>:
 8003e34:	4770      	bx	lr
	...

08003e38 <_free_r>:
 8003e38:	b538      	push	{r3, r4, r5, lr}
 8003e3a:	4605      	mov	r5, r0
 8003e3c:	2900      	cmp	r1, #0
 8003e3e:	d041      	beq.n	8003ec4 <_free_r+0x8c>
 8003e40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e44:	1f0c      	subs	r4, r1, #4
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	bfb8      	it	lt
 8003e4a:	18e4      	addlt	r4, r4, r3
 8003e4c:	f000 f8e0 	bl	8004010 <__malloc_lock>
 8003e50:	4a1d      	ldr	r2, [pc, #116]	@ (8003ec8 <_free_r+0x90>)
 8003e52:	6813      	ldr	r3, [r2, #0]
 8003e54:	b933      	cbnz	r3, 8003e64 <_free_r+0x2c>
 8003e56:	6063      	str	r3, [r4, #4]
 8003e58:	6014      	str	r4, [r2, #0]
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e60:	f000 b8dc 	b.w	800401c <__malloc_unlock>
 8003e64:	42a3      	cmp	r3, r4
 8003e66:	d908      	bls.n	8003e7a <_free_r+0x42>
 8003e68:	6820      	ldr	r0, [r4, #0]
 8003e6a:	1821      	adds	r1, r4, r0
 8003e6c:	428b      	cmp	r3, r1
 8003e6e:	bf01      	itttt	eq
 8003e70:	6819      	ldreq	r1, [r3, #0]
 8003e72:	685b      	ldreq	r3, [r3, #4]
 8003e74:	1809      	addeq	r1, r1, r0
 8003e76:	6021      	streq	r1, [r4, #0]
 8003e78:	e7ed      	b.n	8003e56 <_free_r+0x1e>
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	b10b      	cbz	r3, 8003e84 <_free_r+0x4c>
 8003e80:	42a3      	cmp	r3, r4
 8003e82:	d9fa      	bls.n	8003e7a <_free_r+0x42>
 8003e84:	6811      	ldr	r1, [r2, #0]
 8003e86:	1850      	adds	r0, r2, r1
 8003e88:	42a0      	cmp	r0, r4
 8003e8a:	d10b      	bne.n	8003ea4 <_free_r+0x6c>
 8003e8c:	6820      	ldr	r0, [r4, #0]
 8003e8e:	4401      	add	r1, r0
 8003e90:	1850      	adds	r0, r2, r1
 8003e92:	4283      	cmp	r3, r0
 8003e94:	6011      	str	r1, [r2, #0]
 8003e96:	d1e0      	bne.n	8003e5a <_free_r+0x22>
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	6053      	str	r3, [r2, #4]
 8003e9e:	4408      	add	r0, r1
 8003ea0:	6010      	str	r0, [r2, #0]
 8003ea2:	e7da      	b.n	8003e5a <_free_r+0x22>
 8003ea4:	d902      	bls.n	8003eac <_free_r+0x74>
 8003ea6:	230c      	movs	r3, #12
 8003ea8:	602b      	str	r3, [r5, #0]
 8003eaa:	e7d6      	b.n	8003e5a <_free_r+0x22>
 8003eac:	6820      	ldr	r0, [r4, #0]
 8003eae:	1821      	adds	r1, r4, r0
 8003eb0:	428b      	cmp	r3, r1
 8003eb2:	bf04      	itt	eq
 8003eb4:	6819      	ldreq	r1, [r3, #0]
 8003eb6:	685b      	ldreq	r3, [r3, #4]
 8003eb8:	6063      	str	r3, [r4, #4]
 8003eba:	bf04      	itt	eq
 8003ebc:	1809      	addeq	r1, r1, r0
 8003ebe:	6021      	streq	r1, [r4, #0]
 8003ec0:	6054      	str	r4, [r2, #4]
 8003ec2:	e7ca      	b.n	8003e5a <_free_r+0x22>
 8003ec4:	bd38      	pop	{r3, r4, r5, pc}
 8003ec6:	bf00      	nop
 8003ec8:	200003a0 	.word	0x200003a0

08003ecc <sbrk_aligned>:
 8003ecc:	b570      	push	{r4, r5, r6, lr}
 8003ece:	4e0f      	ldr	r6, [pc, #60]	@ (8003f0c <sbrk_aligned+0x40>)
 8003ed0:	460c      	mov	r4, r1
 8003ed2:	6831      	ldr	r1, [r6, #0]
 8003ed4:	4605      	mov	r5, r0
 8003ed6:	b911      	cbnz	r1, 8003ede <sbrk_aligned+0x12>
 8003ed8:	f000 fca4 	bl	8004824 <_sbrk_r>
 8003edc:	6030      	str	r0, [r6, #0]
 8003ede:	4621      	mov	r1, r4
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	f000 fc9f 	bl	8004824 <_sbrk_r>
 8003ee6:	1c43      	adds	r3, r0, #1
 8003ee8:	d103      	bne.n	8003ef2 <sbrk_aligned+0x26>
 8003eea:	f04f 34ff 	mov.w	r4, #4294967295
 8003eee:	4620      	mov	r0, r4
 8003ef0:	bd70      	pop	{r4, r5, r6, pc}
 8003ef2:	1cc4      	adds	r4, r0, #3
 8003ef4:	f024 0403 	bic.w	r4, r4, #3
 8003ef8:	42a0      	cmp	r0, r4
 8003efa:	d0f8      	beq.n	8003eee <sbrk_aligned+0x22>
 8003efc:	1a21      	subs	r1, r4, r0
 8003efe:	4628      	mov	r0, r5
 8003f00:	f000 fc90 	bl	8004824 <_sbrk_r>
 8003f04:	3001      	adds	r0, #1
 8003f06:	d1f2      	bne.n	8003eee <sbrk_aligned+0x22>
 8003f08:	e7ef      	b.n	8003eea <sbrk_aligned+0x1e>
 8003f0a:	bf00      	nop
 8003f0c:	2000039c 	.word	0x2000039c

08003f10 <_malloc_r>:
 8003f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f14:	1ccd      	adds	r5, r1, #3
 8003f16:	f025 0503 	bic.w	r5, r5, #3
 8003f1a:	3508      	adds	r5, #8
 8003f1c:	2d0c      	cmp	r5, #12
 8003f1e:	bf38      	it	cc
 8003f20:	250c      	movcc	r5, #12
 8003f22:	2d00      	cmp	r5, #0
 8003f24:	4606      	mov	r6, r0
 8003f26:	db01      	blt.n	8003f2c <_malloc_r+0x1c>
 8003f28:	42a9      	cmp	r1, r5
 8003f2a:	d904      	bls.n	8003f36 <_malloc_r+0x26>
 8003f2c:	230c      	movs	r3, #12
 8003f2e:	6033      	str	r3, [r6, #0]
 8003f30:	2000      	movs	r0, #0
 8003f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800400c <_malloc_r+0xfc>
 8003f3a:	f000 f869 	bl	8004010 <__malloc_lock>
 8003f3e:	f8d8 3000 	ldr.w	r3, [r8]
 8003f42:	461c      	mov	r4, r3
 8003f44:	bb44      	cbnz	r4, 8003f98 <_malloc_r+0x88>
 8003f46:	4629      	mov	r1, r5
 8003f48:	4630      	mov	r0, r6
 8003f4a:	f7ff ffbf 	bl	8003ecc <sbrk_aligned>
 8003f4e:	1c43      	adds	r3, r0, #1
 8003f50:	4604      	mov	r4, r0
 8003f52:	d158      	bne.n	8004006 <_malloc_r+0xf6>
 8003f54:	f8d8 4000 	ldr.w	r4, [r8]
 8003f58:	4627      	mov	r7, r4
 8003f5a:	2f00      	cmp	r7, #0
 8003f5c:	d143      	bne.n	8003fe6 <_malloc_r+0xd6>
 8003f5e:	2c00      	cmp	r4, #0
 8003f60:	d04b      	beq.n	8003ffa <_malloc_r+0xea>
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	4639      	mov	r1, r7
 8003f66:	4630      	mov	r0, r6
 8003f68:	eb04 0903 	add.w	r9, r4, r3
 8003f6c:	f000 fc5a 	bl	8004824 <_sbrk_r>
 8003f70:	4581      	cmp	r9, r0
 8003f72:	d142      	bne.n	8003ffa <_malloc_r+0xea>
 8003f74:	6821      	ldr	r1, [r4, #0]
 8003f76:	1a6d      	subs	r5, r5, r1
 8003f78:	4629      	mov	r1, r5
 8003f7a:	4630      	mov	r0, r6
 8003f7c:	f7ff ffa6 	bl	8003ecc <sbrk_aligned>
 8003f80:	3001      	adds	r0, #1
 8003f82:	d03a      	beq.n	8003ffa <_malloc_r+0xea>
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	442b      	add	r3, r5
 8003f88:	6023      	str	r3, [r4, #0]
 8003f8a:	f8d8 3000 	ldr.w	r3, [r8]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	bb62      	cbnz	r2, 8003fec <_malloc_r+0xdc>
 8003f92:	f8c8 7000 	str.w	r7, [r8]
 8003f96:	e00f      	b.n	8003fb8 <_malloc_r+0xa8>
 8003f98:	6822      	ldr	r2, [r4, #0]
 8003f9a:	1b52      	subs	r2, r2, r5
 8003f9c:	d420      	bmi.n	8003fe0 <_malloc_r+0xd0>
 8003f9e:	2a0b      	cmp	r2, #11
 8003fa0:	d917      	bls.n	8003fd2 <_malloc_r+0xc2>
 8003fa2:	1961      	adds	r1, r4, r5
 8003fa4:	42a3      	cmp	r3, r4
 8003fa6:	6025      	str	r5, [r4, #0]
 8003fa8:	bf18      	it	ne
 8003faa:	6059      	strne	r1, [r3, #4]
 8003fac:	6863      	ldr	r3, [r4, #4]
 8003fae:	bf08      	it	eq
 8003fb0:	f8c8 1000 	streq.w	r1, [r8]
 8003fb4:	5162      	str	r2, [r4, r5]
 8003fb6:	604b      	str	r3, [r1, #4]
 8003fb8:	4630      	mov	r0, r6
 8003fba:	f000 f82f 	bl	800401c <__malloc_unlock>
 8003fbe:	f104 000b 	add.w	r0, r4, #11
 8003fc2:	1d23      	adds	r3, r4, #4
 8003fc4:	f020 0007 	bic.w	r0, r0, #7
 8003fc8:	1ac2      	subs	r2, r0, r3
 8003fca:	bf1c      	itt	ne
 8003fcc:	1a1b      	subne	r3, r3, r0
 8003fce:	50a3      	strne	r3, [r4, r2]
 8003fd0:	e7af      	b.n	8003f32 <_malloc_r+0x22>
 8003fd2:	6862      	ldr	r2, [r4, #4]
 8003fd4:	42a3      	cmp	r3, r4
 8003fd6:	bf0c      	ite	eq
 8003fd8:	f8c8 2000 	streq.w	r2, [r8]
 8003fdc:	605a      	strne	r2, [r3, #4]
 8003fde:	e7eb      	b.n	8003fb8 <_malloc_r+0xa8>
 8003fe0:	4623      	mov	r3, r4
 8003fe2:	6864      	ldr	r4, [r4, #4]
 8003fe4:	e7ae      	b.n	8003f44 <_malloc_r+0x34>
 8003fe6:	463c      	mov	r4, r7
 8003fe8:	687f      	ldr	r7, [r7, #4]
 8003fea:	e7b6      	b.n	8003f5a <_malloc_r+0x4a>
 8003fec:	461a      	mov	r2, r3
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	42a3      	cmp	r3, r4
 8003ff2:	d1fb      	bne.n	8003fec <_malloc_r+0xdc>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	6053      	str	r3, [r2, #4]
 8003ff8:	e7de      	b.n	8003fb8 <_malloc_r+0xa8>
 8003ffa:	230c      	movs	r3, #12
 8003ffc:	6033      	str	r3, [r6, #0]
 8003ffe:	4630      	mov	r0, r6
 8004000:	f000 f80c 	bl	800401c <__malloc_unlock>
 8004004:	e794      	b.n	8003f30 <_malloc_r+0x20>
 8004006:	6005      	str	r5, [r0, #0]
 8004008:	e7d6      	b.n	8003fb8 <_malloc_r+0xa8>
 800400a:	bf00      	nop
 800400c:	200003a0 	.word	0x200003a0

08004010 <__malloc_lock>:
 8004010:	4801      	ldr	r0, [pc, #4]	@ (8004018 <__malloc_lock+0x8>)
 8004012:	f7ff bf0e 	b.w	8003e32 <__retarget_lock_acquire_recursive>
 8004016:	bf00      	nop
 8004018:	20000398 	.word	0x20000398

0800401c <__malloc_unlock>:
 800401c:	4801      	ldr	r0, [pc, #4]	@ (8004024 <__malloc_unlock+0x8>)
 800401e:	f7ff bf09 	b.w	8003e34 <__retarget_lock_release_recursive>
 8004022:	bf00      	nop
 8004024:	20000398 	.word	0x20000398

08004028 <__sfputc_r>:
 8004028:	6893      	ldr	r3, [r2, #8]
 800402a:	3b01      	subs	r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	b410      	push	{r4}
 8004030:	6093      	str	r3, [r2, #8]
 8004032:	da08      	bge.n	8004046 <__sfputc_r+0x1e>
 8004034:	6994      	ldr	r4, [r2, #24]
 8004036:	42a3      	cmp	r3, r4
 8004038:	db01      	blt.n	800403e <__sfputc_r+0x16>
 800403a:	290a      	cmp	r1, #10
 800403c:	d103      	bne.n	8004046 <__sfputc_r+0x1e>
 800403e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004042:	f7ff bde8 	b.w	8003c16 <__swbuf_r>
 8004046:	6813      	ldr	r3, [r2, #0]
 8004048:	1c58      	adds	r0, r3, #1
 800404a:	6010      	str	r0, [r2, #0]
 800404c:	7019      	strb	r1, [r3, #0]
 800404e:	4608      	mov	r0, r1
 8004050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004054:	4770      	bx	lr

08004056 <__sfputs_r>:
 8004056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004058:	4606      	mov	r6, r0
 800405a:	460f      	mov	r7, r1
 800405c:	4614      	mov	r4, r2
 800405e:	18d5      	adds	r5, r2, r3
 8004060:	42ac      	cmp	r4, r5
 8004062:	d101      	bne.n	8004068 <__sfputs_r+0x12>
 8004064:	2000      	movs	r0, #0
 8004066:	e007      	b.n	8004078 <__sfputs_r+0x22>
 8004068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800406c:	463a      	mov	r2, r7
 800406e:	4630      	mov	r0, r6
 8004070:	f7ff ffda 	bl	8004028 <__sfputc_r>
 8004074:	1c43      	adds	r3, r0, #1
 8004076:	d1f3      	bne.n	8004060 <__sfputs_r+0xa>
 8004078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800407c <_vfiprintf_r>:
 800407c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004080:	460d      	mov	r5, r1
 8004082:	b09d      	sub	sp, #116	@ 0x74
 8004084:	4614      	mov	r4, r2
 8004086:	4698      	mov	r8, r3
 8004088:	4606      	mov	r6, r0
 800408a:	b118      	cbz	r0, 8004094 <_vfiprintf_r+0x18>
 800408c:	6a03      	ldr	r3, [r0, #32]
 800408e:	b90b      	cbnz	r3, 8004094 <_vfiprintf_r+0x18>
 8004090:	f7ff fcd8 	bl	8003a44 <__sinit>
 8004094:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004096:	07d9      	lsls	r1, r3, #31
 8004098:	d405      	bmi.n	80040a6 <_vfiprintf_r+0x2a>
 800409a:	89ab      	ldrh	r3, [r5, #12]
 800409c:	059a      	lsls	r2, r3, #22
 800409e:	d402      	bmi.n	80040a6 <_vfiprintf_r+0x2a>
 80040a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80040a2:	f7ff fec6 	bl	8003e32 <__retarget_lock_acquire_recursive>
 80040a6:	89ab      	ldrh	r3, [r5, #12]
 80040a8:	071b      	lsls	r3, r3, #28
 80040aa:	d501      	bpl.n	80040b0 <_vfiprintf_r+0x34>
 80040ac:	692b      	ldr	r3, [r5, #16]
 80040ae:	b99b      	cbnz	r3, 80040d8 <_vfiprintf_r+0x5c>
 80040b0:	4629      	mov	r1, r5
 80040b2:	4630      	mov	r0, r6
 80040b4:	f7ff fdee 	bl	8003c94 <__swsetup_r>
 80040b8:	b170      	cbz	r0, 80040d8 <_vfiprintf_r+0x5c>
 80040ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80040bc:	07dc      	lsls	r4, r3, #31
 80040be:	d504      	bpl.n	80040ca <_vfiprintf_r+0x4e>
 80040c0:	f04f 30ff 	mov.w	r0, #4294967295
 80040c4:	b01d      	add	sp, #116	@ 0x74
 80040c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ca:	89ab      	ldrh	r3, [r5, #12]
 80040cc:	0598      	lsls	r0, r3, #22
 80040ce:	d4f7      	bmi.n	80040c0 <_vfiprintf_r+0x44>
 80040d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80040d2:	f7ff feaf 	bl	8003e34 <__retarget_lock_release_recursive>
 80040d6:	e7f3      	b.n	80040c0 <_vfiprintf_r+0x44>
 80040d8:	2300      	movs	r3, #0
 80040da:	9309      	str	r3, [sp, #36]	@ 0x24
 80040dc:	2320      	movs	r3, #32
 80040de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80040e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80040e6:	2330      	movs	r3, #48	@ 0x30
 80040e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004298 <_vfiprintf_r+0x21c>
 80040ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80040f0:	f04f 0901 	mov.w	r9, #1
 80040f4:	4623      	mov	r3, r4
 80040f6:	469a      	mov	sl, r3
 80040f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040fc:	b10a      	cbz	r2, 8004102 <_vfiprintf_r+0x86>
 80040fe:	2a25      	cmp	r2, #37	@ 0x25
 8004100:	d1f9      	bne.n	80040f6 <_vfiprintf_r+0x7a>
 8004102:	ebba 0b04 	subs.w	fp, sl, r4
 8004106:	d00b      	beq.n	8004120 <_vfiprintf_r+0xa4>
 8004108:	465b      	mov	r3, fp
 800410a:	4622      	mov	r2, r4
 800410c:	4629      	mov	r1, r5
 800410e:	4630      	mov	r0, r6
 8004110:	f7ff ffa1 	bl	8004056 <__sfputs_r>
 8004114:	3001      	adds	r0, #1
 8004116:	f000 80a7 	beq.w	8004268 <_vfiprintf_r+0x1ec>
 800411a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800411c:	445a      	add	r2, fp
 800411e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004120:	f89a 3000 	ldrb.w	r3, [sl]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 809f 	beq.w	8004268 <_vfiprintf_r+0x1ec>
 800412a:	2300      	movs	r3, #0
 800412c:	f04f 32ff 	mov.w	r2, #4294967295
 8004130:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004134:	f10a 0a01 	add.w	sl, sl, #1
 8004138:	9304      	str	r3, [sp, #16]
 800413a:	9307      	str	r3, [sp, #28]
 800413c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004140:	931a      	str	r3, [sp, #104]	@ 0x68
 8004142:	4654      	mov	r4, sl
 8004144:	2205      	movs	r2, #5
 8004146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800414a:	4853      	ldr	r0, [pc, #332]	@ (8004298 <_vfiprintf_r+0x21c>)
 800414c:	f7fc f860 	bl	8000210 <memchr>
 8004150:	9a04      	ldr	r2, [sp, #16]
 8004152:	b9d8      	cbnz	r0, 800418c <_vfiprintf_r+0x110>
 8004154:	06d1      	lsls	r1, r2, #27
 8004156:	bf44      	itt	mi
 8004158:	2320      	movmi	r3, #32
 800415a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800415e:	0713      	lsls	r3, r2, #28
 8004160:	bf44      	itt	mi
 8004162:	232b      	movmi	r3, #43	@ 0x2b
 8004164:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004168:	f89a 3000 	ldrb.w	r3, [sl]
 800416c:	2b2a      	cmp	r3, #42	@ 0x2a
 800416e:	d015      	beq.n	800419c <_vfiprintf_r+0x120>
 8004170:	9a07      	ldr	r2, [sp, #28]
 8004172:	4654      	mov	r4, sl
 8004174:	2000      	movs	r0, #0
 8004176:	f04f 0c0a 	mov.w	ip, #10
 800417a:	4621      	mov	r1, r4
 800417c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004180:	3b30      	subs	r3, #48	@ 0x30
 8004182:	2b09      	cmp	r3, #9
 8004184:	d94b      	bls.n	800421e <_vfiprintf_r+0x1a2>
 8004186:	b1b0      	cbz	r0, 80041b6 <_vfiprintf_r+0x13a>
 8004188:	9207      	str	r2, [sp, #28]
 800418a:	e014      	b.n	80041b6 <_vfiprintf_r+0x13a>
 800418c:	eba0 0308 	sub.w	r3, r0, r8
 8004190:	fa09 f303 	lsl.w	r3, r9, r3
 8004194:	4313      	orrs	r3, r2
 8004196:	9304      	str	r3, [sp, #16]
 8004198:	46a2      	mov	sl, r4
 800419a:	e7d2      	b.n	8004142 <_vfiprintf_r+0xc6>
 800419c:	9b03      	ldr	r3, [sp, #12]
 800419e:	1d19      	adds	r1, r3, #4
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	9103      	str	r1, [sp, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bfbb      	ittet	lt
 80041a8:	425b      	neglt	r3, r3
 80041aa:	f042 0202 	orrlt.w	r2, r2, #2
 80041ae:	9307      	strge	r3, [sp, #28]
 80041b0:	9307      	strlt	r3, [sp, #28]
 80041b2:	bfb8      	it	lt
 80041b4:	9204      	strlt	r2, [sp, #16]
 80041b6:	7823      	ldrb	r3, [r4, #0]
 80041b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80041ba:	d10a      	bne.n	80041d2 <_vfiprintf_r+0x156>
 80041bc:	7863      	ldrb	r3, [r4, #1]
 80041be:	2b2a      	cmp	r3, #42	@ 0x2a
 80041c0:	d132      	bne.n	8004228 <_vfiprintf_r+0x1ac>
 80041c2:	9b03      	ldr	r3, [sp, #12]
 80041c4:	1d1a      	adds	r2, r3, #4
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	9203      	str	r2, [sp, #12]
 80041ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80041ce:	3402      	adds	r4, #2
 80041d0:	9305      	str	r3, [sp, #20]
 80041d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80042a8 <_vfiprintf_r+0x22c>
 80041d6:	7821      	ldrb	r1, [r4, #0]
 80041d8:	2203      	movs	r2, #3
 80041da:	4650      	mov	r0, sl
 80041dc:	f7fc f818 	bl	8000210 <memchr>
 80041e0:	b138      	cbz	r0, 80041f2 <_vfiprintf_r+0x176>
 80041e2:	9b04      	ldr	r3, [sp, #16]
 80041e4:	eba0 000a 	sub.w	r0, r0, sl
 80041e8:	2240      	movs	r2, #64	@ 0x40
 80041ea:	4082      	lsls	r2, r0
 80041ec:	4313      	orrs	r3, r2
 80041ee:	3401      	adds	r4, #1
 80041f0:	9304      	str	r3, [sp, #16]
 80041f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041f6:	4829      	ldr	r0, [pc, #164]	@ (800429c <_vfiprintf_r+0x220>)
 80041f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80041fc:	2206      	movs	r2, #6
 80041fe:	f7fc f807 	bl	8000210 <memchr>
 8004202:	2800      	cmp	r0, #0
 8004204:	d03f      	beq.n	8004286 <_vfiprintf_r+0x20a>
 8004206:	4b26      	ldr	r3, [pc, #152]	@ (80042a0 <_vfiprintf_r+0x224>)
 8004208:	bb1b      	cbnz	r3, 8004252 <_vfiprintf_r+0x1d6>
 800420a:	9b03      	ldr	r3, [sp, #12]
 800420c:	3307      	adds	r3, #7
 800420e:	f023 0307 	bic.w	r3, r3, #7
 8004212:	3308      	adds	r3, #8
 8004214:	9303      	str	r3, [sp, #12]
 8004216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004218:	443b      	add	r3, r7
 800421a:	9309      	str	r3, [sp, #36]	@ 0x24
 800421c:	e76a      	b.n	80040f4 <_vfiprintf_r+0x78>
 800421e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004222:	460c      	mov	r4, r1
 8004224:	2001      	movs	r0, #1
 8004226:	e7a8      	b.n	800417a <_vfiprintf_r+0xfe>
 8004228:	2300      	movs	r3, #0
 800422a:	3401      	adds	r4, #1
 800422c:	9305      	str	r3, [sp, #20]
 800422e:	4619      	mov	r1, r3
 8004230:	f04f 0c0a 	mov.w	ip, #10
 8004234:	4620      	mov	r0, r4
 8004236:	f810 2b01 	ldrb.w	r2, [r0], #1
 800423a:	3a30      	subs	r2, #48	@ 0x30
 800423c:	2a09      	cmp	r2, #9
 800423e:	d903      	bls.n	8004248 <_vfiprintf_r+0x1cc>
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0c6      	beq.n	80041d2 <_vfiprintf_r+0x156>
 8004244:	9105      	str	r1, [sp, #20]
 8004246:	e7c4      	b.n	80041d2 <_vfiprintf_r+0x156>
 8004248:	fb0c 2101 	mla	r1, ip, r1, r2
 800424c:	4604      	mov	r4, r0
 800424e:	2301      	movs	r3, #1
 8004250:	e7f0      	b.n	8004234 <_vfiprintf_r+0x1b8>
 8004252:	ab03      	add	r3, sp, #12
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	462a      	mov	r2, r5
 8004258:	4b12      	ldr	r3, [pc, #72]	@ (80042a4 <_vfiprintf_r+0x228>)
 800425a:	a904      	add	r1, sp, #16
 800425c:	4630      	mov	r0, r6
 800425e:	f3af 8000 	nop.w
 8004262:	4607      	mov	r7, r0
 8004264:	1c78      	adds	r0, r7, #1
 8004266:	d1d6      	bne.n	8004216 <_vfiprintf_r+0x19a>
 8004268:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800426a:	07d9      	lsls	r1, r3, #31
 800426c:	d405      	bmi.n	800427a <_vfiprintf_r+0x1fe>
 800426e:	89ab      	ldrh	r3, [r5, #12]
 8004270:	059a      	lsls	r2, r3, #22
 8004272:	d402      	bmi.n	800427a <_vfiprintf_r+0x1fe>
 8004274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004276:	f7ff fddd 	bl	8003e34 <__retarget_lock_release_recursive>
 800427a:	89ab      	ldrh	r3, [r5, #12]
 800427c:	065b      	lsls	r3, r3, #25
 800427e:	f53f af1f 	bmi.w	80040c0 <_vfiprintf_r+0x44>
 8004282:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004284:	e71e      	b.n	80040c4 <_vfiprintf_r+0x48>
 8004286:	ab03      	add	r3, sp, #12
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	462a      	mov	r2, r5
 800428c:	4b05      	ldr	r3, [pc, #20]	@ (80042a4 <_vfiprintf_r+0x228>)
 800428e:	a904      	add	r1, sp, #16
 8004290:	4630      	mov	r0, r6
 8004292:	f000 f879 	bl	8004388 <_printf_i>
 8004296:	e7e4      	b.n	8004262 <_vfiprintf_r+0x1e6>
 8004298:	08004b64 	.word	0x08004b64
 800429c:	08004b6e 	.word	0x08004b6e
 80042a0:	00000000 	.word	0x00000000
 80042a4:	08004057 	.word	0x08004057
 80042a8:	08004b6a 	.word	0x08004b6a

080042ac <_printf_common>:
 80042ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042b0:	4616      	mov	r6, r2
 80042b2:	4698      	mov	r8, r3
 80042b4:	688a      	ldr	r2, [r1, #8]
 80042b6:	690b      	ldr	r3, [r1, #16]
 80042b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80042bc:	4293      	cmp	r3, r2
 80042be:	bfb8      	it	lt
 80042c0:	4613      	movlt	r3, r2
 80042c2:	6033      	str	r3, [r6, #0]
 80042c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80042c8:	4607      	mov	r7, r0
 80042ca:	460c      	mov	r4, r1
 80042cc:	b10a      	cbz	r2, 80042d2 <_printf_common+0x26>
 80042ce:	3301      	adds	r3, #1
 80042d0:	6033      	str	r3, [r6, #0]
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	0699      	lsls	r1, r3, #26
 80042d6:	bf42      	ittt	mi
 80042d8:	6833      	ldrmi	r3, [r6, #0]
 80042da:	3302      	addmi	r3, #2
 80042dc:	6033      	strmi	r3, [r6, #0]
 80042de:	6825      	ldr	r5, [r4, #0]
 80042e0:	f015 0506 	ands.w	r5, r5, #6
 80042e4:	d106      	bne.n	80042f4 <_printf_common+0x48>
 80042e6:	f104 0a19 	add.w	sl, r4, #25
 80042ea:	68e3      	ldr	r3, [r4, #12]
 80042ec:	6832      	ldr	r2, [r6, #0]
 80042ee:	1a9b      	subs	r3, r3, r2
 80042f0:	42ab      	cmp	r3, r5
 80042f2:	dc26      	bgt.n	8004342 <_printf_common+0x96>
 80042f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80042f8:	6822      	ldr	r2, [r4, #0]
 80042fa:	3b00      	subs	r3, #0
 80042fc:	bf18      	it	ne
 80042fe:	2301      	movne	r3, #1
 8004300:	0692      	lsls	r2, r2, #26
 8004302:	d42b      	bmi.n	800435c <_printf_common+0xb0>
 8004304:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004308:	4641      	mov	r1, r8
 800430a:	4638      	mov	r0, r7
 800430c:	47c8      	blx	r9
 800430e:	3001      	adds	r0, #1
 8004310:	d01e      	beq.n	8004350 <_printf_common+0xa4>
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	6922      	ldr	r2, [r4, #16]
 8004316:	f003 0306 	and.w	r3, r3, #6
 800431a:	2b04      	cmp	r3, #4
 800431c:	bf02      	ittt	eq
 800431e:	68e5      	ldreq	r5, [r4, #12]
 8004320:	6833      	ldreq	r3, [r6, #0]
 8004322:	1aed      	subeq	r5, r5, r3
 8004324:	68a3      	ldr	r3, [r4, #8]
 8004326:	bf0c      	ite	eq
 8004328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800432c:	2500      	movne	r5, #0
 800432e:	4293      	cmp	r3, r2
 8004330:	bfc4      	itt	gt
 8004332:	1a9b      	subgt	r3, r3, r2
 8004334:	18ed      	addgt	r5, r5, r3
 8004336:	2600      	movs	r6, #0
 8004338:	341a      	adds	r4, #26
 800433a:	42b5      	cmp	r5, r6
 800433c:	d11a      	bne.n	8004374 <_printf_common+0xc8>
 800433e:	2000      	movs	r0, #0
 8004340:	e008      	b.n	8004354 <_printf_common+0xa8>
 8004342:	2301      	movs	r3, #1
 8004344:	4652      	mov	r2, sl
 8004346:	4641      	mov	r1, r8
 8004348:	4638      	mov	r0, r7
 800434a:	47c8      	blx	r9
 800434c:	3001      	adds	r0, #1
 800434e:	d103      	bne.n	8004358 <_printf_common+0xac>
 8004350:	f04f 30ff 	mov.w	r0, #4294967295
 8004354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004358:	3501      	adds	r5, #1
 800435a:	e7c6      	b.n	80042ea <_printf_common+0x3e>
 800435c:	18e1      	adds	r1, r4, r3
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	2030      	movs	r0, #48	@ 0x30
 8004362:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004366:	4422      	add	r2, r4
 8004368:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800436c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004370:	3302      	adds	r3, #2
 8004372:	e7c7      	b.n	8004304 <_printf_common+0x58>
 8004374:	2301      	movs	r3, #1
 8004376:	4622      	mov	r2, r4
 8004378:	4641      	mov	r1, r8
 800437a:	4638      	mov	r0, r7
 800437c:	47c8      	blx	r9
 800437e:	3001      	adds	r0, #1
 8004380:	d0e6      	beq.n	8004350 <_printf_common+0xa4>
 8004382:	3601      	adds	r6, #1
 8004384:	e7d9      	b.n	800433a <_printf_common+0x8e>
	...

08004388 <_printf_i>:
 8004388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800438c:	7e0f      	ldrb	r7, [r1, #24]
 800438e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004390:	2f78      	cmp	r7, #120	@ 0x78
 8004392:	4691      	mov	r9, r2
 8004394:	4680      	mov	r8, r0
 8004396:	460c      	mov	r4, r1
 8004398:	469a      	mov	sl, r3
 800439a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800439e:	d807      	bhi.n	80043b0 <_printf_i+0x28>
 80043a0:	2f62      	cmp	r7, #98	@ 0x62
 80043a2:	d80a      	bhi.n	80043ba <_printf_i+0x32>
 80043a4:	2f00      	cmp	r7, #0
 80043a6:	f000 80d1 	beq.w	800454c <_printf_i+0x1c4>
 80043aa:	2f58      	cmp	r7, #88	@ 0x58
 80043ac:	f000 80b8 	beq.w	8004520 <_printf_i+0x198>
 80043b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80043b8:	e03a      	b.n	8004430 <_printf_i+0xa8>
 80043ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80043be:	2b15      	cmp	r3, #21
 80043c0:	d8f6      	bhi.n	80043b0 <_printf_i+0x28>
 80043c2:	a101      	add	r1, pc, #4	@ (adr r1, 80043c8 <_printf_i+0x40>)
 80043c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043c8:	08004421 	.word	0x08004421
 80043cc:	08004435 	.word	0x08004435
 80043d0:	080043b1 	.word	0x080043b1
 80043d4:	080043b1 	.word	0x080043b1
 80043d8:	080043b1 	.word	0x080043b1
 80043dc:	080043b1 	.word	0x080043b1
 80043e0:	08004435 	.word	0x08004435
 80043e4:	080043b1 	.word	0x080043b1
 80043e8:	080043b1 	.word	0x080043b1
 80043ec:	080043b1 	.word	0x080043b1
 80043f0:	080043b1 	.word	0x080043b1
 80043f4:	08004533 	.word	0x08004533
 80043f8:	0800445f 	.word	0x0800445f
 80043fc:	080044ed 	.word	0x080044ed
 8004400:	080043b1 	.word	0x080043b1
 8004404:	080043b1 	.word	0x080043b1
 8004408:	08004555 	.word	0x08004555
 800440c:	080043b1 	.word	0x080043b1
 8004410:	0800445f 	.word	0x0800445f
 8004414:	080043b1 	.word	0x080043b1
 8004418:	080043b1 	.word	0x080043b1
 800441c:	080044f5 	.word	0x080044f5
 8004420:	6833      	ldr	r3, [r6, #0]
 8004422:	1d1a      	adds	r2, r3, #4
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6032      	str	r2, [r6, #0]
 8004428:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800442c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004430:	2301      	movs	r3, #1
 8004432:	e09c      	b.n	800456e <_printf_i+0x1e6>
 8004434:	6833      	ldr	r3, [r6, #0]
 8004436:	6820      	ldr	r0, [r4, #0]
 8004438:	1d19      	adds	r1, r3, #4
 800443a:	6031      	str	r1, [r6, #0]
 800443c:	0606      	lsls	r6, r0, #24
 800443e:	d501      	bpl.n	8004444 <_printf_i+0xbc>
 8004440:	681d      	ldr	r5, [r3, #0]
 8004442:	e003      	b.n	800444c <_printf_i+0xc4>
 8004444:	0645      	lsls	r5, r0, #25
 8004446:	d5fb      	bpl.n	8004440 <_printf_i+0xb8>
 8004448:	f9b3 5000 	ldrsh.w	r5, [r3]
 800444c:	2d00      	cmp	r5, #0
 800444e:	da03      	bge.n	8004458 <_printf_i+0xd0>
 8004450:	232d      	movs	r3, #45	@ 0x2d
 8004452:	426d      	negs	r5, r5
 8004454:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004458:	4858      	ldr	r0, [pc, #352]	@ (80045bc <_printf_i+0x234>)
 800445a:	230a      	movs	r3, #10
 800445c:	e011      	b.n	8004482 <_printf_i+0xfa>
 800445e:	6821      	ldr	r1, [r4, #0]
 8004460:	6833      	ldr	r3, [r6, #0]
 8004462:	0608      	lsls	r0, r1, #24
 8004464:	f853 5b04 	ldr.w	r5, [r3], #4
 8004468:	d402      	bmi.n	8004470 <_printf_i+0xe8>
 800446a:	0649      	lsls	r1, r1, #25
 800446c:	bf48      	it	mi
 800446e:	b2ad      	uxthmi	r5, r5
 8004470:	2f6f      	cmp	r7, #111	@ 0x6f
 8004472:	4852      	ldr	r0, [pc, #328]	@ (80045bc <_printf_i+0x234>)
 8004474:	6033      	str	r3, [r6, #0]
 8004476:	bf14      	ite	ne
 8004478:	230a      	movne	r3, #10
 800447a:	2308      	moveq	r3, #8
 800447c:	2100      	movs	r1, #0
 800447e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004482:	6866      	ldr	r6, [r4, #4]
 8004484:	60a6      	str	r6, [r4, #8]
 8004486:	2e00      	cmp	r6, #0
 8004488:	db05      	blt.n	8004496 <_printf_i+0x10e>
 800448a:	6821      	ldr	r1, [r4, #0]
 800448c:	432e      	orrs	r6, r5
 800448e:	f021 0104 	bic.w	r1, r1, #4
 8004492:	6021      	str	r1, [r4, #0]
 8004494:	d04b      	beq.n	800452e <_printf_i+0x1a6>
 8004496:	4616      	mov	r6, r2
 8004498:	fbb5 f1f3 	udiv	r1, r5, r3
 800449c:	fb03 5711 	mls	r7, r3, r1, r5
 80044a0:	5dc7      	ldrb	r7, [r0, r7]
 80044a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044a6:	462f      	mov	r7, r5
 80044a8:	42bb      	cmp	r3, r7
 80044aa:	460d      	mov	r5, r1
 80044ac:	d9f4      	bls.n	8004498 <_printf_i+0x110>
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d10b      	bne.n	80044ca <_printf_i+0x142>
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	07df      	lsls	r7, r3, #31
 80044b6:	d508      	bpl.n	80044ca <_printf_i+0x142>
 80044b8:	6923      	ldr	r3, [r4, #16]
 80044ba:	6861      	ldr	r1, [r4, #4]
 80044bc:	4299      	cmp	r1, r3
 80044be:	bfde      	ittt	le
 80044c0:	2330      	movle	r3, #48	@ 0x30
 80044c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80044ca:	1b92      	subs	r2, r2, r6
 80044cc:	6122      	str	r2, [r4, #16]
 80044ce:	f8cd a000 	str.w	sl, [sp]
 80044d2:	464b      	mov	r3, r9
 80044d4:	aa03      	add	r2, sp, #12
 80044d6:	4621      	mov	r1, r4
 80044d8:	4640      	mov	r0, r8
 80044da:	f7ff fee7 	bl	80042ac <_printf_common>
 80044de:	3001      	adds	r0, #1
 80044e0:	d14a      	bne.n	8004578 <_printf_i+0x1f0>
 80044e2:	f04f 30ff 	mov.w	r0, #4294967295
 80044e6:	b004      	add	sp, #16
 80044e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	f043 0320 	orr.w	r3, r3, #32
 80044f2:	6023      	str	r3, [r4, #0]
 80044f4:	4832      	ldr	r0, [pc, #200]	@ (80045c0 <_printf_i+0x238>)
 80044f6:	2778      	movs	r7, #120	@ 0x78
 80044f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80044fc:	6823      	ldr	r3, [r4, #0]
 80044fe:	6831      	ldr	r1, [r6, #0]
 8004500:	061f      	lsls	r7, r3, #24
 8004502:	f851 5b04 	ldr.w	r5, [r1], #4
 8004506:	d402      	bmi.n	800450e <_printf_i+0x186>
 8004508:	065f      	lsls	r7, r3, #25
 800450a:	bf48      	it	mi
 800450c:	b2ad      	uxthmi	r5, r5
 800450e:	6031      	str	r1, [r6, #0]
 8004510:	07d9      	lsls	r1, r3, #31
 8004512:	bf44      	itt	mi
 8004514:	f043 0320 	orrmi.w	r3, r3, #32
 8004518:	6023      	strmi	r3, [r4, #0]
 800451a:	b11d      	cbz	r5, 8004524 <_printf_i+0x19c>
 800451c:	2310      	movs	r3, #16
 800451e:	e7ad      	b.n	800447c <_printf_i+0xf4>
 8004520:	4826      	ldr	r0, [pc, #152]	@ (80045bc <_printf_i+0x234>)
 8004522:	e7e9      	b.n	80044f8 <_printf_i+0x170>
 8004524:	6823      	ldr	r3, [r4, #0]
 8004526:	f023 0320 	bic.w	r3, r3, #32
 800452a:	6023      	str	r3, [r4, #0]
 800452c:	e7f6      	b.n	800451c <_printf_i+0x194>
 800452e:	4616      	mov	r6, r2
 8004530:	e7bd      	b.n	80044ae <_printf_i+0x126>
 8004532:	6833      	ldr	r3, [r6, #0]
 8004534:	6825      	ldr	r5, [r4, #0]
 8004536:	6961      	ldr	r1, [r4, #20]
 8004538:	1d18      	adds	r0, r3, #4
 800453a:	6030      	str	r0, [r6, #0]
 800453c:	062e      	lsls	r6, r5, #24
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	d501      	bpl.n	8004546 <_printf_i+0x1be>
 8004542:	6019      	str	r1, [r3, #0]
 8004544:	e002      	b.n	800454c <_printf_i+0x1c4>
 8004546:	0668      	lsls	r0, r5, #25
 8004548:	d5fb      	bpl.n	8004542 <_printf_i+0x1ba>
 800454a:	8019      	strh	r1, [r3, #0]
 800454c:	2300      	movs	r3, #0
 800454e:	6123      	str	r3, [r4, #16]
 8004550:	4616      	mov	r6, r2
 8004552:	e7bc      	b.n	80044ce <_printf_i+0x146>
 8004554:	6833      	ldr	r3, [r6, #0]
 8004556:	1d1a      	adds	r2, r3, #4
 8004558:	6032      	str	r2, [r6, #0]
 800455a:	681e      	ldr	r6, [r3, #0]
 800455c:	6862      	ldr	r2, [r4, #4]
 800455e:	2100      	movs	r1, #0
 8004560:	4630      	mov	r0, r6
 8004562:	f7fb fe55 	bl	8000210 <memchr>
 8004566:	b108      	cbz	r0, 800456c <_printf_i+0x1e4>
 8004568:	1b80      	subs	r0, r0, r6
 800456a:	6060      	str	r0, [r4, #4]
 800456c:	6863      	ldr	r3, [r4, #4]
 800456e:	6123      	str	r3, [r4, #16]
 8004570:	2300      	movs	r3, #0
 8004572:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004576:	e7aa      	b.n	80044ce <_printf_i+0x146>
 8004578:	6923      	ldr	r3, [r4, #16]
 800457a:	4632      	mov	r2, r6
 800457c:	4649      	mov	r1, r9
 800457e:	4640      	mov	r0, r8
 8004580:	47d0      	blx	sl
 8004582:	3001      	adds	r0, #1
 8004584:	d0ad      	beq.n	80044e2 <_printf_i+0x15a>
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	079b      	lsls	r3, r3, #30
 800458a:	d413      	bmi.n	80045b4 <_printf_i+0x22c>
 800458c:	68e0      	ldr	r0, [r4, #12]
 800458e:	9b03      	ldr	r3, [sp, #12]
 8004590:	4298      	cmp	r0, r3
 8004592:	bfb8      	it	lt
 8004594:	4618      	movlt	r0, r3
 8004596:	e7a6      	b.n	80044e6 <_printf_i+0x15e>
 8004598:	2301      	movs	r3, #1
 800459a:	4632      	mov	r2, r6
 800459c:	4649      	mov	r1, r9
 800459e:	4640      	mov	r0, r8
 80045a0:	47d0      	blx	sl
 80045a2:	3001      	adds	r0, #1
 80045a4:	d09d      	beq.n	80044e2 <_printf_i+0x15a>
 80045a6:	3501      	adds	r5, #1
 80045a8:	68e3      	ldr	r3, [r4, #12]
 80045aa:	9903      	ldr	r1, [sp, #12]
 80045ac:	1a5b      	subs	r3, r3, r1
 80045ae:	42ab      	cmp	r3, r5
 80045b0:	dcf2      	bgt.n	8004598 <_printf_i+0x210>
 80045b2:	e7eb      	b.n	800458c <_printf_i+0x204>
 80045b4:	2500      	movs	r5, #0
 80045b6:	f104 0619 	add.w	r6, r4, #25
 80045ba:	e7f5      	b.n	80045a8 <_printf_i+0x220>
 80045bc:	08004b75 	.word	0x08004b75
 80045c0:	08004b86 	.word	0x08004b86

080045c4 <__sflush_r>:
 80045c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80045c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045cc:	0716      	lsls	r6, r2, #28
 80045ce:	4605      	mov	r5, r0
 80045d0:	460c      	mov	r4, r1
 80045d2:	d454      	bmi.n	800467e <__sflush_r+0xba>
 80045d4:	684b      	ldr	r3, [r1, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	dc02      	bgt.n	80045e0 <__sflush_r+0x1c>
 80045da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80045dc:	2b00      	cmp	r3, #0
 80045de:	dd48      	ble.n	8004672 <__sflush_r+0xae>
 80045e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80045e2:	2e00      	cmp	r6, #0
 80045e4:	d045      	beq.n	8004672 <__sflush_r+0xae>
 80045e6:	2300      	movs	r3, #0
 80045e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80045ec:	682f      	ldr	r7, [r5, #0]
 80045ee:	6a21      	ldr	r1, [r4, #32]
 80045f0:	602b      	str	r3, [r5, #0]
 80045f2:	d030      	beq.n	8004656 <__sflush_r+0x92>
 80045f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80045f6:	89a3      	ldrh	r3, [r4, #12]
 80045f8:	0759      	lsls	r1, r3, #29
 80045fa:	d505      	bpl.n	8004608 <__sflush_r+0x44>
 80045fc:	6863      	ldr	r3, [r4, #4]
 80045fe:	1ad2      	subs	r2, r2, r3
 8004600:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004602:	b10b      	cbz	r3, 8004608 <__sflush_r+0x44>
 8004604:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004606:	1ad2      	subs	r2, r2, r3
 8004608:	2300      	movs	r3, #0
 800460a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800460c:	6a21      	ldr	r1, [r4, #32]
 800460e:	4628      	mov	r0, r5
 8004610:	47b0      	blx	r6
 8004612:	1c43      	adds	r3, r0, #1
 8004614:	89a3      	ldrh	r3, [r4, #12]
 8004616:	d106      	bne.n	8004626 <__sflush_r+0x62>
 8004618:	6829      	ldr	r1, [r5, #0]
 800461a:	291d      	cmp	r1, #29
 800461c:	d82b      	bhi.n	8004676 <__sflush_r+0xb2>
 800461e:	4a2a      	ldr	r2, [pc, #168]	@ (80046c8 <__sflush_r+0x104>)
 8004620:	40ca      	lsrs	r2, r1
 8004622:	07d6      	lsls	r6, r2, #31
 8004624:	d527      	bpl.n	8004676 <__sflush_r+0xb2>
 8004626:	2200      	movs	r2, #0
 8004628:	6062      	str	r2, [r4, #4]
 800462a:	04d9      	lsls	r1, r3, #19
 800462c:	6922      	ldr	r2, [r4, #16]
 800462e:	6022      	str	r2, [r4, #0]
 8004630:	d504      	bpl.n	800463c <__sflush_r+0x78>
 8004632:	1c42      	adds	r2, r0, #1
 8004634:	d101      	bne.n	800463a <__sflush_r+0x76>
 8004636:	682b      	ldr	r3, [r5, #0]
 8004638:	b903      	cbnz	r3, 800463c <__sflush_r+0x78>
 800463a:	6560      	str	r0, [r4, #84]	@ 0x54
 800463c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800463e:	602f      	str	r7, [r5, #0]
 8004640:	b1b9      	cbz	r1, 8004672 <__sflush_r+0xae>
 8004642:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004646:	4299      	cmp	r1, r3
 8004648:	d002      	beq.n	8004650 <__sflush_r+0x8c>
 800464a:	4628      	mov	r0, r5
 800464c:	f7ff fbf4 	bl	8003e38 <_free_r>
 8004650:	2300      	movs	r3, #0
 8004652:	6363      	str	r3, [r4, #52]	@ 0x34
 8004654:	e00d      	b.n	8004672 <__sflush_r+0xae>
 8004656:	2301      	movs	r3, #1
 8004658:	4628      	mov	r0, r5
 800465a:	47b0      	blx	r6
 800465c:	4602      	mov	r2, r0
 800465e:	1c50      	adds	r0, r2, #1
 8004660:	d1c9      	bne.n	80045f6 <__sflush_r+0x32>
 8004662:	682b      	ldr	r3, [r5, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0c6      	beq.n	80045f6 <__sflush_r+0x32>
 8004668:	2b1d      	cmp	r3, #29
 800466a:	d001      	beq.n	8004670 <__sflush_r+0xac>
 800466c:	2b16      	cmp	r3, #22
 800466e:	d11e      	bne.n	80046ae <__sflush_r+0xea>
 8004670:	602f      	str	r7, [r5, #0]
 8004672:	2000      	movs	r0, #0
 8004674:	e022      	b.n	80046bc <__sflush_r+0xf8>
 8004676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800467a:	b21b      	sxth	r3, r3
 800467c:	e01b      	b.n	80046b6 <__sflush_r+0xf2>
 800467e:	690f      	ldr	r7, [r1, #16]
 8004680:	2f00      	cmp	r7, #0
 8004682:	d0f6      	beq.n	8004672 <__sflush_r+0xae>
 8004684:	0793      	lsls	r3, r2, #30
 8004686:	680e      	ldr	r6, [r1, #0]
 8004688:	bf08      	it	eq
 800468a:	694b      	ldreq	r3, [r1, #20]
 800468c:	600f      	str	r7, [r1, #0]
 800468e:	bf18      	it	ne
 8004690:	2300      	movne	r3, #0
 8004692:	eba6 0807 	sub.w	r8, r6, r7
 8004696:	608b      	str	r3, [r1, #8]
 8004698:	f1b8 0f00 	cmp.w	r8, #0
 800469c:	dde9      	ble.n	8004672 <__sflush_r+0xae>
 800469e:	6a21      	ldr	r1, [r4, #32]
 80046a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80046a2:	4643      	mov	r3, r8
 80046a4:	463a      	mov	r2, r7
 80046a6:	4628      	mov	r0, r5
 80046a8:	47b0      	blx	r6
 80046aa:	2800      	cmp	r0, #0
 80046ac:	dc08      	bgt.n	80046c0 <__sflush_r+0xfc>
 80046ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046b6:	81a3      	strh	r3, [r4, #12]
 80046b8:	f04f 30ff 	mov.w	r0, #4294967295
 80046bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046c0:	4407      	add	r7, r0
 80046c2:	eba8 0800 	sub.w	r8, r8, r0
 80046c6:	e7e7      	b.n	8004698 <__sflush_r+0xd4>
 80046c8:	20400001 	.word	0x20400001

080046cc <_fflush_r>:
 80046cc:	b538      	push	{r3, r4, r5, lr}
 80046ce:	690b      	ldr	r3, [r1, #16]
 80046d0:	4605      	mov	r5, r0
 80046d2:	460c      	mov	r4, r1
 80046d4:	b913      	cbnz	r3, 80046dc <_fflush_r+0x10>
 80046d6:	2500      	movs	r5, #0
 80046d8:	4628      	mov	r0, r5
 80046da:	bd38      	pop	{r3, r4, r5, pc}
 80046dc:	b118      	cbz	r0, 80046e6 <_fflush_r+0x1a>
 80046de:	6a03      	ldr	r3, [r0, #32]
 80046e0:	b90b      	cbnz	r3, 80046e6 <_fflush_r+0x1a>
 80046e2:	f7ff f9af 	bl	8003a44 <__sinit>
 80046e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f3      	beq.n	80046d6 <_fflush_r+0xa>
 80046ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80046f0:	07d0      	lsls	r0, r2, #31
 80046f2:	d404      	bmi.n	80046fe <_fflush_r+0x32>
 80046f4:	0599      	lsls	r1, r3, #22
 80046f6:	d402      	bmi.n	80046fe <_fflush_r+0x32>
 80046f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046fa:	f7ff fb9a 	bl	8003e32 <__retarget_lock_acquire_recursive>
 80046fe:	4628      	mov	r0, r5
 8004700:	4621      	mov	r1, r4
 8004702:	f7ff ff5f 	bl	80045c4 <__sflush_r>
 8004706:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004708:	07da      	lsls	r2, r3, #31
 800470a:	4605      	mov	r5, r0
 800470c:	d4e4      	bmi.n	80046d8 <_fflush_r+0xc>
 800470e:	89a3      	ldrh	r3, [r4, #12]
 8004710:	059b      	lsls	r3, r3, #22
 8004712:	d4e1      	bmi.n	80046d8 <_fflush_r+0xc>
 8004714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004716:	f7ff fb8d 	bl	8003e34 <__retarget_lock_release_recursive>
 800471a:	e7dd      	b.n	80046d8 <_fflush_r+0xc>

0800471c <__swhatbuf_r>:
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	460c      	mov	r4, r1
 8004720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004724:	2900      	cmp	r1, #0
 8004726:	b096      	sub	sp, #88	@ 0x58
 8004728:	4615      	mov	r5, r2
 800472a:	461e      	mov	r6, r3
 800472c:	da0d      	bge.n	800474a <__swhatbuf_r+0x2e>
 800472e:	89a3      	ldrh	r3, [r4, #12]
 8004730:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004734:	f04f 0100 	mov.w	r1, #0
 8004738:	bf14      	ite	ne
 800473a:	2340      	movne	r3, #64	@ 0x40
 800473c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004740:	2000      	movs	r0, #0
 8004742:	6031      	str	r1, [r6, #0]
 8004744:	602b      	str	r3, [r5, #0]
 8004746:	b016      	add	sp, #88	@ 0x58
 8004748:	bd70      	pop	{r4, r5, r6, pc}
 800474a:	466a      	mov	r2, sp
 800474c:	f000 f848 	bl	80047e0 <_fstat_r>
 8004750:	2800      	cmp	r0, #0
 8004752:	dbec      	blt.n	800472e <__swhatbuf_r+0x12>
 8004754:	9901      	ldr	r1, [sp, #4]
 8004756:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800475a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800475e:	4259      	negs	r1, r3
 8004760:	4159      	adcs	r1, r3
 8004762:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004766:	e7eb      	b.n	8004740 <__swhatbuf_r+0x24>

08004768 <__smakebuf_r>:
 8004768:	898b      	ldrh	r3, [r1, #12]
 800476a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800476c:	079d      	lsls	r5, r3, #30
 800476e:	4606      	mov	r6, r0
 8004770:	460c      	mov	r4, r1
 8004772:	d507      	bpl.n	8004784 <__smakebuf_r+0x1c>
 8004774:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004778:	6023      	str	r3, [r4, #0]
 800477a:	6123      	str	r3, [r4, #16]
 800477c:	2301      	movs	r3, #1
 800477e:	6163      	str	r3, [r4, #20]
 8004780:	b003      	add	sp, #12
 8004782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004784:	ab01      	add	r3, sp, #4
 8004786:	466a      	mov	r2, sp
 8004788:	f7ff ffc8 	bl	800471c <__swhatbuf_r>
 800478c:	9f00      	ldr	r7, [sp, #0]
 800478e:	4605      	mov	r5, r0
 8004790:	4639      	mov	r1, r7
 8004792:	4630      	mov	r0, r6
 8004794:	f7ff fbbc 	bl	8003f10 <_malloc_r>
 8004798:	b948      	cbnz	r0, 80047ae <__smakebuf_r+0x46>
 800479a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800479e:	059a      	lsls	r2, r3, #22
 80047a0:	d4ee      	bmi.n	8004780 <__smakebuf_r+0x18>
 80047a2:	f023 0303 	bic.w	r3, r3, #3
 80047a6:	f043 0302 	orr.w	r3, r3, #2
 80047aa:	81a3      	strh	r3, [r4, #12]
 80047ac:	e7e2      	b.n	8004774 <__smakebuf_r+0xc>
 80047ae:	89a3      	ldrh	r3, [r4, #12]
 80047b0:	6020      	str	r0, [r4, #0]
 80047b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047b6:	81a3      	strh	r3, [r4, #12]
 80047b8:	9b01      	ldr	r3, [sp, #4]
 80047ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80047be:	b15b      	cbz	r3, 80047d8 <__smakebuf_r+0x70>
 80047c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047c4:	4630      	mov	r0, r6
 80047c6:	f000 f81d 	bl	8004804 <_isatty_r>
 80047ca:	b128      	cbz	r0, 80047d8 <__smakebuf_r+0x70>
 80047cc:	89a3      	ldrh	r3, [r4, #12]
 80047ce:	f023 0303 	bic.w	r3, r3, #3
 80047d2:	f043 0301 	orr.w	r3, r3, #1
 80047d6:	81a3      	strh	r3, [r4, #12]
 80047d8:	89a3      	ldrh	r3, [r4, #12]
 80047da:	431d      	orrs	r5, r3
 80047dc:	81a5      	strh	r5, [r4, #12]
 80047de:	e7cf      	b.n	8004780 <__smakebuf_r+0x18>

080047e0 <_fstat_r>:
 80047e0:	b538      	push	{r3, r4, r5, lr}
 80047e2:	4d07      	ldr	r5, [pc, #28]	@ (8004800 <_fstat_r+0x20>)
 80047e4:	2300      	movs	r3, #0
 80047e6:	4604      	mov	r4, r0
 80047e8:	4608      	mov	r0, r1
 80047ea:	4611      	mov	r1, r2
 80047ec:	602b      	str	r3, [r5, #0]
 80047ee:	f7fc fe15 	bl	800141c <_fstat>
 80047f2:	1c43      	adds	r3, r0, #1
 80047f4:	d102      	bne.n	80047fc <_fstat_r+0x1c>
 80047f6:	682b      	ldr	r3, [r5, #0]
 80047f8:	b103      	cbz	r3, 80047fc <_fstat_r+0x1c>
 80047fa:	6023      	str	r3, [r4, #0]
 80047fc:	bd38      	pop	{r3, r4, r5, pc}
 80047fe:	bf00      	nop
 8004800:	20000394 	.word	0x20000394

08004804 <_isatty_r>:
 8004804:	b538      	push	{r3, r4, r5, lr}
 8004806:	4d06      	ldr	r5, [pc, #24]	@ (8004820 <_isatty_r+0x1c>)
 8004808:	2300      	movs	r3, #0
 800480a:	4604      	mov	r4, r0
 800480c:	4608      	mov	r0, r1
 800480e:	602b      	str	r3, [r5, #0]
 8004810:	f7fc fe14 	bl	800143c <_isatty>
 8004814:	1c43      	adds	r3, r0, #1
 8004816:	d102      	bne.n	800481e <_isatty_r+0x1a>
 8004818:	682b      	ldr	r3, [r5, #0]
 800481a:	b103      	cbz	r3, 800481e <_isatty_r+0x1a>
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	bd38      	pop	{r3, r4, r5, pc}
 8004820:	20000394 	.word	0x20000394

08004824 <_sbrk_r>:
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	4d06      	ldr	r5, [pc, #24]	@ (8004840 <_sbrk_r+0x1c>)
 8004828:	2300      	movs	r3, #0
 800482a:	4604      	mov	r4, r0
 800482c:	4608      	mov	r0, r1
 800482e:	602b      	str	r3, [r5, #0]
 8004830:	f7fc fe1c 	bl	800146c <_sbrk>
 8004834:	1c43      	adds	r3, r0, #1
 8004836:	d102      	bne.n	800483e <_sbrk_r+0x1a>
 8004838:	682b      	ldr	r3, [r5, #0]
 800483a:	b103      	cbz	r3, 800483e <_sbrk_r+0x1a>
 800483c:	6023      	str	r3, [r4, #0]
 800483e:	bd38      	pop	{r3, r4, r5, pc}
 8004840:	20000394 	.word	0x20000394

08004844 <_init>:
 8004844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004846:	bf00      	nop
 8004848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800484a:	bc08      	pop	{r3}
 800484c:	469e      	mov	lr, r3
 800484e:	4770      	bx	lr

08004850 <_fini>:
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	bf00      	nop
 8004854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004856:	bc08      	pop	{r3}
 8004858:	469e      	mov	lr, r3
 800485a:	4770      	bx	lr
