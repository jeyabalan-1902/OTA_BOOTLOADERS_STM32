
BOOTLOADER_L073RZT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038f0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  080039b0  080039b0  000049b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b60  08003b60  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003b60  08003b60  00004b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b68  08003b68  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b68  08003b68  00004b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b6c  08003b6c  00004b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003b70  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  2000000c  08003b7c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08003b7c  00005240  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab43  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002118  00000000  00000000  0000fb77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  00011c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000743  00000000  00000000  000125f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014e34  00000000  00000000  00012d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cbdb  00000000  00000000  00027b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ee05  00000000  00000000  00034742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3547  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002038  00000000  00000000  000b358c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000b55c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003998 	.word	0x08003998

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003998 	.word	0x08003998

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000450:	f3bf 8f4f 	dsb	sy
}
 8000454:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000456:	4b04      	ldr	r3, [pc, #16]	@ (8000468 <__NVIC_SystemReset+0x1c>)
 8000458:	4a04      	ldr	r2, [pc, #16]	@ (800046c <__NVIC_SystemReset+0x20>)
 800045a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800045c:	f3bf 8f4f 	dsb	sy
}
 8000460:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	e7fd      	b.n	8000462 <__NVIC_SystemReset+0x16>
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	e000ed00 	.word	0xe000ed00
 800046c:	05fa0004 	.word	0x05fa0004

08000470 <debug_puts>:
#include "bootloader.h"

uint8_t bl_rx_buffer[BL_RX_LEN];

void debug_puts(char *s)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
	while(*s)
 8000478:	e008      	b.n	800048c <debug_puts+0x1c>
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)s++, 1, HAL_MAX_DELAY);
 800047a:	6879      	ldr	r1, [r7, #4]
 800047c:	1c4b      	adds	r3, r1, #1
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	2301      	movs	r3, #1
 8000482:	425b      	negs	r3, r3
 8000484:	4809      	ldr	r0, [pc, #36]	@ (80004ac <debug_puts+0x3c>)
 8000486:	2201      	movs	r2, #1
 8000488:	f002 fbfc 	bl	8002c84 <HAL_UART_Transmit>
	while(*s)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d1f2      	bne.n	800047a <debug_puts+0xa>
	}
	HAL_UART_Transmit(&huart2, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 8000494:	2301      	movs	r3, #1
 8000496:	425b      	negs	r3, r3
 8000498:	4905      	ldr	r1, [pc, #20]	@ (80004b0 <debug_puts+0x40>)
 800049a:	4804      	ldr	r0, [pc, #16]	@ (80004ac <debug_puts+0x3c>)
 800049c:	2201      	movs	r2, #1
 800049e:	f002 fbf1 	bl	8002c84 <HAL_UART_Transmit>
}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	b002      	add	sp, #8
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	2000019c 	.word	0x2000019c
 80004b0:	080039b0 	.word	0x080039b0

080004b4 <bootloader_uart_read_data>:

void  bootloader_uart_read_data(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
    uint8_t rcv_len=0;
 80004ba:	1dfb      	adds	r3, r7, #7
 80004bc:	2200      	movs	r2, #0
 80004be:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		memset(bl_rx_buffer,0,200);
 80004c0:	4b20      	ldr	r3, [pc, #128]	@ (8000544 <bootloader_uart_read_data+0x90>)
 80004c2:	22c8      	movs	r2, #200	@ 0xc8
 80004c4:	2100      	movs	r1, #0
 80004c6:	0018      	movs	r0, r3
 80004c8:	f003 fa30 	bl	800392c <memset>
        HAL_UART_Receive(C_UART,bl_rx_buffer,1,HAL_MAX_DELAY);
 80004cc:	2301      	movs	r3, #1
 80004ce:	425b      	negs	r3, r3
 80004d0:	491c      	ldr	r1, [pc, #112]	@ (8000544 <bootloader_uart_read_data+0x90>)
 80004d2:	481d      	ldr	r0, [pc, #116]	@ (8000548 <bootloader_uart_read_data+0x94>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	f002 fc75 	bl	8002dc4 <HAL_UART_Receive>
		rcv_len= bl_rx_buffer[0];
 80004da:	1dfb      	adds	r3, r7, #7
 80004dc:	4a19      	ldr	r2, [pc, #100]	@ (8000544 <bootloader_uart_read_data+0x90>)
 80004de:	7812      	ldrb	r2, [r2, #0]
 80004e0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive(C_UART,&bl_rx_buffer[1],rcv_len,HAL_MAX_DELAY);
 80004e2:	1dfb      	adds	r3, r7, #7
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	b29a      	uxth	r2, r3
 80004e8:	2301      	movs	r3, #1
 80004ea:	425b      	negs	r3, r3
 80004ec:	4917      	ldr	r1, [pc, #92]	@ (800054c <bootloader_uart_read_data+0x98>)
 80004ee:	4816      	ldr	r0, [pc, #88]	@ (8000548 <bootloader_uart_read_data+0x94>)
 80004f0:	f002 fc68 	bl	8002dc4 <HAL_UART_Receive>
		switch(bl_rx_buffer[1])
 80004f4:	4b13      	ldr	r3, [pc, #76]	@ (8000544 <bootloader_uart_read_data+0x90>)
 80004f6:	785b      	ldrb	r3, [r3, #1]
 80004f8:	2b54      	cmp	r3, #84	@ 0x54
 80004fa:	d017      	beq.n	800052c <bootloader_uart_read_data+0x78>
 80004fc:	dc1b      	bgt.n	8000536 <bootloader_uart_read_data+0x82>
 80004fe:	2b53      	cmp	r3, #83	@ 0x53
 8000500:	d00f      	beq.n	8000522 <bootloader_uart_read_data+0x6e>
 8000502:	dc18      	bgt.n	8000536 <bootloader_uart_read_data+0x82>
 8000504:	2b51      	cmp	r3, #81	@ 0x51
 8000506:	d002      	beq.n	800050e <bootloader_uart_read_data+0x5a>
 8000508:	2b52      	cmp	r3, #82	@ 0x52
 800050a:	d005      	beq.n	8000518 <bootloader_uart_read_data+0x64>
 800050c:	e013      	b.n	8000536 <bootloader_uart_read_data+0x82>
		{
            case BL_GET_CID:
                bootloader_handle_getcid_cmd(bl_rx_buffer);
 800050e:	4b0d      	ldr	r3, [pc, #52]	@ (8000544 <bootloader_uart_read_data+0x90>)
 8000510:	0018      	movs	r0, r3
 8000512:	f000 f893 	bl	800063c <bootloader_handle_getcid_cmd>
                break;
 8000516:	e013      	b.n	8000540 <bootloader_uart_read_data+0x8c>
            case BL_GO_TO_RESET:
            	bootloader_go_reset_cmd(bl_rx_buffer);
 8000518:	4b0a      	ldr	r3, [pc, #40]	@ (8000544 <bootloader_uart_read_data+0x90>)
 800051a:	0018      	movs	r0, r3
 800051c:	f000 f86e 	bl	80005fc <bootloader_go_reset_cmd>
                break;
 8000520:	e00e      	b.n	8000540 <bootloader_uart_read_data+0x8c>
            case BL_FLASH_ERASE:
                bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8000522:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <bootloader_uart_read_data+0x90>)
 8000524:	0018      	movs	r0, r3
 8000526:	f000 f8b9 	bl	800069c <bootloader_handle_flash_erase_cmd>
                break;
 800052a:	e009      	b.n	8000540 <bootloader_uart_read_data+0x8c>
            case BL_MEM_WRITE:
                bootloader_handle_mem_write_cmd(bl_rx_buffer);
 800052c:	4b05      	ldr	r3, [pc, #20]	@ (8000544 <bootloader_uart_read_data+0x90>)
 800052e:	0018      	movs	r0, r3
 8000530:	f000 f8fc 	bl	800072c <bootloader_handle_mem_write_cmd>
                break;
 8000534:	e004      	b.n	8000540 <bootloader_uart_read_data+0x8c>
            default:
            	debug_puts("BL_MSG: Invalid command");
 8000536:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <bootloader_uart_read_data+0x9c>)
 8000538:	0018      	movs	r0, r3
 800053a:	f7ff ff99 	bl	8000470 <debug_puts>
                break;
 800053e:	46c0      	nop			@ (mov r8, r8)
		memset(bl_rx_buffer,0,200);
 8000540:	e7be      	b.n	80004c0 <bootloader_uart_read_data+0xc>
 8000542:	46c0      	nop			@ (mov r8, r8)
 8000544:	20000028 	.word	0x20000028
 8000548:	20000114 	.word	0x20000114
 800054c:	20000029 	.word	0x20000029
 8000550:	080039b4 	.word	0x080039b4

08000554 <bootloader_jump_to_user_app>:
		}
	}
}

void bootloader_jump_to_user_app(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0
	void (*app_reset_handler)(void);

	debug_puts("BL_MSG: Jumping to user app");
 800055a:	4b23      	ldr	r3, [pc, #140]	@ (80005e8 <bootloader_jump_to_user_app+0x94>)
 800055c:	0018      	movs	r0, r3
 800055e:	f7ff ff87 	bl	8000470 <debug_puts>

	uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 8000562:	4b22      	ldr	r3, [pc, #136]	@ (80005ec <bootloader_jump_to_user_app+0x98>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	613b      	str	r3, [r7, #16]
	uint32_t reset_handler_address = *(volatile uint32_t *)(FLASH_SECTOR2_BASE_ADDRESS + 4);
 8000568:	4b21      	ldr	r3, [pc, #132]	@ (80005f0 <bootloader_jump_to_user_app+0x9c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	60fb      	str	r3, [r7, #12]

	HAL_Delay(1000);
 800056e:	23fa      	movs	r3, #250	@ 0xfa
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	0018      	movs	r0, r3
 8000574:	f000 fd76 	bl	8001064 <HAL_Delay>

	HAL_RCC_DeInit();
 8000578:	f001 fb12 	bl	8001ba0 <HAL_RCC_DeInit>
	HAL_DeInit();
 800057c:	f000 fcf6 	bl	8000f6c <HAL_DeInit>

	SysTick->CTRL = 0;
 8000580:	4b1c      	ldr	r3, [pc, #112]	@ (80005f4 <bootloader_jump_to_user_app+0xa0>)
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000586:	4b1b      	ldr	r3, [pc, #108]	@ (80005f4 <bootloader_jump_to_user_app+0xa0>)
 8000588:	2200      	movs	r2, #0
 800058a:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800058c:	4b19      	ldr	r3, [pc, #100]	@ (80005f4 <bootloader_jump_to_user_app+0xa0>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]

	for (int i = 0; i < 8; i++) {
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
 8000596:	e010      	b.n	80005ba <bootloader_jump_to_user_app+0x66>
		NVIC->ICER[i] = 0xFFFFFFFF;
 8000598:	4917      	ldr	r1, [pc, #92]	@ (80005f8 <bootloader_jump_to_user_app+0xa4>)
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	3320      	adds	r3, #32
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	2201      	movs	r2, #1
 80005a2:	4252      	negs	r2, r2
 80005a4:	505a      	str	r2, [r3, r1]
		NVIC->ICPR[i] = 0xFFFFFFFF;
 80005a6:	4914      	ldr	r1, [pc, #80]	@ (80005f8 <bootloader_jump_to_user_app+0xa4>)
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	3360      	adds	r3, #96	@ 0x60
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	2201      	movs	r2, #1
 80005b0:	4252      	negs	r2, r2
 80005b2:	505a      	str	r2, [r3, r1]
	for (int i = 0; i < 8; i++) {
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	3301      	adds	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	2b07      	cmp	r3, #7
 80005be:	ddeb      	ble.n	8000598 <bootloader_jump_to_user_app+0x44>
  __ASM volatile ("dsb 0xF":::"memory");
 80005c0:	f3bf 8f4f 	dsb	sy
}
 80005c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80005c6:	f3bf 8f6f 	isb	sy
}
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	693b      	ldr	r3, [r7, #16]
 80005ce:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f383 8808 	msr	MSP, r3
}
 80005d6:	46c0      	nop			@ (mov r8, r8)
	}
	__DSB();
	__ISB();
	__set_MSP(msp_value);

	app_reset_handler = (void *)reset_handler_address;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	60bb      	str	r3, [r7, #8]
	app_reset_handler();
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	4798      	blx	r3

}
 80005e0:	46c0      	nop			@ (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b006      	add	sp, #24
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	080039cc 	.word	0x080039cc
 80005ec:	08006000 	.word	0x08006000
 80005f0:	08006004 	.word	0x08006004
 80005f4:	e000e010 	.word	0xe000e010
 80005f8:	e000e100 	.word	0xe000e100

080005fc <bootloader_go_reset_cmd>:

void bootloader_go_reset_cmd(uint8_t *pBuffer)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	debug_puts("BL_MSG: Reset command received");
 8000604:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <bootloader_go_reset_cmd+0x3c>)
 8000606:	0018      	movs	r0, r3
 8000608:	f7ff ff32 	bl	8000470 <debug_puts>
    bootloader_send_ack(pBuffer[0], 0);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2100      	movs	r1, #0
 8000612:	0018      	movs	r0, r3
 8000614:	f000 f8d0 	bl	80007b8 <bootloader_send_ack>
    uint8_t resp = ADDR_VALID;
 8000618:	210f      	movs	r1, #15
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
    bootloader_uart_write_data(&resp, 1);
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2101      	movs	r1, #1
 8000624:	0018      	movs	r0, r3
 8000626:	f000 f8e5 	bl	80007f4 <bootloader_uart_write_data>
    HAL_Delay(1000);
 800062a:	23fa      	movs	r3, #250	@ 0xfa
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	0018      	movs	r0, r3
 8000630:	f000 fd18 	bl	8001064 <HAL_Delay>
    NVIC_SystemReset();
 8000634:	f7ff ff0a 	bl	800044c <__NVIC_SystemReset>
 8000638:	080039e8 	.word	0x080039e8

0800063c <bootloader_handle_getcid_cmd>:
}

void bootloader_handle_getcid_cmd(uint8_t *pBuffer)
{
 800063c:	b5b0      	push	{r4, r5, r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
    uint16_t bl_cid_num = get_mcu_chip_id();
 8000644:	250e      	movs	r5, #14
 8000646:	197c      	adds	r4, r7, r5
 8000648:	f000 f8e8 	bl	800081c <get_mcu_chip_id>
 800064c:	0003      	movs	r3, r0
 800064e:	8023      	strh	r3, [r4, #0]
    uint8_t tx_buf[4] = { BL_ACK, 2, (uint8_t)(bl_cid_num & 0xFF), (uint8_t)((bl_cid_num >> 8) & 0xFF) };
 8000650:	2108      	movs	r1, #8
 8000652:	187b      	adds	r3, r7, r1
 8000654:	22a5      	movs	r2, #165	@ 0xa5
 8000656:	701a      	strb	r2, [r3, #0]
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2202      	movs	r2, #2
 800065c:	705a      	strb	r2, [r3, #1]
 800065e:	197b      	adds	r3, r7, r5
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	187b      	adds	r3, r7, r1
 8000666:	709a      	strb	r2, [r3, #2]
 8000668:	197b      	adds	r3, r7, r5
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	0a1b      	lsrs	r3, r3, #8
 800066e:	b29b      	uxth	r3, r3
 8000670:	b2da      	uxtb	r2, r3
 8000672:	187b      	adds	r3, r7, r1
 8000674:	70da      	strb	r2, [r3, #3]
    HAL_UART_Transmit(C_UART, tx_buf, sizeof(tx_buf), HAL_MAX_DELAY);
 8000676:	2301      	movs	r3, #1
 8000678:	425b      	negs	r3, r3
 800067a:	1879      	adds	r1, r7, r1
 800067c:	4805      	ldr	r0, [pc, #20]	@ (8000694 <bootloader_handle_getcid_cmd+0x58>)
 800067e:	2204      	movs	r2, #4
 8000680:	f002 fb00 	bl	8002c84 <HAL_UART_Transmit>
    debug_puts("BL_MSG: Sent chip ID");
 8000684:	4b04      	ldr	r3, [pc, #16]	@ (8000698 <bootloader_handle_getcid_cmd+0x5c>)
 8000686:	0018      	movs	r0, r3
 8000688:	f7ff fef2 	bl	8000470 <debug_puts>
}
 800068c:	46c0      	nop			@ (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	b004      	add	sp, #16
 8000692:	bdb0      	pop	{r4, r5, r7, pc}
 8000694:	20000114 	.word	0x20000114
 8000698:	08003a08 	.word	0x08003a08

0800069c <bootloader_handle_flash_erase_cmd>:

void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
{
 800069c:	b5b0      	push	{r4, r5, r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
    debug_puts("BL_MSG: Flash erase command");
 80006a4:	4b20      	ldr	r3, [pc, #128]	@ (8000728 <bootloader_handle_flash_erase_cmd+0x8c>)
 80006a6:	0018      	movs	r0, r3
 80006a8:	f7ff fee2 	bl	8000470 <debug_puts>
    uint8_t erase_status;
    uint8_t initial_page = pBuffer[2];
 80006ac:	240f      	movs	r4, #15
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	7892      	ldrb	r2, [r2, #2]
 80006b4:	701a      	strb	r2, [r3, #0]
    uint16_t num_pages = pBuffer[3] | (pBuffer[4] << 8);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	3303      	adds	r3, #3
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	b21a      	sxth	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	3304      	adds	r3, #4
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b21b      	sxth	r3, r3
 80006c6:	021b      	lsls	r3, r3, #8
 80006c8:	b21b      	sxth	r3, r3
 80006ca:	4313      	orrs	r3, r2
 80006cc:	b21a      	sxth	r2, r3
 80006ce:	250c      	movs	r5, #12
 80006d0:	197b      	adds	r3, r7, r5
 80006d2:	801a      	strh	r2, [r3, #0]

    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80006d4:	23a0      	movs	r3, #160	@ 0xa0
 80006d6:	05db      	lsls	r3, r3, #23
 80006d8:	2201      	movs	r2, #1
 80006da:	2120      	movs	r1, #32
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 fa42 	bl	8001b66 <HAL_GPIO_WritePin>
    erase_status = execute_flash_erase(initial_page, num_pages);
 80006e2:	197b      	adds	r3, r7, r5
 80006e4:	881a      	ldrh	r2, [r3, #0]
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	0011      	movs	r1, r2
 80006ec:	0018      	movs	r0, r3
 80006ee:	f000 f8cf 	bl	8000890 <execute_flash_erase>
 80006f2:	0003      	movs	r3, r0
 80006f4:	001a      	movs	r2, r3
 80006f6:	240b      	movs	r4, #11
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80006fc:	23a0      	movs	r3, #160	@ 0xa0
 80006fe:	05db      	lsls	r3, r3, #23
 8000700:	2200      	movs	r2, #0
 8000702:	2120      	movs	r1, #32
 8000704:	0018      	movs	r0, r3
 8000706:	f001 fa2e 	bl	8001b66 <HAL_GPIO_WritePin>

    bootloader_send_ack(pBuffer[0], 1);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2101      	movs	r1, #1
 8000710:	0018      	movs	r0, r3
 8000712:	f000 f851 	bl	80007b8 <bootloader_send_ack>
    bootloader_uart_write_data(&erase_status, 1);
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2101      	movs	r1, #1
 800071a:	0018      	movs	r0, r3
 800071c:	f000 f86a 	bl	80007f4 <bootloader_uart_write_data>
}
 8000720:	46c0      	nop			@ (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b004      	add	sp, #16
 8000726:	bdb0      	pop	{r4, r5, r7, pc}
 8000728:	08003a20 	.word	0x08003a20

0800072c <bootloader_handle_mem_write_cmd>:

void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
    debug_puts("BL_MSG: Memory write command");
 8000734:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <bootloader_handle_mem_write_cmd+0x88>)
 8000736:	0018      	movs	r0, r3
 8000738:	f7ff fe9a 	bl	8000470 <debug_puts>
    uint8_t len = pBuffer[0];
 800073c:	2117      	movs	r1, #23
 800073e:	187b      	adds	r3, r7, r1
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	7812      	ldrb	r2, [r2, #0]
 8000744:	701a      	strb	r2, [r3, #0]
    if (len < 7) return;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b06      	cmp	r3, #6
 800074c:	d92d      	bls.n	80007aa <bootloader_handle_mem_write_cmd+0x7e>

    uint8_t payload_len = pBuffer[6];
 800074e:	2416      	movs	r4, #22
 8000750:	193b      	adds	r3, r7, r4
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	7992      	ldrb	r2, [r2, #6]
 8000756:	701a      	strb	r2, [r3, #0]
    uint32_t mem_address;
    memcpy(&mem_address, &pBuffer[2], 4);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	1c99      	adds	r1, r3, #2
 800075c:	2310      	movs	r3, #16
 800075e:	18fb      	adds	r3, r7, r3
 8000760:	2204      	movs	r2, #4
 8000762:	0018      	movs	r0, r3
 8000764:	f003 f90e 	bl	8003984 <memcpy>

    bootloader_send_ack(pBuffer[0], 1);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2101      	movs	r1, #1
 800076e:	0018      	movs	r0, r3
 8000770:	f000 f822 	bl	80007b8 <bootloader_send_ack>

    uint8_t write_status = (verify_address(mem_address) == ADDR_VALID)
 8000774:	693b      	ldr	r3, [r7, #16]
 8000776:	0018      	movs	r0, r3
 8000778:	f000 f85e 	bl	8000838 <verify_address>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d10a      	bne.n	8000796 <bootloader_handle_mem_write_cmd+0x6a>
        ? execute_mem_write(&pBuffer[7], mem_address, payload_len)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	1dd8      	adds	r0, r3, #7
 8000784:	6939      	ldr	r1, [r7, #16]
 8000786:	193b      	adds	r3, r7, r4
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	001a      	movs	r2, r3
 800078c:	f000 f8b3 	bl	80008f6 <execute_mem_write>
 8000790:	0003      	movs	r3, r0
 8000792:	001a      	movs	r2, r3
 8000794:	e000      	b.n	8000798 <bootloader_handle_mem_write_cmd+0x6c>
    uint8_t write_status = (verify_address(mem_address) == ADDR_VALID)
 8000796:	2201      	movs	r2, #1
 8000798:	210f      	movs	r1, #15
 800079a:	187b      	adds	r3, r7, r1
 800079c:	701a      	strb	r2, [r3, #0]
        : ADDR_INVALID;

    bootloader_uart_write_data(&write_status, 1);
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2101      	movs	r1, #1
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 f826 	bl	80007f4 <bootloader_uart_write_data>
 80007a8:	e000      	b.n	80007ac <bootloader_handle_mem_write_cmd+0x80>
    if (len < 7) return;
 80007aa:	46c0      	nop			@ (mov r8, r8)
}
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b007      	add	sp, #28
 80007b0:	bd90      	pop	{r4, r7, pc}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	08003a3c 	.word	0x08003a3c

080007b8 <bootloader_send_ack>:

void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	0002      	movs	r2, r0
 80007c0:	1dfb      	adds	r3, r7, #7
 80007c2:	701a      	strb	r2, [r3, #0]
 80007c4:	1dbb      	adds	r3, r7, #6
 80007c6:	1c0a      	adds	r2, r1, #0
 80007c8:	701a      	strb	r2, [r3, #0]
    uint8_t ack_buf[2] = { BL_ACK, follow_len };
 80007ca:	210c      	movs	r1, #12
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	22a5      	movs	r2, #165	@ 0xa5
 80007d0:	701a      	strb	r2, [r3, #0]
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	1dba      	adds	r2, r7, #6
 80007d6:	7812      	ldrb	r2, [r2, #0]
 80007d8:	705a      	strb	r2, [r3, #1]
    HAL_UART_Transmit(C_UART, ack_buf, 2, HAL_MAX_DELAY);
 80007da:	2301      	movs	r3, #1
 80007dc:	425b      	negs	r3, r3
 80007de:	1879      	adds	r1, r7, r1
 80007e0:	4803      	ldr	r0, [pc, #12]	@ (80007f0 <bootloader_send_ack+0x38>)
 80007e2:	2202      	movs	r2, #2
 80007e4:	f002 fa4e 	bl	8002c84 <HAL_UART_Transmit>
}
 80007e8:	46c0      	nop			@ (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b004      	add	sp, #16
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000114 	.word	0x20000114

080007f4 <bootloader_uart_write_data>:
    uint8_t nack = BL_NACK;
    HAL_UART_Transmit(C_UART, &nack, 1, HAL_MAX_DELAY);
}

void bootloader_uart_write_data(uint8_t *pBuffer, uint32_t len)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(C_UART, pBuffer, len, HAL_MAX_DELAY);
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	b29a      	uxth	r2, r3
 8000802:	2301      	movs	r3, #1
 8000804:	425b      	negs	r3, r3
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	4803      	ldr	r0, [pc, #12]	@ (8000818 <bootloader_uart_write_data+0x24>)
 800080a:	f002 fa3b 	bl	8002c84 <HAL_UART_Transmit>
}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b002      	add	sp, #8
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	20000114 	.word	0x20000114

0800081c <get_mcu_chip_id>:

uint16_t get_mcu_chip_id(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    return (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8000820:	4b04      	ldr	r3, [pc, #16]	@ (8000834 <get_mcu_chip_id+0x18>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	b29b      	uxth	r3, r3
 8000826:	051b      	lsls	r3, r3, #20
 8000828:	0d1b      	lsrs	r3, r3, #20
 800082a:	b29b      	uxth	r3, r3
}
 800082c:	0018      	movs	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	40015800 	.word	0x40015800

08000838 <verify_address>:


uint8_t verify_address(uint32_t go_address)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    return ((go_address >= SRAM1_BASE && go_address < SRAM1_END) ||
            (go_address >= FLASH_BASE && go_address < FLASH_END))
            ? ADDR_VALID : ADDR_INVALID;
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	2380      	movs	r3, #128	@ 0x80
 8000844:	059b      	lsls	r3, r3, #22
 8000846:	429a      	cmp	r2, r3
 8000848:	d303      	bcc.n	8000852 <verify_address+0x1a>
    return ((go_address >= SRAM1_BASE && go_address < SRAM1_END) ||
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a0d      	ldr	r2, [pc, #52]	@ (8000884 <verify_address+0x4c>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d911      	bls.n	8000876 <verify_address+0x3e>
            ? ADDR_VALID : ADDR_INVALID;
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	2380      	movs	r3, #128	@ 0x80
 8000856:	051b      	lsls	r3, r3, #20
 8000858:	429a      	cmp	r2, r3
 800085a:	d30a      	bcc.n	8000872 <verify_address+0x3a>
            (go_address >= FLASH_BASE && go_address < FLASH_END))
 800085c:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <verify_address+0x50>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	041b      	lsls	r3, r3, #16
 8000862:	0c1b      	lsrs	r3, r3, #16
 8000864:	029b      	lsls	r3, r3, #10
 8000866:	4a09      	ldr	r2, [pc, #36]	@ (800088c <verify_address+0x54>)
 8000868:	4694      	mov	ip, r2
 800086a:	4463      	add	r3, ip
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	429a      	cmp	r2, r3
 8000870:	d301      	bcc.n	8000876 <verify_address+0x3e>
            ? ADDR_VALID : ADDR_INVALID;
 8000872:	2301      	movs	r3, #1
 8000874:	e000      	b.n	8000878 <verify_address+0x40>
 8000876:	2300      	movs	r3, #0
 8000878:	b2db      	uxtb	r3, r3
}
 800087a:	0018      	movs	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	b002      	add	sp, #8
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	20004fff 	.word	0x20004fff
 8000888:	1ff8007c 	.word	0x1ff8007c
 800088c:	07ffffff 	.word	0x07ffffff

08000890 <execute_flash_erase>:

uint8_t execute_flash_erase(uint8_t page_number, uint16_t number_of_pages)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b087      	sub	sp, #28
 8000894:	af00      	add	r7, sp, #0
 8000896:	0002      	movs	r2, r0
 8000898:	1dfb      	adds	r3, r7, #7
 800089a:	701a      	strb	r2, [r3, #0]
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	1c0a      	adds	r2, r1, #0
 80008a0:	801a      	strh	r2, [r3, #0]
    FLASH_EraseInitTypeDef flashErase_handle;
    uint32_t pageError;

    if (number_of_pages > 512) return INVALID_SECTOR;
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	881a      	ldrh	r2, [r3, #0]
 80008a6:	2380      	movs	r3, #128	@ 0x80
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d901      	bls.n	80008b2 <execute_flash_erase+0x22>
 80008ae:	2304      	movs	r3, #4
 80008b0:	e01d      	b.n	80008ee <execute_flash_erase+0x5e>

    flashErase_handle.TypeErase = FLASH_TYPEERASE_PAGES;
 80008b2:	210c      	movs	r1, #12
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
    flashErase_handle.PageAddress = FLASH_BASE + ((uint32_t)page_number * 128);
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2280      	movs	r2, #128	@ 0x80
 80008c0:	0352      	lsls	r2, r2, #13
 80008c2:	4694      	mov	ip, r2
 80008c4:	4463      	add	r3, ip
 80008c6:	01da      	lsls	r2, r3, #7
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	605a      	str	r2, [r3, #4]
    flashErase_handle.NbPages = number_of_pages;
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	881a      	ldrh	r2, [r3, #0]
 80008d0:	000c      	movs	r4, r1
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	609a      	str	r2, [r3, #8]

    HAL_FLASH_Unlock();
 80008d6:	f000 fdb1 	bl	800143c <HAL_FLASH_Unlock>
    HAL_FLASHEx_Erase(&flashErase_handle, &pageError);
 80008da:	2308      	movs	r3, #8
 80008dc:	18fa      	adds	r2, r7, r3
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	0011      	movs	r1, r2
 80008e2:	0018      	movs	r0, r3
 80008e4:	f000 ff20 	bl	8001728 <HAL_FLASHEx_Erase>
    HAL_FLASH_Lock();
 80008e8:	f000 fdfc 	bl	80014e4 <HAL_FLASH_Lock>

    return HAL_OK;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	0018      	movs	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b007      	add	sp, #28
 80008f4:	bd90      	pop	{r4, r7, pc}

080008f6 <execute_mem_write>:

uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 80008f6:	b5b0      	push	{r4, r5, r7, lr}
 80008f8:	b088      	sub	sp, #32
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	60f8      	str	r0, [r7, #12]
 80008fe:	60b9      	str	r1, [r7, #8]
 8000900:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8000902:	231f      	movs	r3, #31
 8000904:	18fb      	adds	r3, r7, r3
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
    uint32_t padded_len = (len + 3) & ~0x03;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3303      	adds	r3, #3
 800090e:	2203      	movs	r2, #3
 8000910:	4393      	bics	r3, r2
 8000912:	617b      	str	r3, [r7, #20]

    HAL_FLASH_Unlock();
 8000914:	f000 fd92 	bl	800143c <HAL_FLASH_Unlock>
    for (uint32_t i = 0; i < padded_len; i += 4)
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]
 800091c:	e053      	b.n	80009c6 <execute_mem_write+0xd0>
    {
        uint32_t word = 0xFFFFFFFF;
 800091e:	2301      	movs	r3, #1
 8000920:	425b      	negs	r3, r3
 8000922:	613b      	str	r3, [r7, #16]
        word  = (i + 0 < len ? pBuffer[i + 0] : 0xFF);
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	429a      	cmp	r2, r3
 800092a:	d204      	bcs.n	8000936 <execute_mem_write+0x40>
 800092c:	68fa      	ldr	r2, [r7, #12]
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	18d3      	adds	r3, r2, r3
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	e000      	b.n	8000938 <execute_mem_write+0x42>
 8000936:	23ff      	movs	r3, #255	@ 0xff
 8000938:	613b      	str	r3, [r7, #16]
        word |= (i + 1 < len ? pBuffer[i + 1] : 0xFF) << 8;
 800093a:	69bb      	ldr	r3, [r7, #24]
 800093c:	3301      	adds	r3, #1
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	429a      	cmp	r2, r3
 8000942:	d906      	bls.n	8000952 <execute_mem_write+0x5c>
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	3301      	adds	r3, #1
 8000948:	68fa      	ldr	r2, [r7, #12]
 800094a:	18d3      	adds	r3, r2, r3
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	021b      	lsls	r3, r3, #8
 8000950:	e001      	b.n	8000956 <execute_mem_write+0x60>
 8000952:	23ff      	movs	r3, #255	@ 0xff
 8000954:	021b      	lsls	r3, r3, #8
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4313      	orrs	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        word |= (i + 2 < len ? pBuffer[i + 2] : 0xFF) << 16;
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	3302      	adds	r3, #2
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	429a      	cmp	r2, r3
 8000964:	d906      	bls.n	8000974 <execute_mem_write+0x7e>
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	3302      	adds	r3, #2
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	18d3      	adds	r3, r2, r3
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	041b      	lsls	r3, r3, #16
 8000972:	e001      	b.n	8000978 <execute_mem_write+0x82>
 8000974:	23ff      	movs	r3, #255	@ 0xff
 8000976:	041b      	lsls	r3, r3, #16
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	4313      	orrs	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
        word |= (i + 3 < len ? pBuffer[i + 3] : 0xFF) << 24;
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	3303      	adds	r3, #3
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	429a      	cmp	r2, r3
 8000986:	d906      	bls.n	8000996 <execute_mem_write+0xa0>
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	3303      	adds	r3, #3
 800098c:	68fa      	ldr	r2, [r7, #12]
 800098e:	18d3      	adds	r3, r2, r3
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	061b      	lsls	r3, r3, #24
 8000994:	e001      	b.n	800099a <execute_mem_write+0xa4>
 8000996:	23ff      	movs	r3, #255	@ 0xff
 8000998:	061b      	lsls	r3, r3, #24
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4313      	orrs	r3, r2
 800099e:	613b      	str	r3, [r7, #16]

        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, mem_address + i, word);
 80009a0:	68ba      	ldr	r2, [r7, #8]
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	18d3      	adds	r3, r2, r3
 80009a6:	251f      	movs	r5, #31
 80009a8:	197c      	adds	r4, r7, r5
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	0019      	movs	r1, r3
 80009ae:	2002      	movs	r0, #2
 80009b0:	f000 fd0c 	bl	80013cc <HAL_FLASH_Program>
 80009b4:	0003      	movs	r3, r0
 80009b6:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK) break;
 80009b8:	197b      	adds	r3, r7, r5
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d107      	bne.n	80009d0 <execute_mem_write+0xda>
    for (uint32_t i = 0; i < padded_len; i += 4)
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	3304      	adds	r3, #4
 80009c4:	61bb      	str	r3, [r7, #24]
 80009c6:	69ba      	ldr	r2, [r7, #24]
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d3a7      	bcc.n	800091e <execute_mem_write+0x28>
 80009ce:	e000      	b.n	80009d2 <execute_mem_write+0xdc>
        if (status != HAL_OK) break;
 80009d0:	46c0      	nop			@ (mov r8, r8)
    }
    HAL_FLASH_Lock();
 80009d2:	f000 fd87 	bl	80014e4 <HAL_FLASH_Lock>
    return status;
 80009d6:	231f      	movs	r3, #31
 80009d8:	18fb      	adds	r3, r7, r3
 80009da:	781b      	ldrb	r3, [r3, #0]
}
 80009dc:	0018      	movs	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	b008      	add	sp, #32
 80009e2:	bdb0      	pop	{r4, r5, r7, pc}

080009e4 <bootloader_main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void bootloader_main(void)
{
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 80009ea:	2380      	movs	r3, #128	@ 0x80
 80009ec:	019b      	lsls	r3, r3, #6
 80009ee:	4a19      	ldr	r2, [pc, #100]	@ (8000a54 <bootloader_main+0x70>)
 80009f0:	0019      	movs	r1, r3
 80009f2:	0010      	movs	r0, r2
 80009f4:	f001 f89a 	bl	8001b2c <HAL_GPIO_ReadPin>
 80009f8:	1e03      	subs	r3, r0, #0
 80009fa:	d106      	bne.n	8000a0a <bootloader_main+0x26>
	{
		debug_puts("button pressed...entering the bootloader mode");
 80009fc:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <bootloader_main+0x74>)
 80009fe:	0018      	movs	r0, r3
 8000a00:	f7ff fd36 	bl	8000470 <debug_puts>
		bootloader_uart_read_data();
 8000a04:	f7ff fd56 	bl	80004b4 <bootloader_uart_read_data>
		{
			debug_puts("No BOOT_CMD: Jumping to application");
			bootloader_jump_to_user_app();
		}
	}
}
 8000a08:	e020      	b.n	8000a4c <bootloader_main+0x68>
		uint8_t rx_byte = 0;
 8000a0a:	1dbb      	adds	r3, r7, #6
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
		status = HAL_UART_Receive(&huart1, &rx_byte, 1, UART_TIMEOUT_MS);
 8000a10:	1dfc      	adds	r4, r7, #7
 8000a12:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <bootloader_main+0x78>)
 8000a14:	1db9      	adds	r1, r7, #6
 8000a16:	4812      	ldr	r0, [pc, #72]	@ (8000a60 <bootloader_main+0x7c>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f002 f9d3 	bl	8002dc4 <HAL_UART_Receive>
 8000a1e:	0003      	movs	r3, r0
 8000a20:	7023      	strb	r3, [r4, #0]
		if (status == HAL_OK && rx_byte == BOOT_CMD)
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d10a      	bne.n	8000a40 <bootloader_main+0x5c>
 8000a2a:	1dbb      	adds	r3, r7, #6
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b50      	cmp	r3, #80	@ 0x50
 8000a30:	d106      	bne.n	8000a40 <bootloader_main+0x5c>
			debug_puts("BOOT_CMD received: Entering bootloader mode");
 8000a32:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <bootloader_main+0x80>)
 8000a34:	0018      	movs	r0, r3
 8000a36:	f7ff fd1b 	bl	8000470 <debug_puts>
			bootloader_uart_read_data();
 8000a3a:	f7ff fd3b 	bl	80004b4 <bootloader_uart_read_data>
}
 8000a3e:	e005      	b.n	8000a4c <bootloader_main+0x68>
			debug_puts("No BOOT_CMD: Jumping to application");
 8000a40:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <bootloader_main+0x84>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f7ff fd14 	bl	8000470 <debug_puts>
			bootloader_jump_to_user_app();
 8000a48:	f7ff fd84 	bl	8000554 <bootloader_jump_to_user_app>
}
 8000a4c:	46c0      	nop			@ (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b003      	add	sp, #12
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	50000800 	.word	0x50000800
 8000a58:	08003a5c 	.word	0x08003a5c
 8000a5c:	00000bb8 	.word	0x00000bb8
 8000a60:	20000114 	.word	0x20000114
 8000a64:	08003a8c 	.word	0x08003a8c
 8000a68:	08003ab8 	.word	0x08003ab8

08000a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a70:	f000 fa5c 	bl	8000f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a74:	f000 f812 	bl	8000a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a78:	f000 f90a 	bl	8000c90 <MX_GPIO_Init>
  MX_CRC_Init();
 8000a7c:	f000 f884 	bl	8000b88 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000a80:	f000 f8a6 	bl	8000bd0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a84:	f000 f8d4 	bl	8000c30 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  debug_puts("Bootloader running...");
 8000a88:	4b03      	ldr	r3, [pc, #12]	@ (8000a98 <main+0x2c>)
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f7ff fcf0 	bl	8000470 <debug_puts>
  bootloader_main();
 8000a90:	f7ff ffa8 	bl	80009e4 <bootloader_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a94:	46c0      	nop			@ (mov r8, r8)
 8000a96:	e7fd      	b.n	8000a94 <main+0x28>
 8000a98:	08003adc 	.word	0x08003adc

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b09f      	sub	sp, #124	@ 0x7c
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	2440      	movs	r4, #64	@ 0x40
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	2338      	movs	r3, #56	@ 0x38
 8000aaa:	001a      	movs	r2, r3
 8000aac:	2100      	movs	r1, #0
 8000aae:	f002 ff3d 	bl	800392c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab2:	232c      	movs	r3, #44	@ 0x2c
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	2314      	movs	r3, #20
 8000aba:	001a      	movs	r2, r3
 8000abc:	2100      	movs	r1, #0
 8000abe:	f002 ff35 	bl	800392c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	2328      	movs	r3, #40	@ 0x28
 8000ac8:	001a      	movs	r2, r3
 8000aca:	2100      	movs	r1, #0
 8000acc:	f002 ff2e 	bl	800392c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8000b80 <SystemClock_Config+0xe4>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a2b      	ldr	r2, [pc, #172]	@ (8000b84 <SystemClock_Config+0xe8>)
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	4b29      	ldr	r3, [pc, #164]	@ (8000b80 <SystemClock_Config+0xe4>)
 8000ada:	2180      	movs	r1, #128	@ 0x80
 8000adc:	0109      	lsls	r1, r1, #4
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae2:	0021      	movs	r1, r4
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2201      	movs	r2, #1
 8000aee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2210      	movs	r2, #16
 8000af4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2202      	movs	r2, #2
 8000afa:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2200      	movs	r2, #0
 8000b00:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2280      	movs	r2, #128	@ 0x80
 8000b06:	02d2      	lsls	r2, r2, #11
 8000b08:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2280      	movs	r2, #128	@ 0x80
 8000b0e:	03d2      	lsls	r2, r2, #15
 8000b10:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	0018      	movs	r0, r3
 8000b16:	f001 f8eb 	bl	8001cf0 <HAL_RCC_OscConfig>
 8000b1a:	1e03      	subs	r3, r0, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000b1e:	f000 f90d 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	212c      	movs	r1, #44	@ 0x2c
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	220f      	movs	r2, #15
 8000b28:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2101      	movs	r1, #1
 8000b46:	0018      	movs	r0, r3
 8000b48:	f001 fca6 	bl	8002498 <HAL_RCC_ClockConfig>
 8000b4c:	1e03      	subs	r3, r0, #0
 8000b4e:	d001      	beq.n	8000b54 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000b50:	f000 f8f4 	bl	8000d3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2203      	movs	r2, #3
 8000b58:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f001 fe99 	bl	80028a0 <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	1e03      	subs	r3, r0, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000b72:	f000 f8e3 	bl	8000d3c <Error_Handler>
  }
}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b01f      	add	sp, #124	@ 0x7c
 8000b7c:	bd90      	pop	{r4, r7, pc}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	40007000 	.word	0x40007000
 8000b84:	ffffe7ff 	.word	0xffffe7ff

08000b88 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <MX_CRC_Init+0x40>)
 8000b8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bcc <MX_CRC_Init+0x44>)
 8000b90:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000b92:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc8 <MX_CRC_Init+0x40>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000b98:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <MX_CRC_Init+0x40>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <MX_CRC_Init+0x40>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <MX_CRC_Init+0x40>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000baa:	4b07      	ldr	r3, [pc, #28]	@ (8000bc8 <MX_CRC_Init+0x40>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000bb0:	4b05      	ldr	r3, [pc, #20]	@ (8000bc8 <MX_CRC_Init+0x40>)
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f000 fb2e 	bl	8001214 <HAL_CRC_Init>
 8000bb8:	1e03      	subs	r3, r0, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000bbc:	f000 f8be 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000bc0:	46c0      	nop			@ (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	200000f0 	.word	0x200000f0
 8000bcc:	40023000 	.word	0x40023000

08000bd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bd6:	4a15      	ldr	r2, [pc, #84]	@ (8000c2c <MX_USART1_UART_Init+0x5c>)
 8000bd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bda:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bdc:	22e1      	movs	r2, #225	@ 0xe1
 8000bde:	0252      	lsls	r2, r2, #9
 8000be0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c00:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c12:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <MX_USART1_UART_Init+0x58>)
 8000c14:	0018      	movs	r0, r3
 8000c16:	f001 ffe1 	bl	8002bdc <HAL_UART_Init>
 8000c1a:	1e03      	subs	r3, r0, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c1e:	f000 f88d 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c22:	46c0      	nop			@ (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000114 	.word	0x20000114
 8000c2c:	40013800 	.word	0x40013800

08000c30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c34:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c36:	4a15      	ldr	r2, [pc, #84]	@ (8000c8c <MX_USART2_UART_Init+0x5c>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c3c:	22e1      	movs	r2, #225	@ 0xe1
 8000c3e:	0252      	lsls	r2, r2, #9
 8000c40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c72:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <MX_USART2_UART_Init+0x58>)
 8000c74:	0018      	movs	r0, r3
 8000c76:	f001 ffb1 	bl	8002bdc <HAL_UART_Init>
 8000c7a:	1e03      	subs	r3, r0, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c7e:	f000 f85d 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	2000019c 	.word	0x2000019c
 8000c8c:	40004400 	.word	0x40004400

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b590      	push	{r4, r7, lr}
 8000c92:	b089      	sub	sp, #36	@ 0x24
 8000c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	240c      	movs	r4, #12
 8000c98:	193b      	adds	r3, r7, r4
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	2314      	movs	r3, #20
 8000c9e:	001a      	movs	r2, r3
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	f002 fe43 	bl	800392c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	4b23      	ldr	r3, [pc, #140]	@ (8000d34 <MX_GPIO_Init+0xa4>)
 8000ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000caa:	4b22      	ldr	r3, [pc, #136]	@ (8000d34 <MX_GPIO_Init+0xa4>)
 8000cac:	2104      	movs	r1, #4
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000cb2:	4b20      	ldr	r3, [pc, #128]	@ (8000d34 <MX_GPIO_Init+0xa4>)
 8000cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <MX_GPIO_Init+0xa4>)
 8000cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <MX_GPIO_Init+0xa4>)
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000cca:	4b1a      	ldr	r3, [pc, #104]	@ (8000d34 <MX_GPIO_Init+0xa4>)
 8000ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cd6:	23a0      	movs	r3, #160	@ 0xa0
 8000cd8:	05db      	lsls	r3, r3, #23
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2120      	movs	r1, #32
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f000 ff41 	bl	8001b66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce4:	193b      	adds	r3, r7, r4
 8000ce6:	2280      	movs	r2, #128	@ 0x80
 8000ce8:	0192      	lsls	r2, r2, #6
 8000cea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cec:	193b      	adds	r3, r7, r4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	193b      	adds	r3, r7, r4
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	193b      	adds	r3, r7, r4
 8000cfa:	4a0f      	ldr	r2, [pc, #60]	@ (8000d38 <MX_GPIO_Init+0xa8>)
 8000cfc:	0019      	movs	r1, r3
 8000cfe:	0010      	movs	r0, r2
 8000d00:	f000 fd96 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d04:	0021      	movs	r1, r4
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	2220      	movs	r2, #32
 8000d0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	2201      	movs	r2, #1
 8000d10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	187a      	adds	r2, r7, r1
 8000d20:	23a0      	movs	r3, #160	@ 0xa0
 8000d22:	05db      	lsls	r3, r3, #23
 8000d24:	0011      	movs	r1, r2
 8000d26:	0018      	movs	r0, r3
 8000d28:	f000 fd82 	bl	8001830 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d2c:	46c0      	nop			@ (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b009      	add	sp, #36	@ 0x24
 8000d32:	bd90      	pop	{r4, r7, pc}
 8000d34:	40021000 	.word	0x40021000
 8000d38:	50000800 	.word	0x50000800

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	46c0      	nop			@ (mov r8, r8)
 8000d46:	e7fd      	b.n	8000d44 <Error_Handler+0x8>

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4c:	4b07      	ldr	r3, [pc, #28]	@ (8000d6c <HAL_MspInit+0x24>)
 8000d4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_MspInit+0x24>)
 8000d52:	2101      	movs	r1, #1
 8000d54:	430a      	orrs	r2, r1
 8000d56:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <HAL_MspInit+0x24>)
 8000d5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d5c:	4b03      	ldr	r3, [pc, #12]	@ (8000d6c <HAL_MspInit+0x24>)
 8000d5e:	2180      	movs	r1, #128	@ 0x80
 8000d60:	0549      	lsls	r1, r1, #21
 8000d62:	430a      	orrs	r2, r1
 8000d64:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40021000 	.word	0x40021000

08000d70 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <HAL_CRC_MspInit+0x38>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d10d      	bne.n	8000d9e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <HAL_CRC_MspInit+0x3c>)
 8000d84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <HAL_CRC_MspInit+0x3c>)
 8000d88:	2180      	movs	r1, #128	@ 0x80
 8000d8a:	0149      	lsls	r1, r1, #5
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <HAL_CRC_MspInit+0x3c>)
 8000d92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d94:	2380      	movs	r3, #128	@ 0x80
 8000d96:	015b      	lsls	r3, r3, #5
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b004      	add	sp, #16
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	46c0      	nop			@ (mov r8, r8)
 8000da8:	40023000 	.word	0x40023000
 8000dac:	40021000 	.word	0x40021000

08000db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b08b      	sub	sp, #44	@ 0x2c
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	2414      	movs	r4, #20
 8000dba:	193b      	adds	r3, r7, r4
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	2314      	movs	r3, #20
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	f002 fdb2 	bl	800392c <memset>
  if(huart->Instance==USART1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a30      	ldr	r2, [pc, #192]	@ (8000e90 <HAL_UART_MspInit+0xe0>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d12b      	bne.n	8000e2a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dd2:	4b30      	ldr	r3, [pc, #192]	@ (8000e94 <HAL_UART_MspInit+0xe4>)
 8000dd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8000e94 <HAL_UART_MspInit+0xe4>)
 8000dd8:	2180      	movs	r1, #128	@ 0x80
 8000dda:	01c9      	lsls	r1, r1, #7
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e94 <HAL_UART_MspInit+0xe4>)
 8000de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000de4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e94 <HAL_UART_MspInit+0xe4>)
 8000de6:	2101      	movs	r1, #1
 8000de8:	430a      	orrs	r2, r1
 8000dea:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000dec:	4b29      	ldr	r3, [pc, #164]	@ (8000e94 <HAL_UART_MspInit+0xe4>)
 8000dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df0:	2201      	movs	r2, #1
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000df8:	193b      	adds	r3, r7, r4
 8000dfa:	22c0      	movs	r2, #192	@ 0xc0
 8000dfc:	00d2      	lsls	r2, r2, #3
 8000dfe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	0021      	movs	r1, r4
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	2202      	movs	r2, #2
 8000e06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2203      	movs	r2, #3
 8000e12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2204      	movs	r2, #4
 8000e18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	187a      	adds	r2, r7, r1
 8000e1c:	23a0      	movs	r3, #160	@ 0xa0
 8000e1e:	05db      	lsls	r3, r3, #23
 8000e20:	0011      	movs	r1, r2
 8000e22:	0018      	movs	r0, r3
 8000e24:	f000 fd04 	bl	8001830 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e28:	e02e      	b.n	8000e88 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a1a      	ldr	r2, [pc, #104]	@ (8000e98 <HAL_UART_MspInit+0xe8>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d129      	bne.n	8000e88 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <HAL_UART_MspInit+0xe4>)
 8000e36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e38:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <HAL_UART_MspInit+0xe4>)
 8000e3a:	2180      	movs	r1, #128	@ 0x80
 8000e3c:	0289      	lsls	r1, r1, #10
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <HAL_UART_MspInit+0xe4>)
 8000e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <HAL_UART_MspInit+0xe4>)
 8000e48:	2101      	movs	r1, #1
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e4e:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <HAL_UART_MspInit+0xe4>)
 8000e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e52:	2201      	movs	r2, #1
 8000e54:	4013      	ands	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e5a:	2114      	movs	r1, #20
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	220c      	movs	r2, #12
 8000e60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	2202      	movs	r2, #2
 8000e66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	2203      	movs	r2, #3
 8000e72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2204      	movs	r2, #4
 8000e78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	187a      	adds	r2, r7, r1
 8000e7c:	23a0      	movs	r3, #160	@ 0xa0
 8000e7e:	05db      	lsls	r3, r3, #23
 8000e80:	0011      	movs	r1, r2
 8000e82:	0018      	movs	r0, r3
 8000e84:	f000 fcd4 	bl	8001830 <HAL_GPIO_Init>
}
 8000e88:	46c0      	nop			@ (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b00b      	add	sp, #44	@ 0x2c
 8000e8e:	bd90      	pop	{r4, r7, pc}
 8000e90:	40013800 	.word	0x40013800
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40004400 	.word	0x40004400

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea0:	46c0      	nop			@ (mov r8, r8)
 8000ea2:	e7fd      	b.n	8000ea0 <NMI_Handler+0x4>

08000ea4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea8:	46c0      	nop			@ (mov r8, r8)
 8000eaa:	e7fd      	b.n	8000ea8 <HardFault_Handler+0x4>

08000eac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000eb0:	46c0      	nop			@ (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec4:	f000 f8b2 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec8:	46c0      	nop			@ (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed2:	46c0      	nop			@ (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ed8:	480d      	ldr	r0, [pc, #52]	@ (8000f10 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000eda:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000edc:	f7ff fff7 	bl	8000ece <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee0:	480c      	ldr	r0, [pc, #48]	@ (8000f14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ee2:	490d      	ldr	r1, [pc, #52]	@ (8000f18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f1c <LoopForever+0xe>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee8:	e002      	b.n	8000ef0 <LoopCopyDataInit>

08000eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eee:	3304      	adds	r3, #4

08000ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef4:	d3f9      	bcc.n	8000eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ef8:	4c0a      	ldr	r4, [pc, #40]	@ (8000f24 <LoopForever+0x16>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000efc:	e001      	b.n	8000f02 <LoopFillZerobss>

08000efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f00:	3204      	adds	r2, #4

08000f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f04:	d3fb      	bcc.n	8000efe <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000f06:	f002 fd19 	bl	800393c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0a:	f7ff fdaf 	bl	8000a6c <main>

08000f0e <LoopForever>:

LoopForever:
    b LoopForever
 8000f0e:	e7fe      	b.n	8000f0e <LoopForever>
   ldr   r0, =_estack
 8000f10:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f1c:	08003b70 	.word	0x08003b70
  ldr r2, =_sbss
 8000f20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f24:	20000240 	.word	0x20000240

08000f28 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC1_COMP_IRQHandler>
	...

08000f2c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000f38:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <HAL_Init+0x3c>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <HAL_Init+0x3c>)
 8000f3e:	2140      	movs	r1, #64	@ 0x40
 8000f40:	430a      	orrs	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f83d 	bl	8000fc4 <HAL_InitTick>
 8000f4a:	1e03      	subs	r3, r0, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000f4e:	1dfb      	adds	r3, r7, #7
 8000f50:	2201      	movs	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]
 8000f54:	e001      	b.n	8000f5a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f56:	f7ff fef7 	bl	8000d48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	781b      	ldrb	r3, [r3, #0]
}
 8000f5e:	0018      	movs	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b002      	add	sp, #8
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	46c0      	nop			@ (mov r8, r8)
 8000f68:	40022000 	.word	0x40022000

08000f6c <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000f70:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <HAL_DeInit+0x48>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	4252      	negs	r2, r2
 8000f76:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_APB1_RELEASE_RESET();
 8000f78:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <HAL_DeInit+0x48>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	629a      	str	r2, [r3, #40]	@ 0x28

  __HAL_RCC_APB2_FORCE_RESET();
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb4 <HAL_DeInit+0x48>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	4252      	negs	r2, r2
 8000f84:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000f86:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb4 <HAL_DeInit+0x48>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB_FORCE_RESET();
 8000f8c:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <HAL_DeInit+0x48>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4252      	negs	r2, r2
 8000f92:	621a      	str	r2, [r3, #32]
  __HAL_RCC_AHB_RELEASE_RESET();
 8000f94:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <HAL_DeInit+0x48>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]

  __HAL_RCC_IOP_FORCE_RESET();
 8000f9a:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <HAL_DeInit+0x48>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4252      	negs	r2, r2
 8000fa0:	61da      	str	r2, [r3, #28]
  __HAL_RCC_IOP_RELEASE_RESET();
 8000fa2:	4b04      	ldr	r3, [pc, #16]	@ (8000fb4 <HAL_DeInit+0x48>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	61da      	str	r2, [r3, #28]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000fa8:	f000 f806 	bl	8000fb8 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	0018      	movs	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000fbc:	46c0      	nop			@ (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fcc:	4b14      	ldr	r3, [pc, #80]	@ (8001020 <HAL_InitTick+0x5c>)
 8000fce:	681c      	ldr	r4, [r3, #0]
 8000fd0:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <HAL_InitTick+0x60>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	0019      	movs	r1, r3
 8000fd6:	23fa      	movs	r3, #250	@ 0xfa
 8000fd8:	0098      	lsls	r0, r3, #2
 8000fda:	f7ff f895 	bl	8000108 <__udivsi3>
 8000fde:	0003      	movs	r3, r0
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	0020      	movs	r0, r4
 8000fe4:	f7ff f890 	bl	8000108 <__udivsi3>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	0018      	movs	r0, r3
 8000fec:	f000 f905 	bl	80011fa <HAL_SYSTICK_Config>
 8000ff0:	1e03      	subs	r3, r0, #0
 8000ff2:	d001      	beq.n	8000ff8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e00f      	b.n	8001018 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d80b      	bhi.n	8001016 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	2301      	movs	r3, #1
 8001002:	425b      	negs	r3, r3
 8001004:	2200      	movs	r2, #0
 8001006:	0018      	movs	r0, r3
 8001008:	f000 f8e2 	bl	80011d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <HAL_InitTick+0x64>)
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	0018      	movs	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	b003      	add	sp, #12
 800101e:	bd90      	pop	{r4, r7, pc}
 8001020:	20000000 	.word	0x20000000
 8001024:	20000008 	.word	0x20000008
 8001028:	20000004 	.word	0x20000004

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <HAL_IncTick+0x1c>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	001a      	movs	r2, r3
 8001036:	4b05      	ldr	r3, [pc, #20]	@ (800104c <HAL_IncTick+0x20>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	18d2      	adds	r2, r2, r3
 800103c:	4b03      	ldr	r3, [pc, #12]	@ (800104c <HAL_IncTick+0x20>)
 800103e:	601a      	str	r2, [r3, #0]
}
 8001040:	46c0      	nop			@ (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	46c0      	nop			@ (mov r8, r8)
 8001048:	20000008 	.word	0x20000008
 800104c:	20000224 	.word	0x20000224

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b02      	ldr	r3, [pc, #8]	@ (8001060 <HAL_GetTick+0x10>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	0018      	movs	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	46c0      	nop			@ (mov r8, r8)
 8001060:	20000224 	.word	0x20000224

08001064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800106c:	f7ff fff0 	bl	8001050 <HAL_GetTick>
 8001070:	0003      	movs	r3, r0
 8001072:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3301      	adds	r3, #1
 800107c:	d005      	beq.n	800108a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107e:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <HAL_Delay+0x44>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	001a      	movs	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	189b      	adds	r3, r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	f7ff ffe0 	bl	8001050 <HAL_GetTick>
 8001090:	0002      	movs	r2, r0
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	429a      	cmp	r2, r3
 800109a:	d8f7      	bhi.n	800108c <HAL_Delay+0x28>
  {
  }
}
 800109c:	46c0      	nop			@ (mov r8, r8)
 800109e:	46c0      	nop			@ (mov r8, r8)
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b004      	add	sp, #16
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	20000008 	.word	0x20000008

080010ac <__NVIC_SetPriority>:
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	0002      	movs	r2, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	1dfb      	adds	r3, r7, #7
 80010b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010ba:	1dfb      	adds	r3, r7, #7
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b7f      	cmp	r3, #127	@ 0x7f
 80010c0:	d828      	bhi.n	8001114 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001180 <__NVIC_SetPriority+0xd4>)
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	089b      	lsrs	r3, r3, #2
 80010cc:	33c0      	adds	r3, #192	@ 0xc0
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	589b      	ldr	r3, [r3, r2]
 80010d2:	1dfa      	adds	r2, r7, #7
 80010d4:	7812      	ldrb	r2, [r2, #0]
 80010d6:	0011      	movs	r1, r2
 80010d8:	2203      	movs	r2, #3
 80010da:	400a      	ands	r2, r1
 80010dc:	00d2      	lsls	r2, r2, #3
 80010de:	21ff      	movs	r1, #255	@ 0xff
 80010e0:	4091      	lsls	r1, r2
 80010e2:	000a      	movs	r2, r1
 80010e4:	43d2      	mvns	r2, r2
 80010e6:	401a      	ands	r2, r3
 80010e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	019b      	lsls	r3, r3, #6
 80010ee:	22ff      	movs	r2, #255	@ 0xff
 80010f0:	401a      	ands	r2, r3
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	0018      	movs	r0, r3
 80010f8:	2303      	movs	r3, #3
 80010fa:	4003      	ands	r3, r0
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001100:	481f      	ldr	r0, [pc, #124]	@ (8001180 <__NVIC_SetPriority+0xd4>)
 8001102:	1dfb      	adds	r3, r7, #7
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b25b      	sxtb	r3, r3
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	430a      	orrs	r2, r1
 800110c:	33c0      	adds	r3, #192	@ 0xc0
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	501a      	str	r2, [r3, r0]
}
 8001112:	e031      	b.n	8001178 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001114:	4a1b      	ldr	r2, [pc, #108]	@ (8001184 <__NVIC_SetPriority+0xd8>)
 8001116:	1dfb      	adds	r3, r7, #7
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	0019      	movs	r1, r3
 800111c:	230f      	movs	r3, #15
 800111e:	400b      	ands	r3, r1
 8001120:	3b08      	subs	r3, #8
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	3306      	adds	r3, #6
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	18d3      	adds	r3, r2, r3
 800112a:	3304      	adds	r3, #4
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	1dfa      	adds	r2, r7, #7
 8001130:	7812      	ldrb	r2, [r2, #0]
 8001132:	0011      	movs	r1, r2
 8001134:	2203      	movs	r2, #3
 8001136:	400a      	ands	r2, r1
 8001138:	00d2      	lsls	r2, r2, #3
 800113a:	21ff      	movs	r1, #255	@ 0xff
 800113c:	4091      	lsls	r1, r2
 800113e:	000a      	movs	r2, r1
 8001140:	43d2      	mvns	r2, r2
 8001142:	401a      	ands	r2, r3
 8001144:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	019b      	lsls	r3, r3, #6
 800114a:	22ff      	movs	r2, #255	@ 0xff
 800114c:	401a      	ands	r2, r3
 800114e:	1dfb      	adds	r3, r7, #7
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	0018      	movs	r0, r3
 8001154:	2303      	movs	r3, #3
 8001156:	4003      	ands	r3, r0
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800115c:	4809      	ldr	r0, [pc, #36]	@ (8001184 <__NVIC_SetPriority+0xd8>)
 800115e:	1dfb      	adds	r3, r7, #7
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	001c      	movs	r4, r3
 8001164:	230f      	movs	r3, #15
 8001166:	4023      	ands	r3, r4
 8001168:	3b08      	subs	r3, #8
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	430a      	orrs	r2, r1
 800116e:	3306      	adds	r3, #6
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	18c3      	adds	r3, r0, r3
 8001174:	3304      	adds	r3, #4
 8001176:	601a      	str	r2, [r3, #0]
}
 8001178:	46c0      	nop			@ (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	b003      	add	sp, #12
 800117e:	bd90      	pop	{r4, r7, pc}
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	1e5a      	subs	r2, r3, #1
 8001194:	2380      	movs	r3, #128	@ 0x80
 8001196:	045b      	lsls	r3, r3, #17
 8001198:	429a      	cmp	r2, r3
 800119a:	d301      	bcc.n	80011a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119c:	2301      	movs	r3, #1
 800119e:	e010      	b.n	80011c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a0:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <SysTick_Config+0x44>)
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	3a01      	subs	r2, #1
 80011a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a8:	2301      	movs	r3, #1
 80011aa:	425b      	negs	r3, r3
 80011ac:	2103      	movs	r1, #3
 80011ae:	0018      	movs	r0, r3
 80011b0:	f7ff ff7c 	bl	80010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <SysTick_Config+0x44>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ba:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <SysTick_Config+0x44>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	0018      	movs	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b002      	add	sp, #8
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	46c0      	nop			@ (mov r8, r8)
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	210f      	movs	r1, #15
 80011dc:	187b      	adds	r3, r7, r1
 80011de:	1c02      	adds	r2, r0, #0
 80011e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	187b      	adds	r3, r7, r1
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b25b      	sxtb	r3, r3
 80011ea:	0011      	movs	r1, r2
 80011ec:	0018      	movs	r0, r3
 80011ee:	f7ff ff5d 	bl	80010ac <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80011f2:	46c0      	nop			@ (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b004      	add	sp, #16
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	0018      	movs	r0, r3
 8001206:	f7ff ffbf 	bl	8001188 <SysTick_Config>
 800120a:	0003      	movs	r3, r0
}
 800120c:	0018      	movs	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e056      	b.n	80012d4 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	7f5b      	ldrb	r3, [r3, #29]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d106      	bne.n	800123e <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	0018      	movs	r0, r3
 800123a:	f7ff fd99 	bl	8000d70 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2202      	movs	r2, #2
 8001242:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	791b      	ldrb	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d10c      	bne.n	8001266 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a22      	ldr	r2, [pc, #136]	@ (80012dc <HAL_CRC_Init+0xc8>)
 8001252:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2118      	movs	r1, #24
 8001260:	438a      	bics	r2, r1
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	e00b      	b.n	800127e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6899      	ldr	r1, [r3, #8]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	0018      	movs	r0, r3
 8001272:	f000 f835 	bl	80012e0 <HAL_CRCEx_Polynomial_Set>
 8001276:	1e03      	subs	r3, r0, #0
 8001278:	d001      	beq.n	800127e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e02a      	b.n	80012d4 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	795b      	ldrb	r3, [r3, #5]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d105      	bne.n	8001292 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2201      	movs	r2, #1
 800128c:	4252      	negs	r2, r2
 800128e:	611a      	str	r2, [r3, #16]
 8001290:	e004      	b.n	800129c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	6912      	ldr	r2, [r2, #16]
 800129a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	2260      	movs	r2, #96	@ 0x60
 80012a4:	4393      	bics	r3, r2
 80012a6:	0019      	movs	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	695a      	ldr	r2, [r3, #20]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2280      	movs	r2, #128	@ 0x80
 80012bc:	4393      	bics	r3, r2
 80012be:	0019      	movs	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	699a      	ldr	r2, [r3, #24]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	0018      	movs	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b002      	add	sp, #8
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	04c11db7 	.word	0x04c11db7

080012e0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ec:	2117      	movs	r1, #23
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80012f4:	231f      	movs	r3, #31
 80012f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	2201      	movs	r2, #1
 80012fc:	4013      	ands	r3, r2
 80012fe:	d103      	bne.n	8001308 <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 8001300:	187b      	adds	r3, r7, r1
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
 8001306:	e045      	b.n	8001394 <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001308:	46c0      	nop			@ (mov r8, r8)
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1e5a      	subs	r2, r3, #1
 800130e:	613a      	str	r2, [r7, #16]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d008      	beq.n	8001326 <HAL_CRCEx_Polynomial_Set+0x46>
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	221f      	movs	r2, #31
 8001318:	4013      	ands	r3, r2
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	40da      	lsrs	r2, r3
 800131e:	0013      	movs	r3, r2
 8001320:	2201      	movs	r2, #1
 8001322:	4013      	ands	r3, r2
 8001324:	d0f1      	beq.n	800130a <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b18      	cmp	r3, #24
 800132a:	d00f      	beq.n	800134c <HAL_CRCEx_Polynomial_Set+0x6c>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b18      	cmp	r3, #24
 8001330:	d824      	bhi.n	800137c <HAL_CRCEx_Polynomial_Set+0x9c>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b10      	cmp	r3, #16
 8001336:	d011      	beq.n	800135c <HAL_CRCEx_Polynomial_Set+0x7c>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b10      	cmp	r3, #16
 800133c:	d81e      	bhi.n	800137c <HAL_CRCEx_Polynomial_Set+0x9c>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d020      	beq.n	8001386 <HAL_CRCEx_Polynomial_Set+0xa6>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b08      	cmp	r3, #8
 8001348:	d010      	beq.n	800136c <HAL_CRCEx_Polynomial_Set+0x8c>
 800134a:	e017      	b.n	800137c <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	2b06      	cmp	r3, #6
 8001350:	d91b      	bls.n	800138a <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 8001352:	2317      	movs	r3, #23
 8001354:	18fb      	adds	r3, r7, r3
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
        }
        break;
 800135a:	e016      	b.n	800138a <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	2b07      	cmp	r3, #7
 8001360:	d915      	bls.n	800138e <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 8001362:	2317      	movs	r3, #23
 8001364:	18fb      	adds	r3, r7, r3
 8001366:	2201      	movs	r2, #1
 8001368:	701a      	strb	r2, [r3, #0]
        }
        break;
 800136a:	e010      	b.n	800138e <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	2b0f      	cmp	r3, #15
 8001370:	d90f      	bls.n	8001392 <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 8001372:	2317      	movs	r3, #23
 8001374:	18fb      	adds	r3, r7, r3
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
        }
        break;
 800137a:	e00a      	b.n	8001392 <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800137c:	2317      	movs	r3, #23
 800137e:	18fb      	adds	r3, r7, r3
 8001380:	2201      	movs	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]
        break;
 8001384:	e006      	b.n	8001394 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8001386:	46c0      	nop			@ (mov r8, r8)
 8001388:	e004      	b.n	8001394 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 800138a:	46c0      	nop			@ (mov r8, r8)
 800138c:	e002      	b.n	8001394 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	e000      	b.n	8001394 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8001392:	46c0      	nop			@ (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 8001394:	2317      	movs	r3, #23
 8001396:	18fb      	adds	r3, r7, r3
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10e      	bne.n	80013bc <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2218      	movs	r2, #24
 80013ae:	4393      	bics	r3, r2
 80013b0:	0019      	movs	r1, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80013bc:	2317      	movs	r3, #23
 80013be:	18fb      	adds	r3, r7, r3
 80013c0:	781b      	ldrb	r3, [r3, #0]
}
 80013c2:	0018      	movs	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b006      	add	sp, #24
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80013cc:	b5b0      	push	{r4, r5, r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80013d8:	4b16      	ldr	r3, [pc, #88]	@ (8001434 <HAL_FLASH_Program+0x68>)
 80013da:	7c1b      	ldrb	r3, [r3, #16]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d101      	bne.n	80013e4 <HAL_FLASH_Program+0x18>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e022      	b.n	800142a <HAL_FLASH_Program+0x5e>
 80013e4:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <HAL_FLASH_Program+0x68>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	741a      	strb	r2, [r3, #16]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(TypeProgram);

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80013ea:	2517      	movs	r5, #23
 80013ec:	197c      	adds	r4, r7, r5
 80013ee:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <HAL_FLASH_Program+0x6c>)
 80013f0:	0018      	movs	r0, r3
 80013f2:	f000 f88b 	bl	800150c <FLASH_WaitForLastOperation>
 80013f6:	0003      	movs	r3, r0
 80013f8:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80013fa:	0029      	movs	r1, r5
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10c      	bne.n	800141e <HAL_FLASH_Program+0x52>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001404:	4b0b      	ldr	r3, [pc, #44]	@ (8001434 <HAL_FLASH_Program+0x68>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]

    /*Program word (32-bit) at a specified address.*/
    *(__IO uint32_t *)Address = Data;
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001410:	187c      	adds	r4, r7, r1
 8001412:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <HAL_FLASH_Program+0x6c>)
 8001414:	0018      	movs	r0, r3
 8001416:	f000 f879 	bl	800150c <FLASH_WaitForLastOperation>
 800141a:	0003      	movs	r3, r0
 800141c:	7023      	strb	r3, [r4, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800141e:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <HAL_FLASH_Program+0x68>)
 8001420:	2200      	movs	r2, #0
 8001422:	741a      	strb	r2, [r3, #16]

  return status;
 8001424:	2317      	movs	r3, #23
 8001426:	18fb      	adds	r3, r7, r3
 8001428:	781b      	ldrb	r3, [r3, #0]
}
 800142a:	0018      	movs	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	b006      	add	sp, #24
 8001430:	bdb0      	pop	{r4, r5, r7, pc}
 8001432:	46c0      	nop			@ (mov r8, r8)
 8001434:	20000228 	.word	0x20000228
 8001438:	0000c350 	.word	0x0000c350

0800143c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  /* Unlocking FLASH_PECR register access*/
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8001442:	4b23      	ldr	r3, [pc, #140]	@ (80014d0 <HAL_FLASH_Unlock+0x94>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	4013      	ands	r3, r2
 800144a:	2b01      	cmp	r3, #1
 800144c:	d11a      	bne.n	8001484 <HAL_FLASH_Unlock+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800144e:	f3ef 8310 	mrs	r3, PRIMASK
 8001452:	60fb      	str	r3, [r7, #12]
  return(result);
 8001454:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8001456:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 800145c:	4b1c      	ldr	r3, [pc, #112]	@ (80014d0 <HAL_FLASH_Unlock+0x94>)
 800145e:	4a1d      	ldr	r2, [pc, #116]	@ (80014d4 <HAL_FLASH_Unlock+0x98>)
 8001460:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 8001462:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <HAL_FLASH_Unlock+0x94>)
 8001464:	4a1c      	ldr	r2, [pc, #112]	@ (80014d8 <HAL_FLASH_Unlock+0x9c>)
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	f383 8810 	msr	PRIMASK, r3
}
 8001472:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8001474:	4b16      	ldr	r3, [pc, #88]	@ (80014d0 <HAL_FLASH_Unlock+0x94>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2201      	movs	r2, #1
 800147a:	4013      	ands	r3, r2
 800147c:	2b01      	cmp	r3, #1
 800147e:	d101      	bne.n	8001484 <HAL_FLASH_Unlock+0x48>
    {
      return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e021      	b.n	80014c8 <HAL_FLASH_Unlock+0x8c>
    }
  }

  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8001484:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <HAL_FLASH_Unlock+0x94>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2202      	movs	r2, #2
 800148a:	4013      	ands	r3, r2
 800148c:	2b02      	cmp	r3, #2
 800148e:	d11a      	bne.n	80014c6 <HAL_FLASH_Unlock+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001490:	f3ef 8310 	mrs	r3, PRIMASK
 8001494:	607b      	str	r3, [r7, #4]
  return(result);
 8001496:	687b      	ldr	r3, [r7, #4]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8001498:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800149a:	b672      	cpsid	i
}
 800149c:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 800149e:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <HAL_FLASH_Unlock+0x94>)
 80014a0:	4a0e      	ldr	r2, [pc, #56]	@ (80014dc <HAL_FLASH_Unlock+0xa0>)
 80014a2:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 80014a4:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <HAL_FLASH_Unlock+0x94>)
 80014a6:	4a0e      	ldr	r2, [pc, #56]	@ (80014e0 <HAL_FLASH_Unlock+0xa4>)
 80014a8:	611a      	str	r2, [r3, #16]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	f383 8810 	msr	PRIMASK, r3
}
 80014b4:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 80014b6:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <HAL_FLASH_Unlock+0x94>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2202      	movs	r2, #2
 80014bc:	4013      	ands	r3, r2
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d101      	bne.n	80014c6 <HAL_FLASH_Unlock+0x8a>
    {
      return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <HAL_FLASH_Unlock+0x8c>
    }
  }

  return HAL_OK; 
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	0018      	movs	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b006      	add	sp, #24
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40022000 	.word	0x40022000
 80014d4:	89abcdef 	.word	0x89abcdef
 80014d8:	02030405 	.word	0x02030405
 80014dc:	8c9daebf 	.word	0x8c9daebf
 80014e0:	13141516 	.word	0x13141516

080014e4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 80014e8:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <HAL_FLASH_Lock+0x24>)
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_FLASH_Lock+0x24>)
 80014ee:	2102      	movs	r1, #2
 80014f0:	430a      	orrs	r2, r1
 80014f2:	605a      	str	r2, [r3, #4]
  
  /* Set the PELOCK Bit to lock the PECR Register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80014f4:	4b04      	ldr	r3, [pc, #16]	@ (8001508 <HAL_FLASH_Lock+0x24>)
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <HAL_FLASH_Lock+0x24>)
 80014fa:	2101      	movs	r1, #1
 80014fc:	430a      	orrs	r2, r1
 80014fe:	605a      	str	r2, [r3, #4]

  return HAL_OK;  
 8001500:	2300      	movs	r3, #0
}
 8001502:	0018      	movs	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40022000 	.word	0x40022000

0800150c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001514:	f7ff fd9c 	bl	8001050 <HAL_GetTick>
 8001518:	0003      	movs	r3, r0
 800151a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800151c:	e00f      	b.n	800153e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3301      	adds	r3, #1
 8001522:	d00c      	beq.n	800153e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d007      	beq.n	800153a <FLASH_WaitForLastOperation+0x2e>
 800152a:	f7ff fd91 	bl	8001050 <HAL_GetTick>
 800152e:	0002      	movs	r2, r0
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	429a      	cmp	r2, r3
 8001538:	d201      	bcs.n	800153e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e052      	b.n	80015e4 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800153e:	4b2b      	ldr	r3, [pc, #172]	@ (80015ec <FLASH_WaitForLastOperation+0xe0>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	2201      	movs	r2, #1
 8001544:	4013      	ands	r3, r2
 8001546:	2b01      	cmp	r3, #1
 8001548:	d0e9      	beq.n	800151e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800154a:	4b28      	ldr	r3, [pc, #160]	@ (80015ec <FLASH_WaitForLastOperation+0xe0>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	2202      	movs	r2, #2
 8001550:	4013      	ands	r3, r2
 8001552:	2b02      	cmp	r3, #2
 8001554:	d102      	bne.n	800155c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001556:	4b25      	ldr	r3, [pc, #148]	@ (80015ec <FLASH_WaitForLastOperation+0xe0>)
 8001558:	2202      	movs	r2, #2
 800155a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800155c:	4b23      	ldr	r3, [pc, #140]	@ (80015ec <FLASH_WaitForLastOperation+0xe0>)
 800155e:	699a      	ldr	r2, [r3, #24]
 8001560:	2380      	movs	r3, #128	@ 0x80
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	401a      	ands	r2, r3
 8001566:	2380      	movs	r3, #128	@ 0x80
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	429a      	cmp	r2, r3
 800156c:	d035      	beq.n	80015da <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800156e:	4b1f      	ldr	r3, [pc, #124]	@ (80015ec <FLASH_WaitForLastOperation+0xe0>)
 8001570:	699a      	ldr	r2, [r3, #24]
 8001572:	2380      	movs	r3, #128	@ 0x80
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8001578:	2380      	movs	r3, #128	@ 0x80
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	429a      	cmp	r2, r3
 800157e:	d02c      	beq.n	80015da <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8001580:	4b1a      	ldr	r3, [pc, #104]	@ (80015ec <FLASH_WaitForLastOperation+0xe0>)
 8001582:	699a      	ldr	r2, [r3, #24]
 8001584:	2380      	movs	r3, #128	@ 0x80
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800158a:	2380      	movs	r3, #128	@ 0x80
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	429a      	cmp	r2, r3
 8001590:	d023      	beq.n	80015da <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8001592:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <FLASH_WaitForLastOperation+0xe0>)
 8001594:	699a      	ldr	r2, [r3, #24]
 8001596:	2380      	movs	r3, #128	@ 0x80
 8001598:	011b      	lsls	r3, r3, #4
 800159a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800159c:	2380      	movs	r3, #128	@ 0x80
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d01a      	beq.n	80015da <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80015a4:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <FLASH_WaitForLastOperation+0xe0>)
 80015a6:	699a      	ldr	r2, [r3, #24]
 80015a8:	2380      	movs	r3, #128	@ 0x80
 80015aa:	019b      	lsls	r3, r3, #6
 80015ac:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80015ae:	2380      	movs	r3, #128	@ 0x80
 80015b0:	019b      	lsls	r3, r3, #6
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d011      	beq.n	80015da <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80015b6:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <FLASH_WaitForLastOperation+0xe0>)
 80015b8:	699a      	ldr	r2, [r3, #24]
 80015ba:	2380      	movs	r3, #128	@ 0x80
 80015bc:	029b      	lsls	r3, r3, #10
 80015be:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80015c0:	2380      	movs	r3, #128	@ 0x80
 80015c2:	029b      	lsls	r3, r3, #10
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d008      	beq.n	80015da <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80015c8:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <FLASH_WaitForLastOperation+0xe0>)
 80015ca:	699a      	ldr	r2, [r3, #24]
 80015cc:	2380      	movs	r3, #128	@ 0x80
 80015ce:	025b      	lsls	r3, r3, #9
 80015d0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80015d2:	2380      	movs	r3, #128	@ 0x80
 80015d4:	025b      	lsls	r3, r3, #9
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d103      	bne.n	80015e2 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 80015da:	f000 f809 	bl	80015f0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	0018      	movs	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b004      	add	sp, #16
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40022000 	.word	0x40022000

080015f0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80015fa:	4b49      	ldr	r3, [pc, #292]	@ (8001720 <FLASH_SetErrorCode+0x130>)
 80015fc:	699a      	ldr	r2, [r3, #24]
 80015fe:	2380      	movs	r3, #128	@ 0x80
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	401a      	ands	r2, r3
 8001604:	2380      	movs	r3, #128	@ 0x80
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	429a      	cmp	r2, r3
 800160a:	d10a      	bne.n	8001622 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800160c:	4b45      	ldr	r3, [pc, #276]	@ (8001724 <FLASH_SetErrorCode+0x134>)
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	2202      	movs	r2, #2
 8001612:	431a      	orrs	r2, r3
 8001614:	4b43      	ldr	r3, [pc, #268]	@ (8001724 <FLASH_SetErrorCode+0x134>)
 8001616:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2280      	movs	r2, #128	@ 0x80
 800161c:	0052      	lsls	r2, r2, #1
 800161e:	4313      	orrs	r3, r2
 8001620:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8001622:	4b3f      	ldr	r3, [pc, #252]	@ (8001720 <FLASH_SetErrorCode+0x130>)
 8001624:	699a      	ldr	r2, [r3, #24]
 8001626:	2380      	movs	r3, #128	@ 0x80
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	401a      	ands	r2, r3
 800162c:	2380      	movs	r3, #128	@ 0x80
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	429a      	cmp	r2, r3
 8001632:	d10a      	bne.n	800164a <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001634:	4b3b      	ldr	r3, [pc, #236]	@ (8001724 <FLASH_SetErrorCode+0x134>)
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	2201      	movs	r2, #1
 800163a:	431a      	orrs	r2, r3
 800163c:	4b39      	ldr	r3, [pc, #228]	@ (8001724 <FLASH_SetErrorCode+0x134>)
 800163e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2280      	movs	r2, #128	@ 0x80
 8001644:	0092      	lsls	r2, r2, #2
 8001646:	4313      	orrs	r3, r2
 8001648:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800164a:	4b35      	ldr	r3, [pc, #212]	@ (8001720 <FLASH_SetErrorCode+0x130>)
 800164c:	699a      	ldr	r2, [r3, #24]
 800164e:	2380      	movs	r3, #128	@ 0x80
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	401a      	ands	r2, r3
 8001654:	2380      	movs	r3, #128	@ 0x80
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	429a      	cmp	r2, r3
 800165a:	d10a      	bne.n	8001672 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800165c:	4b31      	ldr	r3, [pc, #196]	@ (8001724 <FLASH_SetErrorCode+0x134>)
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	2208      	movs	r2, #8
 8001662:	431a      	orrs	r2, r3
 8001664:	4b2f      	ldr	r3, [pc, #188]	@ (8001724 <FLASH_SetErrorCode+0x134>)
 8001666:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2280      	movs	r2, #128	@ 0x80
 800166c:	00d2      	lsls	r2, r2, #3
 800166e:	4313      	orrs	r3, r2
 8001670:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001672:	4b2b      	ldr	r3, [pc, #172]	@ (8001720 <FLASH_SetErrorCode+0x130>)
 8001674:	699a      	ldr	r2, [r3, #24]
 8001676:	2380      	movs	r3, #128	@ 0x80
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	401a      	ands	r2, r3
 800167c:	2380      	movs	r3, #128	@ 0x80
 800167e:	011b      	lsls	r3, r3, #4
 8001680:	429a      	cmp	r2, r3
 8001682:	d10a      	bne.n	800169a <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001684:	4b27      	ldr	r3, [pc, #156]	@ (8001724 <FLASH_SetErrorCode+0x134>)
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	2204      	movs	r2, #4
 800168a:	431a      	orrs	r2, r3
 800168c:	4b25      	ldr	r3, [pc, #148]	@ (8001724 <FLASH_SetErrorCode+0x134>)
 800168e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2280      	movs	r2, #128	@ 0x80
 8001694:	0112      	lsls	r2, r2, #4
 8001696:	4313      	orrs	r3, r2
 8001698:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800169a:	4b21      	ldr	r3, [pc, #132]	@ (8001720 <FLASH_SetErrorCode+0x130>)
 800169c:	699a      	ldr	r2, [r3, #24]
 800169e:	2380      	movs	r3, #128	@ 0x80
 80016a0:	019b      	lsls	r3, r3, #6
 80016a2:	401a      	ands	r2, r3
 80016a4:	2380      	movs	r3, #128	@ 0x80
 80016a6:	019b      	lsls	r3, r3, #6
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d10a      	bne.n	80016c2 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80016ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001724 <FLASH_SetErrorCode+0x134>)
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	2210      	movs	r2, #16
 80016b2:	431a      	orrs	r2, r3
 80016b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <FLASH_SetErrorCode+0x134>)
 80016b6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2280      	movs	r2, #128	@ 0x80
 80016bc:	0192      	lsls	r2, r2, #6
 80016be:	4313      	orrs	r3, r2
 80016c0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80016c2:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <FLASH_SetErrorCode+0x130>)
 80016c4:	699a      	ldr	r2, [r3, #24]
 80016c6:	2380      	movs	r3, #128	@ 0x80
 80016c8:	029b      	lsls	r3, r3, #10
 80016ca:	401a      	ands	r2, r3
 80016cc:	2380      	movs	r3, #128	@ 0x80
 80016ce:	029b      	lsls	r3, r3, #10
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d109      	bne.n	80016e8 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80016d4:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <FLASH_SetErrorCode+0x134>)
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	2220      	movs	r2, #32
 80016da:	431a      	orrs	r2, r3
 80016dc:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <FLASH_SetErrorCode+0x134>)
 80016de:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2220      	movs	r2, #32
 80016e4:	4313      	orrs	r3, r2
 80016e6:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80016e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001720 <FLASH_SetErrorCode+0x130>)
 80016ea:	699a      	ldr	r2, [r3, #24]
 80016ec:	2380      	movs	r3, #128	@ 0x80
 80016ee:	025b      	lsls	r3, r3, #9
 80016f0:	401a      	ands	r2, r3
 80016f2:	2380      	movs	r3, #128	@ 0x80
 80016f4:	025b      	lsls	r3, r3, #9
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d10a      	bne.n	8001710 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80016fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <FLASH_SetErrorCode+0x134>)
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	2240      	movs	r2, #64	@ 0x40
 8001700:	431a      	orrs	r2, r3
 8001702:	4b08      	ldr	r3, [pc, #32]	@ (8001724 <FLASH_SetErrorCode+0x134>)
 8001704:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2280      	movs	r2, #128	@ 0x80
 800170a:	0252      	lsls	r2, r2, #9
 800170c:	4313      	orrs	r3, r2
 800170e:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001710:	4b03      	ldr	r3, [pc, #12]	@ (8001720 <FLASH_SetErrorCode+0x130>)
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	619a      	str	r2, [r3, #24]
}  
 8001716:	46c0      	nop			@ (mov r8, r8)
 8001718:	46bd      	mov	sp, r7
 800171a:	b002      	add	sp, #8
 800171c:	bd80      	pop	{r7, pc}
 800171e:	46c0      	nop			@ (mov r8, r8)
 8001720:	40022000 	.word	0x40022000
 8001724:	20000228 	.word	0x20000228

08001728 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001728:	b5b0      	push	{r4, r5, r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t address = 0U;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001736:	4b29      	ldr	r3, [pc, #164]	@ (80017dc <HAL_FLASHEx_Erase+0xb4>)
 8001738:	7c1b      	ldrb	r3, [r3, #16]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d101      	bne.n	8001742 <HAL_FLASHEx_Erase+0x1a>
 800173e:	2302      	movs	r3, #2
 8001740:	e048      	b.n	80017d4 <HAL_FLASHEx_Erase+0xac>
 8001742:	4b26      	ldr	r3, [pc, #152]	@ (80017dc <HAL_FLASHEx_Erase+0xb4>)
 8001744:	2201      	movs	r2, #1
 8001746:	741a      	strb	r2, [r3, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001748:	250f      	movs	r5, #15
 800174a:	197c      	adds	r4, r7, r5
 800174c:	4b24      	ldr	r3, [pc, #144]	@ (80017e0 <HAL_FLASHEx_Erase+0xb8>)
 800174e:	0018      	movs	r0, r3
 8001750:	f7ff fedc 	bl	800150c <FLASH_WaitForLastOperation>
 8001754:	0003      	movs	r3, r0
 8001756:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001758:	197b      	adds	r3, r7, r5
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d133      	bne.n	80017c8 <HAL_FLASHEx_Erase+0xa0>
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	2201      	movs	r2, #1
 8001764:	4252      	negs	r2, r2
 8001766:	601a      	str	r2, [r3, #0]
    assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_PROGRAM_ADDRESS((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_SIZE - 1U));

    /* Erase page by page to be done*/
    for(address = pEraseInit->PageAddress; 
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	e022      	b.n	80017b6 <HAL_FLASHEx_Erase+0x8e>
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
        address += FLASH_PAGE_SIZE)
    {
      FLASH_PageErase(address);
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	0018      	movs	r0, r3
 8001774:	f000 f83a 	bl	80017ec <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001778:	250f      	movs	r5, #15
 800177a:	197c      	adds	r4, r7, r5
 800177c:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <HAL_FLASHEx_Erase+0xb8>)
 800177e:	0018      	movs	r0, r3
 8001780:	f7ff fec4 	bl	800150c <FLASH_WaitForLastOperation>
 8001784:	0003      	movs	r3, r0
 8001786:	7023      	strb	r3, [r4, #0]

      /* If the erase operation is completed, disable the ERASE Bit */
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8001788:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <HAL_FLASHEx_Erase+0xbc>)
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <HAL_FLASHEx_Erase+0xbc>)
 800178e:	2108      	movs	r1, #8
 8001790:	438a      	bics	r2, r1
 8001792:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8001794:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <HAL_FLASHEx_Erase+0xbc>)
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <HAL_FLASHEx_Erase+0xbc>)
 800179a:	4913      	ldr	r1, [pc, #76]	@ (80017e8 <HAL_FLASHEx_Erase+0xc0>)
 800179c:	400a      	ands	r2, r1
 800179e:	605a      	str	r2, [r3, #4]

      if (status != HAL_OK) 
 80017a0:	197b      	adds	r3, r7, r5
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d003      	beq.n	80017b0 <HAL_FLASHEx_Erase+0x88>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = address;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	601a      	str	r2, [r3, #0]
        break;
 80017ae:	e00b      	b.n	80017c8 <HAL_FLASHEx_Erase+0xa0>
        address += FLASH_PAGE_SIZE)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	3380      	adds	r3, #128	@ 0x80
 80017b4:	60bb      	str	r3, [r7, #8]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	01da      	lsls	r2, r3, #7
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	18d3      	adds	r3, r2, r3
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d3d3      	bcc.n	8001770 <HAL_FLASHEx_Erase+0x48>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017c8:	4b04      	ldr	r3, [pc, #16]	@ (80017dc <HAL_FLASHEx_Erase+0xb4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	741a      	strb	r2, [r3, #16]

  return status;
 80017ce:	230f      	movs	r3, #15
 80017d0:	18fb      	adds	r3, r7, r3
 80017d2:	781b      	ldrb	r3, [r3, #0]
}
 80017d4:	0018      	movs	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b004      	add	sp, #16
 80017da:	bdb0      	pop	{r4, r5, r7, pc}
 80017dc:	20000228 	.word	0x20000228
 80017e0:	0000c350 	.word	0x0000c350
 80017e4:	40022000 	.word	0x40022000
 80017e8:	fffffdff 	.word	0xfffffdff

080017ec <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load 
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <FLASH_PageErase+0x3c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 80017fa:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <FLASH_PageErase+0x40>)
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	4b0b      	ldr	r3, [pc, #44]	@ (800182c <FLASH_PageErase+0x40>)
 8001800:	2180      	movs	r1, #128	@ 0x80
 8001802:	0089      	lsls	r1, r1, #2
 8001804:	430a      	orrs	r2, r1
 8001806:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8001808:	4b08      	ldr	r3, [pc, #32]	@ (800182c <FLASH_PageErase+0x40>)
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	4b07      	ldr	r3, [pc, #28]	@ (800182c <FLASH_PageErase+0x40>)
 800180e:	2108      	movs	r1, #8
 8001810:	430a      	orrs	r2, r1
 8001812:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	227f      	movs	r2, #127	@ 0x7f
 8001818:	4393      	bics	r3, r2
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
}
 800181e:	46c0      	nop			@ (mov r8, r8)
 8001820:	46bd      	mov	sp, r7
 8001822:	b002      	add	sp, #8
 8001824:	bd80      	pop	{r7, pc}
 8001826:	46c0      	nop			@ (mov r8, r8)
 8001828:	20000228 	.word	0x20000228
 800182c:	40022000 	.word	0x40022000

08001830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001846:	e155      	b.n	8001af4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2101      	movs	r1, #1
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	4091      	lsls	r1, r2
 8001852:	000a      	movs	r2, r1
 8001854:	4013      	ands	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d100      	bne.n	8001860 <HAL_GPIO_Init+0x30>
 800185e:	e146      	b.n	8001aee <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2203      	movs	r2, #3
 8001866:	4013      	ands	r3, r2
 8001868:	2b01      	cmp	r3, #1
 800186a:	d005      	beq.n	8001878 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2203      	movs	r2, #3
 8001872:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001874:	2b02      	cmp	r3, #2
 8001876:	d130      	bne.n	80018da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	2203      	movs	r2, #3
 8001884:	409a      	lsls	r2, r3
 8001886:	0013      	movs	r3, r2
 8001888:	43da      	mvns	r2, r3
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	409a      	lsls	r2, r3
 800189a:	0013      	movs	r3, r2
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ae:	2201      	movs	r2, #1
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
 80018b4:	0013      	movs	r3, r2
 80018b6:	43da      	mvns	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	091b      	lsrs	r3, r3, #4
 80018c4:	2201      	movs	r2, #1
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
 80018cc:	0013      	movs	r3, r2
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2203      	movs	r2, #3
 80018e0:	4013      	ands	r3, r2
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d017      	beq.n	8001916 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	409a      	lsls	r2, r3
 80018f4:	0013      	movs	r3, r2
 80018f6:	43da      	mvns	r2, r3
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	409a      	lsls	r2, r3
 8001908:	0013      	movs	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2203      	movs	r2, #3
 800191c:	4013      	ands	r3, r2
 800191e:	2b02      	cmp	r3, #2
 8001920:	d123      	bne.n	800196a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	08da      	lsrs	r2, r3, #3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3208      	adds	r2, #8
 800192a:	0092      	lsls	r2, r2, #2
 800192c:	58d3      	ldr	r3, [r2, r3]
 800192e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2207      	movs	r2, #7
 8001934:	4013      	ands	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	220f      	movs	r2, #15
 800193a:	409a      	lsls	r2, r3
 800193c:	0013      	movs	r3, r2
 800193e:	43da      	mvns	r2, r3
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	691a      	ldr	r2, [r3, #16]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2107      	movs	r1, #7
 800194e:	400b      	ands	r3, r1
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	409a      	lsls	r2, r3
 8001954:	0013      	movs	r3, r2
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	08da      	lsrs	r2, r3, #3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3208      	adds	r2, #8
 8001964:	0092      	lsls	r2, r2, #2
 8001966:	6939      	ldr	r1, [r7, #16]
 8001968:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	2203      	movs	r2, #3
 8001976:	409a      	lsls	r2, r3
 8001978:	0013      	movs	r3, r2
 800197a:	43da      	mvns	r2, r3
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2203      	movs	r2, #3
 8001988:	401a      	ands	r2, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	409a      	lsls	r2, r3
 8001990:	0013      	movs	r3, r2
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	23c0      	movs	r3, #192	@ 0xc0
 80019a4:	029b      	lsls	r3, r3, #10
 80019a6:	4013      	ands	r3, r2
 80019a8:	d100      	bne.n	80019ac <HAL_GPIO_Init+0x17c>
 80019aa:	e0a0      	b.n	8001aee <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ac:	4b57      	ldr	r3, [pc, #348]	@ (8001b0c <HAL_GPIO_Init+0x2dc>)
 80019ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019b0:	4b56      	ldr	r3, [pc, #344]	@ (8001b0c <HAL_GPIO_Init+0x2dc>)
 80019b2:	2101      	movs	r1, #1
 80019b4:	430a      	orrs	r2, r1
 80019b6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80019b8:	4a55      	ldr	r2, [pc, #340]	@ (8001b10 <HAL_GPIO_Init+0x2e0>)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	089b      	lsrs	r3, r3, #2
 80019be:	3302      	adds	r3, #2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	589b      	ldr	r3, [r3, r2]
 80019c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2203      	movs	r2, #3
 80019ca:	4013      	ands	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	220f      	movs	r2, #15
 80019d0:	409a      	lsls	r2, r3
 80019d2:	0013      	movs	r3, r2
 80019d4:	43da      	mvns	r2, r3
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	23a0      	movs	r3, #160	@ 0xa0
 80019e0:	05db      	lsls	r3, r3, #23
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d01f      	beq.n	8001a26 <HAL_GPIO_Init+0x1f6>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a4a      	ldr	r2, [pc, #296]	@ (8001b14 <HAL_GPIO_Init+0x2e4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d019      	beq.n	8001a22 <HAL_GPIO_Init+0x1f2>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a49      	ldr	r2, [pc, #292]	@ (8001b18 <HAL_GPIO_Init+0x2e8>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d013      	beq.n	8001a1e <HAL_GPIO_Init+0x1ee>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a48      	ldr	r2, [pc, #288]	@ (8001b1c <HAL_GPIO_Init+0x2ec>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d00d      	beq.n	8001a1a <HAL_GPIO_Init+0x1ea>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a47      	ldr	r2, [pc, #284]	@ (8001b20 <HAL_GPIO_Init+0x2f0>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d007      	beq.n	8001a16 <HAL_GPIO_Init+0x1e6>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a46      	ldr	r2, [pc, #280]	@ (8001b24 <HAL_GPIO_Init+0x2f4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d101      	bne.n	8001a12 <HAL_GPIO_Init+0x1e2>
 8001a0e:	2305      	movs	r3, #5
 8001a10:	e00a      	b.n	8001a28 <HAL_GPIO_Init+0x1f8>
 8001a12:	2306      	movs	r3, #6
 8001a14:	e008      	b.n	8001a28 <HAL_GPIO_Init+0x1f8>
 8001a16:	2304      	movs	r3, #4
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x1f8>
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e004      	b.n	8001a28 <HAL_GPIO_Init+0x1f8>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e002      	b.n	8001a28 <HAL_GPIO_Init+0x1f8>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <HAL_GPIO_Init+0x1f8>
 8001a26:	2300      	movs	r3, #0
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	2103      	movs	r1, #3
 8001a2c:	400a      	ands	r2, r1
 8001a2e:	0092      	lsls	r2, r2, #2
 8001a30:	4093      	lsls	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a38:	4935      	ldr	r1, [pc, #212]	@ (8001b10 <HAL_GPIO_Init+0x2e0>)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	089b      	lsrs	r3, r3, #2
 8001a3e:	3302      	adds	r3, #2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a46:	4b38      	ldr	r3, [pc, #224]	@ (8001b28 <HAL_GPIO_Init+0x2f8>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	4013      	ands	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	2380      	movs	r3, #128	@ 0x80
 8001a5c:	035b      	lsls	r3, r3, #13
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b28 <HAL_GPIO_Init+0x2f8>)
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a70:	4b2d      	ldr	r3, [pc, #180]	@ (8001b28 <HAL_GPIO_Init+0x2f8>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	43da      	mvns	r2, r3
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	2380      	movs	r3, #128	@ 0x80
 8001a86:	039b      	lsls	r3, r3, #14
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d003      	beq.n	8001a94 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a94:	4b24      	ldr	r3, [pc, #144]	@ (8001b28 <HAL_GPIO_Init+0x2f8>)
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001a9a:	4b23      	ldr	r3, [pc, #140]	@ (8001b28 <HAL_GPIO_Init+0x2f8>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	2380      	movs	r3, #128	@ 0x80
 8001ab0:	029b      	lsls	r3, r3, #10
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001abe:	4b1a      	ldr	r3, [pc, #104]	@ (8001b28 <HAL_GPIO_Init+0x2f8>)
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <HAL_GPIO_Init+0x2f8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	43da      	mvns	r2, r3
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	2380      	movs	r3, #128	@ 0x80
 8001ada:	025b      	lsls	r3, r3, #9
 8001adc:	4013      	ands	r3, r2
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <HAL_GPIO_Init+0x2f8>)
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3301      	adds	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	40da      	lsrs	r2, r3
 8001afc:	1e13      	subs	r3, r2, #0
 8001afe:	d000      	beq.n	8001b02 <HAL_GPIO_Init+0x2d2>
 8001b00:	e6a2      	b.n	8001848 <HAL_GPIO_Init+0x18>
  }
}
 8001b02:	46c0      	nop			@ (mov r8, r8)
 8001b04:	46c0      	nop			@ (mov r8, r8)
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b006      	add	sp, #24
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40010000 	.word	0x40010000
 8001b14:	50000400 	.word	0x50000400
 8001b18:	50000800 	.word	0x50000800
 8001b1c:	50000c00 	.word	0x50000c00
 8001b20:	50001000 	.word	0x50001000
 8001b24:	50001c00 	.word	0x50001c00
 8001b28:	40010400 	.word	0x40010400

08001b2c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	000a      	movs	r2, r1
 8001b36:	1cbb      	adds	r3, r7, #2
 8001b38:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	1cba      	adds	r2, r7, #2
 8001b40:	8812      	ldrh	r2, [r2, #0]
 8001b42:	4013      	ands	r3, r2
 8001b44:	d004      	beq.n	8001b50 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b46:	230f      	movs	r3, #15
 8001b48:	18fb      	adds	r3, r7, r3
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	701a      	strb	r2, [r3, #0]
 8001b4e:	e003      	b.n	8001b58 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b50:	230f      	movs	r3, #15
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001b58:	230f      	movs	r3, #15
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	781b      	ldrb	r3, [r3, #0]
}
 8001b5e:	0018      	movs	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b004      	add	sp, #16
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	0008      	movs	r0, r1
 8001b70:	0011      	movs	r1, r2
 8001b72:	1cbb      	adds	r3, r7, #2
 8001b74:	1c02      	adds	r2, r0, #0
 8001b76:	801a      	strh	r2, [r3, #0]
 8001b78:	1c7b      	adds	r3, r7, #1
 8001b7a:	1c0a      	adds	r2, r1, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b7e:	1c7b      	adds	r3, r7, #1
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d004      	beq.n	8001b90 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b86:	1cbb      	adds	r3, r7, #2
 8001b88:	881a      	ldrh	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001b8e:	e003      	b.n	8001b98 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001b90:	1cbb      	adds	r3, r7, #2
 8001b92:	881a      	ldrh	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b98:	46c0      	nop			@ (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b002      	add	sp, #8
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_RCC_DeInit>:
  *            - LSI, LSE and RTC clocks
  *            - HSI48 clock
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001ba0:	b5b0      	push	{r4, r5, r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
  uint32_t tickstart;
  uint32_t vl_mask;
  HAL_StatusTypeDef status;

  /* Set MSIClockRange, HSITRIM and MSITRIM bits to the reset values */
  MODIFY_REG(RCC->ICSCR, (RCC_ICSCR_MSITRIM | RCC_ICSCR_HSITRIM | RCC_ICSCR_MSIRANGE), \
 8001ba6:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd0 <HAL_RCC_DeInit+0x130>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4a4a      	ldr	r2, [pc, #296]	@ (8001cd4 <HAL_RCC_DeInit+0x134>)
 8001bac:	401a      	ands	r2, r3
 8001bae:	4b48      	ldr	r3, [pc, #288]	@ (8001cd0 <HAL_RCC_DeInit+0x130>)
 8001bb0:	21b0      	movs	r1, #176	@ 0xb0
 8001bb2:	0209      	lsls	r1, r1, #8
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	605a      	str	r2, [r3, #4]
            ((RCC_MSICALIBRATION_DEFAULT << RCC_ICSCR_MSITRIM_Pos) | (RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos) | RCC_ICSCR_MSIRANGE_5));

  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001bb8:	4b45      	ldr	r3, [pc, #276]	@ (8001cd0 <HAL_RCC_DeInit+0x130>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b44      	ldr	r3, [pc, #272]	@ (8001cd0 <HAL_RCC_DeInit+0x130>)
 8001bbe:	2180      	movs	r1, #128	@ 0x80
 8001bc0:	0049      	lsls	r1, r1, #1
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001bc6:	f7ff fa43 	bl	8001050 <HAL_GetTick>
 8001bca:	0003      	movs	r3, r0
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Wait till MSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_DeInit+0x42>
  {
    if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bd0:	f7ff fa3e 	bl	8001050 <HAL_GetTick>
 8001bd4:	0002      	movs	r2, r0
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_DeInit+0x42>
    {
      return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e071      	b.n	8001cc6 <HAL_RCC_DeInit+0x126>
  while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001be2:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd0 <HAL_RCC_DeInit+0x130>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	2380      	movs	r3, #128	@ 0x80
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4013      	ands	r3, r2
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_DeInit+0x30>
    }
  }

  /* Switch SYSCLK to MSI*/
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001bee:	4b38      	ldr	r3, [pc, #224]	@ (8001cd0 <HAL_RCC_DeInit+0x130>)
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	4b37      	ldr	r3, [pc, #220]	@ (8001cd0 <HAL_RCC_DeInit+0x130>)
 8001bf4:	2103      	movs	r1, #3
 8001bf6:	438a      	bics	r2, r1
 8001bf8:	60da      	str	r2, [r3, #12]

  /* Wait till MSI as SYSCLK status is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8001bfa:	e009      	b.n	8001c10 <HAL_RCC_DeInit+0x70>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfc:	f7ff fa28 	bl	8001050 <HAL_GetTick>
 8001c00:	0002      	movs	r2, r0
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	4a34      	ldr	r2, [pc, #208]	@ (8001cd8 <HAL_RCC_DeInit+0x138>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_DeInit+0x70>
    {
      return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e05a      	b.n	8001cc6 <HAL_RCC_DeInit+0x126>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8001c10:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd0 <HAL_RCC_DeInit+0x130>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	220c      	movs	r2, #12
 8001c16:	4013      	ands	r3, r2
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_DeInit+0x5c>
    }
  }

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 8001c1a:	4b30      	ldr	r3, [pc, #192]	@ (8001cdc <HAL_RCC_DeInit+0x13c>)
 8001c1c:	4a30      	ldr	r2, [pc, #192]	@ (8001ce0 <HAL_RCC_DeInit+0x140>)
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  status = HAL_InitTick(uwTickPrio);
 8001c20:	4b30      	ldr	r3, [pc, #192]	@ (8001ce4 <HAL_RCC_DeInit+0x144>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	250b      	movs	r5, #11
 8001c26:	197c      	adds	r4, r7, r5
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f7ff f9cb 	bl	8000fc4 <HAL_InitTick>
 8001c2e:	0003      	movs	r3, r0
 8001c30:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001c32:	197b      	adds	r3, r7, r5
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <HAL_RCC_DeInit+0xa0>
  {
    return status;
 8001c3a:	197b      	adds	r3, r7, r5
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	e042      	b.n	8001cc6 <HAL_RCC_DeInit+0x126>
  }

  /* Reset HSE, HSI, CSS, PLL */
#if defined(RCC_CR_CSSHSEON) && defined(RCC_CR_HSIOUTEN)
  CLEAR_BIT(RCC->CR, RCC_CR_HSION| RCC_CR_HSIKERON| RCC_CR_HSIDIVEN | RCC_CR_HSIOUTEN | \
 8001c40:	4b23      	ldr	r3, [pc, #140]	@ (8001cd0 <HAL_RCC_DeInit+0x130>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b22      	ldr	r3, [pc, #136]	@ (8001cd0 <HAL_RCC_DeInit+0x130>)
 8001c46:	4928      	ldr	r1, [pc, #160]	@ (8001ce8 <HAL_RCC_DeInit+0x148>)
 8001c48:	400a      	ands	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSION| RCC_CR_HSIKERON| RCC_CR_HSIDIVEN | \
                     RCC_CR_HSEON | RCC_CR_CSSHSEON | RCC_CR_PLLON);
#endif

  /* Delay after an RCC peripheral clock */ \
  tmpreg = READ_BIT(RCC->CR, RCC_CR_HSEON);      \
 8001c4c:	4b20      	ldr	r3, [pc, #128]	@ (8001cd0 <HAL_RCC_DeInit+0x130>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	2380      	movs	r3, #128	@ 0x80
 8001c52:	025b      	lsls	r3, r3, #9
 8001c54:	4013      	ands	r3, r2
 8001c56:	603b      	str	r3, [r7, #0]
  UNUSED(tmpreg);
 8001c58:	683b      	ldr	r3, [r7, #0]

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd0 <HAL_RCC_DeInit+0x130>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd0 <HAL_RCC_DeInit+0x130>)
 8001c60:	4922      	ldr	r1, [pc, #136]	@ (8001cec <HAL_RCC_DeInit+0x14c>)
 8001c62:	400a      	ands	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001c66:	f7ff f9f3 	bl	8001050 <HAL_GetTick>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Wait till PLL is not ready */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_DeInit+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff f9ee 	bl	8001050 <HAL_GetTick>
 8001c74:	0002      	movs	r2, r0
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_DeInit+0xe2>
    {
      return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e021      	b.n	8001cc6 <HAL_RCC_DeInit+0x126>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c82:	4b13      	ldr	r3, [pc, #76]	@ (8001cd0 <HAL_RCC_DeInit+0x130>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	2380      	movs	r3, #128	@ 0x80
 8001c88:	049b      	lsls	r3, r3, #18
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_DeInit+0xd0>
    }
  }

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001c8e:	4b10      	ldr	r3, [pc, #64]	@ (8001cd0 <HAL_RCC_DeInit+0x130>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8001c94:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <HAL_RCC_DeInit+0x130>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	611a      	str	r2, [r3, #16]

  /* Clear all flags */
  vl_mask = RCC_CICR_LSIRDYC | RCC_CICR_LSERDYC | RCC_CICR_HSIRDYC | RCC_CICR_HSERDYC | RCC_CICR_PLLRDYC | RCC_CICR_MSIRDYC | RCC_CICR_CSSLSEC;
 8001c9a:	23bf      	movs	r3, #191	@ 0xbf
 8001c9c:	607b      	str	r3, [r7, #4]
#if defined(RCC_HSI48_SUPPORT)
  vl_mask |= RCC_CICR_HSI48RDYC;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2240      	movs	r2, #64	@ 0x40
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	607b      	str	r3, [r7, #4]
#endif
#if defined(RCC_HSECSS_SUPPORT)
  vl_mask |= RCC_CICR_CSSHSEC;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2280      	movs	r2, #128	@ 0x80
 8001caa:	0052      	lsls	r2, r2, #1
 8001cac:	4313      	orrs	r3, r2
 8001cae:	607b      	str	r3, [r7, #4]
#endif
  WRITE_REG(RCC->CICR, vl_mask);
 8001cb0:	4b07      	ldr	r3, [pc, #28]	@ (8001cd0 <HAL_RCC_DeInit+0x130>)
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	619a      	str	r2, [r3, #24]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001cb6:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <HAL_RCC_DeInit+0x130>)
 8001cb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cba:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <HAL_RCC_DeInit+0x130>)
 8001cbc:	2180      	movs	r1, #128	@ 0x80
 8001cbe:	0409      	lsls	r1, r1, #16
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	651a      	str	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b004      	add	sp, #16
 8001ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cce:	46c0      	nop			@ (mov r8, r8)
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	00ff00ff 	.word	0x00ff00ff
 8001cd8:	00001388 	.word	0x00001388
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	001fff68 	.word	0x001fff68
 8001ce4:	20000004 	.word	0x20000004
 8001ce8:	fef6ffd4 	.word	0xfef6ffd4
 8001cec:	fffbffff 	.word	0xfffbffff

08001cf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf0:	b5b0      	push	{r4, r5, r7, lr}
 8001cf2:	b08a      	sub	sp, #40	@ 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d102      	bne.n	8001d04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	f000 fbbf 	bl	8002482 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d04:	4bc9      	ldr	r3, [pc, #804]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	220c      	movs	r2, #12
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d0e:	4bc7      	ldr	r3, [pc, #796]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	2380      	movs	r3, #128	@ 0x80
 8001d14:	025b      	lsls	r3, r3, #9
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4013      	ands	r3, r2
 8001d22:	d100      	bne.n	8001d26 <HAL_RCC_OscConfig+0x36>
 8001d24:	e07e      	b.n	8001e24 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d007      	beq.n	8001d3c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	2b0c      	cmp	r3, #12
 8001d30:	d112      	bne.n	8001d58 <HAL_RCC_OscConfig+0x68>
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	2380      	movs	r3, #128	@ 0x80
 8001d36:	025b      	lsls	r3, r3, #9
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d10d      	bne.n	8001d58 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3c:	4bbb      	ldr	r3, [pc, #748]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	2380      	movs	r3, #128	@ 0x80
 8001d42:	029b      	lsls	r3, r3, #10
 8001d44:	4013      	ands	r3, r2
 8001d46:	d100      	bne.n	8001d4a <HAL_RCC_OscConfig+0x5a>
 8001d48:	e06b      	b.n	8001e22 <HAL_RCC_OscConfig+0x132>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d167      	bne.n	8001e22 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	f000 fb95 	bl	8002482 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	2380      	movs	r3, #128	@ 0x80
 8001d5e:	025b      	lsls	r3, r3, #9
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d107      	bne.n	8001d74 <HAL_RCC_OscConfig+0x84>
 8001d64:	4bb1      	ldr	r3, [pc, #708]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4bb0      	ldr	r3, [pc, #704]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001d6a:	2180      	movs	r1, #128	@ 0x80
 8001d6c:	0249      	lsls	r1, r1, #9
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	e027      	b.n	8001dc4 <HAL_RCC_OscConfig+0xd4>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	23a0      	movs	r3, #160	@ 0xa0
 8001d7a:	02db      	lsls	r3, r3, #11
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d10e      	bne.n	8001d9e <HAL_RCC_OscConfig+0xae>
 8001d80:	4baa      	ldr	r3, [pc, #680]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4ba9      	ldr	r3, [pc, #676]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001d86:	2180      	movs	r1, #128	@ 0x80
 8001d88:	02c9      	lsls	r1, r1, #11
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	4ba7      	ldr	r3, [pc, #668]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	4ba6      	ldr	r3, [pc, #664]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001d94:	2180      	movs	r1, #128	@ 0x80
 8001d96:	0249      	lsls	r1, r1, #9
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	e012      	b.n	8001dc4 <HAL_RCC_OscConfig+0xd4>
 8001d9e:	4ba3      	ldr	r3, [pc, #652]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	4ba2      	ldr	r3, [pc, #648]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001da4:	49a2      	ldr	r1, [pc, #648]	@ (8002030 <HAL_RCC_OscConfig+0x340>)
 8001da6:	400a      	ands	r2, r1
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	4ba0      	ldr	r3, [pc, #640]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	2380      	movs	r3, #128	@ 0x80
 8001db0:	025b      	lsls	r3, r3, #9
 8001db2:	4013      	ands	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4b9c      	ldr	r3, [pc, #624]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b9b      	ldr	r3, [pc, #620]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001dbe:	499d      	ldr	r1, [pc, #628]	@ (8002034 <HAL_RCC_OscConfig+0x344>)
 8001dc0:	400a      	ands	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d015      	beq.n	8001df8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff f940 	bl	8001050 <HAL_GetTick>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dd4:	e009      	b.n	8001dea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd6:	f7ff f93b 	bl	8001050 <HAL_GetTick>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b64      	cmp	r3, #100	@ 0x64
 8001de2:	d902      	bls.n	8001dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	f000 fb4c 	bl	8002482 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dea:	4b90      	ldr	r3, [pc, #576]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	2380      	movs	r3, #128	@ 0x80
 8001df0:	029b      	lsls	r3, r3, #10
 8001df2:	4013      	ands	r3, r2
 8001df4:	d0ef      	beq.n	8001dd6 <HAL_RCC_OscConfig+0xe6>
 8001df6:	e015      	b.n	8001e24 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7ff f92a 	bl	8001050 <HAL_GetTick>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e02:	f7ff f925 	bl	8001050 <HAL_GetTick>
 8001e06:	0002      	movs	r2, r0
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b64      	cmp	r3, #100	@ 0x64
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e336      	b.n	8002482 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e14:	4b85      	ldr	r3, [pc, #532]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	2380      	movs	r3, #128	@ 0x80
 8001e1a:	029b      	lsls	r3, r3, #10
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d1f0      	bne.n	8001e02 <HAL_RCC_OscConfig+0x112>
 8001e20:	e000      	b.n	8001e24 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e22:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2202      	movs	r2, #2
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d100      	bne.n	8001e30 <HAL_RCC_OscConfig+0x140>
 8001e2e:	e099      	b.n	8001f64 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e38:	2220      	movs	r2, #32
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d009      	beq.n	8001e52 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001e3e:	4b7b      	ldr	r3, [pc, #492]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4b7a      	ldr	r3, [pc, #488]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001e44:	2120      	movs	r1, #32
 8001e46:	430a      	orrs	r2, r1
 8001e48:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	4393      	bics	r3, r2
 8001e50:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	2b0c      	cmp	r3, #12
 8001e5c:	d13e      	bne.n	8001edc <HAL_RCC_OscConfig+0x1ec>
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d13b      	bne.n	8001edc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001e64:	4b71      	ldr	r3, [pc, #452]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2204      	movs	r2, #4
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d004      	beq.n	8001e78 <HAL_RCC_OscConfig+0x188>
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e304      	b.n	8002482 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e78:	4b6c      	ldr	r3, [pc, #432]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	4a6e      	ldr	r2, [pc, #440]	@ (8002038 <HAL_RCC_OscConfig+0x348>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	0019      	movs	r1, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	021a      	lsls	r2, r3, #8
 8001e88:	4b68      	ldr	r3, [pc, #416]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e8e:	4b67      	ldr	r3, [pc, #412]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2209      	movs	r2, #9
 8001e94:	4393      	bics	r3, r2
 8001e96:	0019      	movs	r1, r3
 8001e98:	4b64      	ldr	r3, [pc, #400]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ea0:	f000 fc42 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 8001ea4:	0001      	movs	r1, r0
 8001ea6:	4b61      	ldr	r3, [pc, #388]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	091b      	lsrs	r3, r3, #4
 8001eac:	220f      	movs	r2, #15
 8001eae:	4013      	ands	r3, r2
 8001eb0:	4a62      	ldr	r2, [pc, #392]	@ (800203c <HAL_RCC_OscConfig+0x34c>)
 8001eb2:	5cd3      	ldrb	r3, [r2, r3]
 8001eb4:	000a      	movs	r2, r1
 8001eb6:	40da      	lsrs	r2, r3
 8001eb8:	4b61      	ldr	r3, [pc, #388]	@ (8002040 <HAL_RCC_OscConfig+0x350>)
 8001eba:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001ebc:	4b61      	ldr	r3, [pc, #388]	@ (8002044 <HAL_RCC_OscConfig+0x354>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2513      	movs	r5, #19
 8001ec2:	197c      	adds	r4, r7, r5
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f7ff f87d 	bl	8000fc4 <HAL_InitTick>
 8001eca:	0003      	movs	r3, r0
 8001ecc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001ece:	197b      	adds	r3, r7, r5
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d046      	beq.n	8001f64 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001ed6:	197b      	adds	r3, r7, r5
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	e2d2      	b.n	8002482 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d027      	beq.n	8001f32 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001ee2:	4b52      	ldr	r3, [pc, #328]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2209      	movs	r2, #9
 8001ee8:	4393      	bics	r3, r2
 8001eea:	0019      	movs	r1, r3
 8001eec:	4b4f      	ldr	r3, [pc, #316]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7ff f8ac 	bl	8001050 <HAL_GetTick>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001efe:	f7ff f8a7 	bl	8001050 <HAL_GetTick>
 8001f02:	0002      	movs	r2, r0
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e2b8      	b.n	8002482 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f10:	4b46      	ldr	r3, [pc, #280]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2204      	movs	r2, #4
 8001f16:	4013      	ands	r3, r2
 8001f18:	d0f1      	beq.n	8001efe <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1a:	4b44      	ldr	r3, [pc, #272]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4a46      	ldr	r2, [pc, #280]	@ (8002038 <HAL_RCC_OscConfig+0x348>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	021a      	lsls	r2, r3, #8
 8001f2a:	4b40      	ldr	r3, [pc, #256]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	e018      	b.n	8001f64 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f32:	4b3e      	ldr	r3, [pc, #248]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	4b3d      	ldr	r3, [pc, #244]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001f38:	2101      	movs	r1, #1
 8001f3a:	438a      	bics	r2, r1
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7ff f887 	bl	8001050 <HAL_GetTick>
 8001f42:	0003      	movs	r3, r0
 8001f44:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f48:	f7ff f882 	bl	8001050 <HAL_GetTick>
 8001f4c:	0002      	movs	r2, r0
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e293      	b.n	8002482 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f5a:	4b34      	ldr	r3, [pc, #208]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2204      	movs	r2, #4
 8001f60:	4013      	ands	r3, r2
 8001f62:	d1f1      	bne.n	8001f48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2210      	movs	r2, #16
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d100      	bne.n	8001f70 <HAL_RCC_OscConfig+0x280>
 8001f6e:	e0a2      	b.n	80020b6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d140      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f76:	4b2d      	ldr	r3, [pc, #180]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	2380      	movs	r3, #128	@ 0x80
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d005      	beq.n	8001f8e <HAL_RCC_OscConfig+0x29e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e279      	b.n	8002482 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f8e:	4b27      	ldr	r3, [pc, #156]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	4a2d      	ldr	r2, [pc, #180]	@ (8002048 <HAL_RCC_OscConfig+0x358>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	0019      	movs	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f9c:	4b23      	ldr	r3, [pc, #140]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa2:	4b22      	ldr	r3, [pc, #136]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	0a19      	lsrs	r1, r3, #8
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	061a      	lsls	r2, r3, #24
 8001fb0:	4b1e      	ldr	r3, [pc, #120]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fba:	0b5b      	lsrs	r3, r3, #13
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	2280      	movs	r2, #128	@ 0x80
 8001fc0:	0212      	lsls	r2, r2, #8
 8001fc2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001fc4:	4b19      	ldr	r3, [pc, #100]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	210f      	movs	r1, #15
 8001fcc:	400b      	ands	r3, r1
 8001fce:	491b      	ldr	r1, [pc, #108]	@ (800203c <HAL_RCC_OscConfig+0x34c>)
 8001fd0:	5ccb      	ldrb	r3, [r1, r3]
 8001fd2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002040 <HAL_RCC_OscConfig+0x350>)
 8001fd6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002044 <HAL_RCC_OscConfig+0x354>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2513      	movs	r5, #19
 8001fde:	197c      	adds	r4, r7, r5
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f7fe ffef 	bl	8000fc4 <HAL_InitTick>
 8001fe6:	0003      	movs	r3, r0
 8001fe8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001fea:	197b      	adds	r3, r7, r5
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d061      	beq.n	80020b6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001ff2:	197b      	adds	r3, r7, r5
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	e244      	b.n	8002482 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d040      	beq.n	8002082 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002000:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b09      	ldr	r3, [pc, #36]	@ (800202c <HAL_RCC_OscConfig+0x33c>)
 8002006:	2180      	movs	r1, #128	@ 0x80
 8002008:	0049      	lsls	r1, r1, #1
 800200a:	430a      	orrs	r2, r1
 800200c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200e:	f7ff f81f 	bl	8001050 <HAL_GetTick>
 8002012:	0003      	movs	r3, r0
 8002014:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002016:	e019      	b.n	800204c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002018:	f7ff f81a 	bl	8001050 <HAL_GetTick>
 800201c:	0002      	movs	r2, r0
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d912      	bls.n	800204c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e22b      	b.n	8002482 <HAL_RCC_OscConfig+0x792>
 800202a:	46c0      	nop			@ (mov r8, r8)
 800202c:	40021000 	.word	0x40021000
 8002030:	fffeffff 	.word	0xfffeffff
 8002034:	fffbffff 	.word	0xfffbffff
 8002038:	ffffe0ff 	.word	0xffffe0ff
 800203c:	08003af4 	.word	0x08003af4
 8002040:	20000000 	.word	0x20000000
 8002044:	20000004 	.word	0x20000004
 8002048:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800204c:	4bca      	ldr	r3, [pc, #808]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	2380      	movs	r3, #128	@ 0x80
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4013      	ands	r3, r2
 8002056:	d0df      	beq.n	8002018 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002058:	4bc7      	ldr	r3, [pc, #796]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	4ac7      	ldr	r2, [pc, #796]	@ (800237c <HAL_RCC_OscConfig+0x68c>)
 800205e:	4013      	ands	r3, r2
 8002060:	0019      	movs	r1, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002066:	4bc4      	ldr	r3, [pc, #784]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 8002068:	430a      	orrs	r2, r1
 800206a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800206c:	4bc2      	ldr	r3, [pc, #776]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	021b      	lsls	r3, r3, #8
 8002072:	0a19      	lsrs	r1, r3, #8
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	061a      	lsls	r2, r3, #24
 800207a:	4bbf      	ldr	r3, [pc, #764]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 800207c:	430a      	orrs	r2, r1
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	e019      	b.n	80020b6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002082:	4bbd      	ldr	r3, [pc, #756]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	4bbc      	ldr	r3, [pc, #752]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 8002088:	49bd      	ldr	r1, [pc, #756]	@ (8002380 <HAL_RCC_OscConfig+0x690>)
 800208a:	400a      	ands	r2, r1
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7fe ffdf 	bl	8001050 <HAL_GetTick>
 8002092:	0003      	movs	r3, r0
 8002094:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002098:	f7fe ffda 	bl	8001050 <HAL_GetTick>
 800209c:	0002      	movs	r2, r0
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e1eb      	b.n	8002482 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80020aa:	4bb3      	ldr	r3, [pc, #716]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	2380      	movs	r3, #128	@ 0x80
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4013      	ands	r3, r2
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2208      	movs	r2, #8
 80020bc:	4013      	ands	r3, r2
 80020be:	d036      	beq.n	800212e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d019      	beq.n	80020fc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c8:	4bab      	ldr	r3, [pc, #684]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 80020ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020cc:	4baa      	ldr	r3, [pc, #680]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 80020ce:	2101      	movs	r1, #1
 80020d0:	430a      	orrs	r2, r1
 80020d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d4:	f7fe ffbc 	bl	8001050 <HAL_GetTick>
 80020d8:	0003      	movs	r3, r0
 80020da:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020de:	f7fe ffb7 	bl	8001050 <HAL_GetTick>
 80020e2:	0002      	movs	r2, r0
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e1c8      	b.n	8002482 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020f0:	4ba1      	ldr	r3, [pc, #644]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 80020f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020f4:	2202      	movs	r2, #2
 80020f6:	4013      	ands	r3, r2
 80020f8:	d0f1      	beq.n	80020de <HAL_RCC_OscConfig+0x3ee>
 80020fa:	e018      	b.n	800212e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020fc:	4b9e      	ldr	r3, [pc, #632]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 80020fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002100:	4b9d      	ldr	r3, [pc, #628]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 8002102:	2101      	movs	r1, #1
 8002104:	438a      	bics	r2, r1
 8002106:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002108:	f7fe ffa2 	bl	8001050 <HAL_GetTick>
 800210c:	0003      	movs	r3, r0
 800210e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002112:	f7fe ff9d 	bl	8001050 <HAL_GetTick>
 8002116:	0002      	movs	r2, r0
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e1ae      	b.n	8002482 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002124:	4b94      	ldr	r3, [pc, #592]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 8002126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002128:	2202      	movs	r2, #2
 800212a:	4013      	ands	r3, r2
 800212c:	d1f1      	bne.n	8002112 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2204      	movs	r2, #4
 8002134:	4013      	ands	r3, r2
 8002136:	d100      	bne.n	800213a <HAL_RCC_OscConfig+0x44a>
 8002138:	e0ae      	b.n	8002298 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800213a:	2023      	movs	r0, #35	@ 0x23
 800213c:	183b      	adds	r3, r7, r0
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002142:	4b8d      	ldr	r3, [pc, #564]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 8002144:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002146:	2380      	movs	r3, #128	@ 0x80
 8002148:	055b      	lsls	r3, r3, #21
 800214a:	4013      	ands	r3, r2
 800214c:	d109      	bne.n	8002162 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214e:	4b8a      	ldr	r3, [pc, #552]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 8002150:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002152:	4b89      	ldr	r3, [pc, #548]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 8002154:	2180      	movs	r1, #128	@ 0x80
 8002156:	0549      	lsls	r1, r1, #21
 8002158:	430a      	orrs	r2, r1
 800215a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800215c:	183b      	adds	r3, r7, r0
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002162:	4b88      	ldr	r3, [pc, #544]	@ (8002384 <HAL_RCC_OscConfig+0x694>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	2380      	movs	r3, #128	@ 0x80
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4013      	ands	r3, r2
 800216c:	d11a      	bne.n	80021a4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800216e:	4b85      	ldr	r3, [pc, #532]	@ (8002384 <HAL_RCC_OscConfig+0x694>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4b84      	ldr	r3, [pc, #528]	@ (8002384 <HAL_RCC_OscConfig+0x694>)
 8002174:	2180      	movs	r1, #128	@ 0x80
 8002176:	0049      	lsls	r1, r1, #1
 8002178:	430a      	orrs	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217c:	f7fe ff68 	bl	8001050 <HAL_GetTick>
 8002180:	0003      	movs	r3, r0
 8002182:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002186:	f7fe ff63 	bl	8001050 <HAL_GetTick>
 800218a:	0002      	movs	r2, r0
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b64      	cmp	r3, #100	@ 0x64
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e174      	b.n	8002482 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	4b7a      	ldr	r3, [pc, #488]	@ (8002384 <HAL_RCC_OscConfig+0x694>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	2380      	movs	r3, #128	@ 0x80
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4013      	ands	r3, r2
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	2380      	movs	r3, #128	@ 0x80
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d107      	bne.n	80021c0 <HAL_RCC_OscConfig+0x4d0>
 80021b0:	4b71      	ldr	r3, [pc, #452]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 80021b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021b4:	4b70      	ldr	r3, [pc, #448]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 80021b6:	2180      	movs	r1, #128	@ 0x80
 80021b8:	0049      	lsls	r1, r1, #1
 80021ba:	430a      	orrs	r2, r1
 80021bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80021be:	e031      	b.n	8002224 <HAL_RCC_OscConfig+0x534>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10c      	bne.n	80021e2 <HAL_RCC_OscConfig+0x4f2>
 80021c8:	4b6b      	ldr	r3, [pc, #428]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 80021ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 80021ce:	496c      	ldr	r1, [pc, #432]	@ (8002380 <HAL_RCC_OscConfig+0x690>)
 80021d0:	400a      	ands	r2, r1
 80021d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80021d4:	4b68      	ldr	r3, [pc, #416]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 80021d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021d8:	4b67      	ldr	r3, [pc, #412]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 80021da:	496b      	ldr	r1, [pc, #428]	@ (8002388 <HAL_RCC_OscConfig+0x698>)
 80021dc:	400a      	ands	r2, r1
 80021de:	651a      	str	r2, [r3, #80]	@ 0x50
 80021e0:	e020      	b.n	8002224 <HAL_RCC_OscConfig+0x534>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	23a0      	movs	r3, #160	@ 0xa0
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d10e      	bne.n	800220c <HAL_RCC_OscConfig+0x51c>
 80021ee:	4b62      	ldr	r3, [pc, #392]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 80021f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021f2:	4b61      	ldr	r3, [pc, #388]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 80021f4:	2180      	movs	r1, #128	@ 0x80
 80021f6:	00c9      	lsls	r1, r1, #3
 80021f8:	430a      	orrs	r2, r1
 80021fa:	651a      	str	r2, [r3, #80]	@ 0x50
 80021fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 80021fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002200:	4b5d      	ldr	r3, [pc, #372]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 8002202:	2180      	movs	r1, #128	@ 0x80
 8002204:	0049      	lsls	r1, r1, #1
 8002206:	430a      	orrs	r2, r1
 8002208:	651a      	str	r2, [r3, #80]	@ 0x50
 800220a:	e00b      	b.n	8002224 <HAL_RCC_OscConfig+0x534>
 800220c:	4b5a      	ldr	r3, [pc, #360]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 800220e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002210:	4b59      	ldr	r3, [pc, #356]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 8002212:	495b      	ldr	r1, [pc, #364]	@ (8002380 <HAL_RCC_OscConfig+0x690>)
 8002214:	400a      	ands	r2, r1
 8002216:	651a      	str	r2, [r3, #80]	@ 0x50
 8002218:	4b57      	ldr	r3, [pc, #348]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 800221a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800221c:	4b56      	ldr	r3, [pc, #344]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 800221e:	495a      	ldr	r1, [pc, #360]	@ (8002388 <HAL_RCC_OscConfig+0x698>)
 8002220:	400a      	ands	r2, r1
 8002222:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d015      	beq.n	8002258 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222c:	f7fe ff10 	bl	8001050 <HAL_GetTick>
 8002230:	0003      	movs	r3, r0
 8002232:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002234:	e009      	b.n	800224a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7fe ff0b 	bl	8001050 <HAL_GetTick>
 800223a:	0002      	movs	r2, r0
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	4a52      	ldr	r2, [pc, #328]	@ (800238c <HAL_RCC_OscConfig+0x69c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e11b      	b.n	8002482 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800224a:	4b4b      	ldr	r3, [pc, #300]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 800224c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800224e:	2380      	movs	r3, #128	@ 0x80
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4013      	ands	r3, r2
 8002254:	d0ef      	beq.n	8002236 <HAL_RCC_OscConfig+0x546>
 8002256:	e014      	b.n	8002282 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002258:	f7fe fefa 	bl	8001050 <HAL_GetTick>
 800225c:	0003      	movs	r3, r0
 800225e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002260:	e009      	b.n	8002276 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7fe fef5 	bl	8001050 <HAL_GetTick>
 8002266:	0002      	movs	r2, r0
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	4a47      	ldr	r2, [pc, #284]	@ (800238c <HAL_RCC_OscConfig+0x69c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e105      	b.n	8002482 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002276:	4b40      	ldr	r3, [pc, #256]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 8002278:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800227a:	2380      	movs	r3, #128	@ 0x80
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4013      	ands	r3, r2
 8002280:	d1ef      	bne.n	8002262 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002282:	2323      	movs	r3, #35	@ 0x23
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d105      	bne.n	8002298 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228c:	4b3a      	ldr	r3, [pc, #232]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 800228e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002290:	4b39      	ldr	r3, [pc, #228]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 8002292:	493f      	ldr	r1, [pc, #252]	@ (8002390 <HAL_RCC_OscConfig+0x6a0>)
 8002294:	400a      	ands	r2, r1
 8002296:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2220      	movs	r2, #32
 800229e:	4013      	ands	r3, r2
 80022a0:	d049      	beq.n	8002336 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d026      	beq.n	80022f8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80022aa:	4b33      	ldr	r3, [pc, #204]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	4b32      	ldr	r3, [pc, #200]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 80022b0:	2101      	movs	r1, #1
 80022b2:	430a      	orrs	r2, r1
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	4b30      	ldr	r3, [pc, #192]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 80022b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 80022bc:	2101      	movs	r1, #1
 80022be:	430a      	orrs	r2, r1
 80022c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80022c2:	4b34      	ldr	r3, [pc, #208]	@ (8002394 <HAL_RCC_OscConfig+0x6a4>)
 80022c4:	6a1a      	ldr	r2, [r3, #32]
 80022c6:	4b33      	ldr	r3, [pc, #204]	@ (8002394 <HAL_RCC_OscConfig+0x6a4>)
 80022c8:	2180      	movs	r1, #128	@ 0x80
 80022ca:	0189      	lsls	r1, r1, #6
 80022cc:	430a      	orrs	r2, r1
 80022ce:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7fe febe 	bl	8001050 <HAL_GetTick>
 80022d4:	0003      	movs	r3, r0
 80022d6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022da:	f7fe feb9 	bl	8001050 <HAL_GetTick>
 80022de:	0002      	movs	r2, r0
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e0ca      	b.n	8002482 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022ec:	4b22      	ldr	r3, [pc, #136]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2202      	movs	r2, #2
 80022f2:	4013      	ands	r3, r2
 80022f4:	d0f1      	beq.n	80022da <HAL_RCC_OscConfig+0x5ea>
 80022f6:	e01e      	b.n	8002336 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80022f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 80022fe:	2101      	movs	r1, #1
 8002300:	438a      	bics	r2, r1
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	4b23      	ldr	r3, [pc, #140]	@ (8002394 <HAL_RCC_OscConfig+0x6a4>)
 8002306:	6a1a      	ldr	r2, [r3, #32]
 8002308:	4b22      	ldr	r3, [pc, #136]	@ (8002394 <HAL_RCC_OscConfig+0x6a4>)
 800230a:	4923      	ldr	r1, [pc, #140]	@ (8002398 <HAL_RCC_OscConfig+0x6a8>)
 800230c:	400a      	ands	r2, r1
 800230e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7fe fe9e 	bl	8001050 <HAL_GetTick>
 8002314:	0003      	movs	r3, r0
 8002316:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800231a:	f7fe fe99 	bl	8001050 <HAL_GetTick>
 800231e:	0002      	movs	r2, r0
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e0aa      	b.n	8002482 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800232c:	4b12      	ldr	r3, [pc, #72]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2202      	movs	r2, #2
 8002332:	4013      	ands	r3, r2
 8002334:	d1f1      	bne.n	800231a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233a:	2b00      	cmp	r3, #0
 800233c:	d100      	bne.n	8002340 <HAL_RCC_OscConfig+0x650>
 800233e:	e09f      	b.n	8002480 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	2b0c      	cmp	r3, #12
 8002344:	d100      	bne.n	8002348 <HAL_RCC_OscConfig+0x658>
 8002346:	e078      	b.n	800243a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234c:	2b02      	cmp	r3, #2
 800234e:	d159      	bne.n	8002404 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002350:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b08      	ldr	r3, [pc, #32]	@ (8002378 <HAL_RCC_OscConfig+0x688>)
 8002356:	4911      	ldr	r1, [pc, #68]	@ (800239c <HAL_RCC_OscConfig+0x6ac>)
 8002358:	400a      	ands	r2, r1
 800235a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7fe fe78 	bl	8001050 <HAL_GetTick>
 8002360:	0003      	movs	r3, r0
 8002362:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002364:	e01c      	b.n	80023a0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002366:	f7fe fe73 	bl	8001050 <HAL_GetTick>
 800236a:	0002      	movs	r2, r0
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d915      	bls.n	80023a0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e084      	b.n	8002482 <HAL_RCC_OscConfig+0x792>
 8002378:	40021000 	.word	0x40021000
 800237c:	ffff1fff 	.word	0xffff1fff
 8002380:	fffffeff 	.word	0xfffffeff
 8002384:	40007000 	.word	0x40007000
 8002388:	fffffbff 	.word	0xfffffbff
 800238c:	00001388 	.word	0x00001388
 8002390:	efffffff 	.word	0xefffffff
 8002394:	40010000 	.word	0x40010000
 8002398:	ffffdfff 	.word	0xffffdfff
 800239c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023a0:	4b3a      	ldr	r3, [pc, #232]	@ (800248c <HAL_RCC_OscConfig+0x79c>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	2380      	movs	r3, #128	@ 0x80
 80023a6:	049b      	lsls	r3, r3, #18
 80023a8:	4013      	ands	r3, r2
 80023aa:	d1dc      	bne.n	8002366 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ac:	4b37      	ldr	r3, [pc, #220]	@ (800248c <HAL_RCC_OscConfig+0x79c>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4a37      	ldr	r2, [pc, #220]	@ (8002490 <HAL_RCC_OscConfig+0x7a0>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	0019      	movs	r1, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c4:	431a      	orrs	r2, r3
 80023c6:	4b31      	ldr	r3, [pc, #196]	@ (800248c <HAL_RCC_OscConfig+0x79c>)
 80023c8:	430a      	orrs	r2, r1
 80023ca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023cc:	4b2f      	ldr	r3, [pc, #188]	@ (800248c <HAL_RCC_OscConfig+0x79c>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b2e      	ldr	r3, [pc, #184]	@ (800248c <HAL_RCC_OscConfig+0x79c>)
 80023d2:	2180      	movs	r1, #128	@ 0x80
 80023d4:	0449      	lsls	r1, r1, #17
 80023d6:	430a      	orrs	r2, r1
 80023d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023da:	f7fe fe39 	bl	8001050 <HAL_GetTick>
 80023de:	0003      	movs	r3, r0
 80023e0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e4:	f7fe fe34 	bl	8001050 <HAL_GetTick>
 80023e8:	0002      	movs	r2, r0
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e045      	b.n	8002482 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80023f6:	4b25      	ldr	r3, [pc, #148]	@ (800248c <HAL_RCC_OscConfig+0x79c>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	2380      	movs	r3, #128	@ 0x80
 80023fc:	049b      	lsls	r3, r3, #18
 80023fe:	4013      	ands	r3, r2
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0x6f4>
 8002402:	e03d      	b.n	8002480 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002404:	4b21      	ldr	r3, [pc, #132]	@ (800248c <HAL_RCC_OscConfig+0x79c>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b20      	ldr	r3, [pc, #128]	@ (800248c <HAL_RCC_OscConfig+0x79c>)
 800240a:	4922      	ldr	r1, [pc, #136]	@ (8002494 <HAL_RCC_OscConfig+0x7a4>)
 800240c:	400a      	ands	r2, r1
 800240e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7fe fe1e 	bl	8001050 <HAL_GetTick>
 8002414:	0003      	movs	r3, r0
 8002416:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241a:	f7fe fe19 	bl	8001050 <HAL_GetTick>
 800241e:	0002      	movs	r2, r0
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e02a      	b.n	8002482 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800242c:	4b17      	ldr	r3, [pc, #92]	@ (800248c <HAL_RCC_OscConfig+0x79c>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	2380      	movs	r3, #128	@ 0x80
 8002432:	049b      	lsls	r3, r3, #18
 8002434:	4013      	ands	r3, r2
 8002436:	d1f0      	bne.n	800241a <HAL_RCC_OscConfig+0x72a>
 8002438:	e022      	b.n	8002480 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e01d      	b.n	8002482 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002446:	4b11      	ldr	r3, [pc, #68]	@ (800248c <HAL_RCC_OscConfig+0x79c>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	2380      	movs	r3, #128	@ 0x80
 8002450:	025b      	lsls	r3, r3, #9
 8002452:	401a      	ands	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002458:	429a      	cmp	r2, r3
 800245a:	d10f      	bne.n	800247c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	23f0      	movs	r3, #240	@ 0xf0
 8002460:	039b      	lsls	r3, r3, #14
 8002462:	401a      	ands	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002468:	429a      	cmp	r2, r3
 800246a:	d107      	bne.n	800247c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	23c0      	movs	r3, #192	@ 0xc0
 8002470:	041b      	lsls	r3, r3, #16
 8002472:	401a      	ands	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002478:	429a      	cmp	r2, r3
 800247a:	d001      	beq.n	8002480 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e000      	b.n	8002482 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	0018      	movs	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	b00a      	add	sp, #40	@ 0x28
 8002488:	bdb0      	pop	{r4, r5, r7, pc}
 800248a:	46c0      	nop			@ (mov r8, r8)
 800248c:	40021000 	.word	0x40021000
 8002490:	ff02ffff 	.word	0xff02ffff
 8002494:	feffffff 	.word	0xfeffffff

08002498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002498:	b5b0      	push	{r4, r5, r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e128      	b.n	80026fe <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024ac:	4b96      	ldr	r3, [pc, #600]	@ (8002708 <HAL_RCC_ClockConfig+0x270>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2201      	movs	r2, #1
 80024b2:	4013      	ands	r3, r2
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d91e      	bls.n	80024f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ba:	4b93      	ldr	r3, [pc, #588]	@ (8002708 <HAL_RCC_ClockConfig+0x270>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2201      	movs	r2, #1
 80024c0:	4393      	bics	r3, r2
 80024c2:	0019      	movs	r1, r3
 80024c4:	4b90      	ldr	r3, [pc, #576]	@ (8002708 <HAL_RCC_ClockConfig+0x270>)
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024cc:	f7fe fdc0 	bl	8001050 <HAL_GetTick>
 80024d0:	0003      	movs	r3, r0
 80024d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d4:	e009      	b.n	80024ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d6:	f7fe fdbb 	bl	8001050 <HAL_GetTick>
 80024da:	0002      	movs	r2, r0
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	4a8a      	ldr	r2, [pc, #552]	@ (800270c <HAL_RCC_ClockConfig+0x274>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e109      	b.n	80026fe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ea:	4b87      	ldr	r3, [pc, #540]	@ (8002708 <HAL_RCC_ClockConfig+0x270>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2201      	movs	r2, #1
 80024f0:	4013      	ands	r3, r2
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d1ee      	bne.n	80024d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2202      	movs	r2, #2
 80024fe:	4013      	ands	r3, r2
 8002500:	d009      	beq.n	8002516 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002502:	4b83      	ldr	r3, [pc, #524]	@ (8002710 <HAL_RCC_ClockConfig+0x278>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	22f0      	movs	r2, #240	@ 0xf0
 8002508:	4393      	bics	r3, r2
 800250a:	0019      	movs	r1, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	4b7f      	ldr	r3, [pc, #508]	@ (8002710 <HAL_RCC_ClockConfig+0x278>)
 8002512:	430a      	orrs	r2, r1
 8002514:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2201      	movs	r2, #1
 800251c:	4013      	ands	r3, r2
 800251e:	d100      	bne.n	8002522 <HAL_RCC_ClockConfig+0x8a>
 8002520:	e089      	b.n	8002636 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800252a:	4b79      	ldr	r3, [pc, #484]	@ (8002710 <HAL_RCC_ClockConfig+0x278>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	2380      	movs	r3, #128	@ 0x80
 8002530:	029b      	lsls	r3, r3, #10
 8002532:	4013      	ands	r3, r2
 8002534:	d120      	bne.n	8002578 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e0e1      	b.n	80026fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b03      	cmp	r3, #3
 8002540:	d107      	bne.n	8002552 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002542:	4b73      	ldr	r3, [pc, #460]	@ (8002710 <HAL_RCC_ClockConfig+0x278>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	2380      	movs	r3, #128	@ 0x80
 8002548:	049b      	lsls	r3, r3, #18
 800254a:	4013      	ands	r3, r2
 800254c:	d114      	bne.n	8002578 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e0d5      	b.n	80026fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d106      	bne.n	8002568 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800255a:	4b6d      	ldr	r3, [pc, #436]	@ (8002710 <HAL_RCC_ClockConfig+0x278>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2204      	movs	r2, #4
 8002560:	4013      	ands	r3, r2
 8002562:	d109      	bne.n	8002578 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0ca      	b.n	80026fe <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002568:	4b69      	ldr	r3, [pc, #420]	@ (8002710 <HAL_RCC_ClockConfig+0x278>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	2380      	movs	r3, #128	@ 0x80
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4013      	ands	r3, r2
 8002572:	d101      	bne.n	8002578 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0c2      	b.n	80026fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002578:	4b65      	ldr	r3, [pc, #404]	@ (8002710 <HAL_RCC_ClockConfig+0x278>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	2203      	movs	r2, #3
 800257e:	4393      	bics	r3, r2
 8002580:	0019      	movs	r1, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	4b62      	ldr	r3, [pc, #392]	@ (8002710 <HAL_RCC_ClockConfig+0x278>)
 8002588:	430a      	orrs	r2, r1
 800258a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800258c:	f7fe fd60 	bl	8001050 <HAL_GetTick>
 8002590:	0003      	movs	r3, r0
 8002592:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d111      	bne.n	80025c0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800259c:	e009      	b.n	80025b2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800259e:	f7fe fd57 	bl	8001050 <HAL_GetTick>
 80025a2:	0002      	movs	r2, r0
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	4a58      	ldr	r2, [pc, #352]	@ (800270c <HAL_RCC_ClockConfig+0x274>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e0a5      	b.n	80026fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025b2:	4b57      	ldr	r3, [pc, #348]	@ (8002710 <HAL_RCC_ClockConfig+0x278>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	220c      	movs	r2, #12
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d1ef      	bne.n	800259e <HAL_RCC_ClockConfig+0x106>
 80025be:	e03a      	b.n	8002636 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d111      	bne.n	80025ec <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c8:	e009      	b.n	80025de <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ca:	f7fe fd41 	bl	8001050 <HAL_GetTick>
 80025ce:	0002      	movs	r2, r0
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	4a4d      	ldr	r2, [pc, #308]	@ (800270c <HAL_RCC_ClockConfig+0x274>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e08f      	b.n	80026fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025de:	4b4c      	ldr	r3, [pc, #304]	@ (8002710 <HAL_RCC_ClockConfig+0x278>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	220c      	movs	r2, #12
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b0c      	cmp	r3, #12
 80025e8:	d1ef      	bne.n	80025ca <HAL_RCC_ClockConfig+0x132>
 80025ea:	e024      	b.n	8002636 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d11b      	bne.n	800262c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025f4:	e009      	b.n	800260a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f6:	f7fe fd2b 	bl	8001050 <HAL_GetTick>
 80025fa:	0002      	movs	r2, r0
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	4a42      	ldr	r2, [pc, #264]	@ (800270c <HAL_RCC_ClockConfig+0x274>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e079      	b.n	80026fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800260a:	4b41      	ldr	r3, [pc, #260]	@ (8002710 <HAL_RCC_ClockConfig+0x278>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	220c      	movs	r2, #12
 8002610:	4013      	ands	r3, r2
 8002612:	2b04      	cmp	r3, #4
 8002614:	d1ef      	bne.n	80025f6 <HAL_RCC_ClockConfig+0x15e>
 8002616:	e00e      	b.n	8002636 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002618:	f7fe fd1a 	bl	8001050 <HAL_GetTick>
 800261c:	0002      	movs	r2, r0
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	4a3a      	ldr	r2, [pc, #232]	@ (800270c <HAL_RCC_ClockConfig+0x274>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d901      	bls.n	800262c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e068      	b.n	80026fe <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800262c:	4b38      	ldr	r3, [pc, #224]	@ (8002710 <HAL_RCC_ClockConfig+0x278>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	220c      	movs	r2, #12
 8002632:	4013      	ands	r3, r2
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002636:	4b34      	ldr	r3, [pc, #208]	@ (8002708 <HAL_RCC_ClockConfig+0x270>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2201      	movs	r2, #1
 800263c:	4013      	ands	r3, r2
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d21e      	bcs.n	8002682 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002644:	4b30      	ldr	r3, [pc, #192]	@ (8002708 <HAL_RCC_ClockConfig+0x270>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2201      	movs	r2, #1
 800264a:	4393      	bics	r3, r2
 800264c:	0019      	movs	r1, r3
 800264e:	4b2e      	ldr	r3, [pc, #184]	@ (8002708 <HAL_RCC_ClockConfig+0x270>)
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002656:	f7fe fcfb 	bl	8001050 <HAL_GetTick>
 800265a:	0003      	movs	r3, r0
 800265c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	e009      	b.n	8002674 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002660:	f7fe fcf6 	bl	8001050 <HAL_GetTick>
 8002664:	0002      	movs	r2, r0
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	4a28      	ldr	r2, [pc, #160]	@ (800270c <HAL_RCC_ClockConfig+0x274>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e044      	b.n	80026fe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002674:	4b24      	ldr	r3, [pc, #144]	@ (8002708 <HAL_RCC_ClockConfig+0x270>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2201      	movs	r2, #1
 800267a:	4013      	ands	r3, r2
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d1ee      	bne.n	8002660 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2204      	movs	r2, #4
 8002688:	4013      	ands	r3, r2
 800268a:	d009      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800268c:	4b20      	ldr	r3, [pc, #128]	@ (8002710 <HAL_RCC_ClockConfig+0x278>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4a20      	ldr	r2, [pc, #128]	@ (8002714 <HAL_RCC_ClockConfig+0x27c>)
 8002692:	4013      	ands	r3, r2
 8002694:	0019      	movs	r1, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	4b1d      	ldr	r3, [pc, #116]	@ (8002710 <HAL_RCC_ClockConfig+0x278>)
 800269c:	430a      	orrs	r2, r1
 800269e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2208      	movs	r2, #8
 80026a6:	4013      	ands	r3, r2
 80026a8:	d00a      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026aa:	4b19      	ldr	r3, [pc, #100]	@ (8002710 <HAL_RCC_ClockConfig+0x278>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002718 <HAL_RCC_ClockConfig+0x280>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	0019      	movs	r1, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	00da      	lsls	r2, r3, #3
 80026ba:	4b15      	ldr	r3, [pc, #84]	@ (8002710 <HAL_RCC_ClockConfig+0x278>)
 80026bc:	430a      	orrs	r2, r1
 80026be:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026c0:	f000 f832 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 80026c4:	0001      	movs	r1, r0
 80026c6:	4b12      	ldr	r3, [pc, #72]	@ (8002710 <HAL_RCC_ClockConfig+0x278>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	220f      	movs	r2, #15
 80026ce:	4013      	ands	r3, r2
 80026d0:	4a12      	ldr	r2, [pc, #72]	@ (800271c <HAL_RCC_ClockConfig+0x284>)
 80026d2:	5cd3      	ldrb	r3, [r2, r3]
 80026d4:	000a      	movs	r2, r1
 80026d6:	40da      	lsrs	r2, r3
 80026d8:	4b11      	ldr	r3, [pc, #68]	@ (8002720 <HAL_RCC_ClockConfig+0x288>)
 80026da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026dc:	4b11      	ldr	r3, [pc, #68]	@ (8002724 <HAL_RCC_ClockConfig+0x28c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	250b      	movs	r5, #11
 80026e2:	197c      	adds	r4, r7, r5
 80026e4:	0018      	movs	r0, r3
 80026e6:	f7fe fc6d 	bl	8000fc4 <HAL_InitTick>
 80026ea:	0003      	movs	r3, r0
 80026ec:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80026ee:	197b      	adds	r3, r7, r5
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80026f6:	197b      	adds	r3, r7, r5
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	e000      	b.n	80026fe <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	b004      	add	sp, #16
 8002704:	bdb0      	pop	{r4, r5, r7, pc}
 8002706:	46c0      	nop			@ (mov r8, r8)
 8002708:	40022000 	.word	0x40022000
 800270c:	00001388 	.word	0x00001388
 8002710:	40021000 	.word	0x40021000
 8002714:	fffff8ff 	.word	0xfffff8ff
 8002718:	ffffc7ff 	.word	0xffffc7ff
 800271c:	08003af4 	.word	0x08003af4
 8002720:	20000000 	.word	0x20000000
 8002724:	20000004 	.word	0x20000004

08002728 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800272e:	4b3c      	ldr	r3, [pc, #240]	@ (8002820 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	220c      	movs	r2, #12
 8002738:	4013      	ands	r3, r2
 800273a:	2b0c      	cmp	r3, #12
 800273c:	d013      	beq.n	8002766 <HAL_RCC_GetSysClockFreq+0x3e>
 800273e:	d85c      	bhi.n	80027fa <HAL_RCC_GetSysClockFreq+0xd2>
 8002740:	2b04      	cmp	r3, #4
 8002742:	d002      	beq.n	800274a <HAL_RCC_GetSysClockFreq+0x22>
 8002744:	2b08      	cmp	r3, #8
 8002746:	d00b      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0x38>
 8002748:	e057      	b.n	80027fa <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800274a:	4b35      	ldr	r3, [pc, #212]	@ (8002820 <HAL_RCC_GetSysClockFreq+0xf8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2210      	movs	r2, #16
 8002750:	4013      	ands	r3, r2
 8002752:	d002      	beq.n	800275a <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002754:	4b33      	ldr	r3, [pc, #204]	@ (8002824 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002756:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002758:	e05d      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800275a:	4b33      	ldr	r3, [pc, #204]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x100>)
 800275c:	613b      	str	r3, [r7, #16]
      break;
 800275e:	e05a      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002760:	4b32      	ldr	r3, [pc, #200]	@ (800282c <HAL_RCC_GetSysClockFreq+0x104>)
 8002762:	613b      	str	r3, [r7, #16]
      break;
 8002764:	e057      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	0c9b      	lsrs	r3, r3, #18
 800276a:	220f      	movs	r2, #15
 800276c:	4013      	ands	r3, r2
 800276e:	4a30      	ldr	r2, [pc, #192]	@ (8002830 <HAL_RCC_GetSysClockFreq+0x108>)
 8002770:	5cd3      	ldrb	r3, [r2, r3]
 8002772:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	0d9b      	lsrs	r3, r3, #22
 8002778:	2203      	movs	r2, #3
 800277a:	4013      	ands	r3, r2
 800277c:	3301      	adds	r3, #1
 800277e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002780:	4b27      	ldr	r3, [pc, #156]	@ (8002820 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	2380      	movs	r3, #128	@ 0x80
 8002786:	025b      	lsls	r3, r3, #9
 8002788:	4013      	ands	r3, r2
 800278a:	d00f      	beq.n	80027ac <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	000a      	movs	r2, r1
 8002790:	0152      	lsls	r2, r2, #5
 8002792:	1a52      	subs	r2, r2, r1
 8002794:	0193      	lsls	r3, r2, #6
 8002796:	1a9b      	subs	r3, r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	185b      	adds	r3, r3, r1
 800279c:	025b      	lsls	r3, r3, #9
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	0018      	movs	r0, r3
 80027a2:	f7fd fcb1 	bl	8000108 <__udivsi3>
 80027a6:	0003      	movs	r3, r0
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	e023      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80027ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002820 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2210      	movs	r2, #16
 80027b2:	4013      	ands	r3, r2
 80027b4:	d00f      	beq.n	80027d6 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80027b6:	68b9      	ldr	r1, [r7, #8]
 80027b8:	000a      	movs	r2, r1
 80027ba:	0152      	lsls	r2, r2, #5
 80027bc:	1a52      	subs	r2, r2, r1
 80027be:	0193      	lsls	r3, r2, #6
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	185b      	adds	r3, r3, r1
 80027c6:	021b      	lsls	r3, r3, #8
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	0018      	movs	r0, r3
 80027cc:	f7fd fc9c 	bl	8000108 <__udivsi3>
 80027d0:	0003      	movs	r3, r0
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	e00e      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	000a      	movs	r2, r1
 80027da:	0152      	lsls	r2, r2, #5
 80027dc:	1a52      	subs	r2, r2, r1
 80027de:	0193      	lsls	r3, r2, #6
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	185b      	adds	r3, r3, r1
 80027e6:	029b      	lsls	r3, r3, #10
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	0018      	movs	r0, r3
 80027ec:	f7fd fc8c 	bl	8000108 <__udivsi3>
 80027f0:	0003      	movs	r3, r0
 80027f2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	613b      	str	r3, [r7, #16]
      break;
 80027f8:	e00d      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80027fa:	4b09      	ldr	r3, [pc, #36]	@ (8002820 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	0b5b      	lsrs	r3, r3, #13
 8002800:	2207      	movs	r2, #7
 8002802:	4013      	ands	r3, r2
 8002804:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	3301      	adds	r3, #1
 800280a:	2280      	movs	r2, #128	@ 0x80
 800280c:	0212      	lsls	r2, r2, #8
 800280e:	409a      	lsls	r2, r3
 8002810:	0013      	movs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
      break;
 8002814:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002816:	693b      	ldr	r3, [r7, #16]
}
 8002818:	0018      	movs	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	b006      	add	sp, #24
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40021000 	.word	0x40021000
 8002824:	003d0900 	.word	0x003d0900
 8002828:	00f42400 	.word	0x00f42400
 800282c:	007a1200 	.word	0x007a1200
 8002830:	08003b0c 	.word	0x08003b0c

08002834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002838:	4b02      	ldr	r3, [pc, #8]	@ (8002844 <HAL_RCC_GetHCLKFreq+0x10>)
 800283a:	681b      	ldr	r3, [r3, #0]
}
 800283c:	0018      	movs	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	46c0      	nop			@ (mov r8, r8)
 8002844:	20000000 	.word	0x20000000

08002848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800284c:	f7ff fff2 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 8002850:	0001      	movs	r1, r0
 8002852:	4b06      	ldr	r3, [pc, #24]	@ (800286c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	0a1b      	lsrs	r3, r3, #8
 8002858:	2207      	movs	r2, #7
 800285a:	4013      	ands	r3, r2
 800285c:	4a04      	ldr	r2, [pc, #16]	@ (8002870 <HAL_RCC_GetPCLK1Freq+0x28>)
 800285e:	5cd3      	ldrb	r3, [r2, r3]
 8002860:	40d9      	lsrs	r1, r3
 8002862:	000b      	movs	r3, r1
}
 8002864:	0018      	movs	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			@ (mov r8, r8)
 800286c:	40021000 	.word	0x40021000
 8002870:	08003b04 	.word	0x08003b04

08002874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002878:	f7ff ffdc 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 800287c:	0001      	movs	r1, r0
 800287e:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	0adb      	lsrs	r3, r3, #11
 8002884:	2207      	movs	r2, #7
 8002886:	4013      	ands	r3, r2
 8002888:	4a04      	ldr	r2, [pc, #16]	@ (800289c <HAL_RCC_GetPCLK2Freq+0x28>)
 800288a:	5cd3      	ldrb	r3, [r2, r3]
 800288c:	40d9      	lsrs	r1, r3
 800288e:	000b      	movs	r3, r1
}
 8002890:	0018      	movs	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	46c0      	nop			@ (mov r8, r8)
 8002898:	40021000 	.word	0x40021000
 800289c:	08003b04 	.word	0x08003b04

080028a0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80028a8:	2317      	movs	r3, #23
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2220      	movs	r2, #32
 80028b6:	4013      	ands	r3, r2
 80028b8:	d106      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	2380      	movs	r3, #128	@ 0x80
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	4013      	ands	r3, r2
 80028c4:	d100      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80028c6:	e104      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c8:	4bb9      	ldr	r3, [pc, #740]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028cc:	2380      	movs	r3, #128	@ 0x80
 80028ce:	055b      	lsls	r3, r3, #21
 80028d0:	4013      	ands	r3, r2
 80028d2:	d10a      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d4:	4bb6      	ldr	r3, [pc, #728]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028d8:	4bb5      	ldr	r3, [pc, #724]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028da:	2180      	movs	r1, #128	@ 0x80
 80028dc:	0549      	lsls	r1, r1, #21
 80028de:	430a      	orrs	r2, r1
 80028e0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80028e2:	2317      	movs	r3, #23
 80028e4:	18fb      	adds	r3, r7, r3
 80028e6:	2201      	movs	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ea:	4bb2      	ldr	r3, [pc, #712]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	2380      	movs	r3, #128	@ 0x80
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4013      	ands	r3, r2
 80028f4:	d11a      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f6:	4baf      	ldr	r3, [pc, #700]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4bae      	ldr	r3, [pc, #696]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80028fc:	2180      	movs	r1, #128	@ 0x80
 80028fe:	0049      	lsls	r1, r1, #1
 8002900:	430a      	orrs	r2, r1
 8002902:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002904:	f7fe fba4 	bl	8001050 <HAL_GetTick>
 8002908:	0003      	movs	r3, r0
 800290a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290c:	e008      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800290e:	f7fe fb9f 	bl	8001050 <HAL_GetTick>
 8002912:	0002      	movs	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b64      	cmp	r3, #100	@ 0x64
 800291a:	d901      	bls.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e143      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002920:	4ba4      	ldr	r3, [pc, #656]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	2380      	movs	r3, #128	@ 0x80
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	4013      	ands	r3, r2
 800292a:	d0f0      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800292c:	4ba0      	ldr	r3, [pc, #640]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	23c0      	movs	r3, #192	@ 0xc0
 8002932:	039b      	lsls	r3, r3, #14
 8002934:	4013      	ands	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	23c0      	movs	r3, #192	@ 0xc0
 800293e:	039b      	lsls	r3, r3, #14
 8002940:	4013      	ands	r3, r2
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	429a      	cmp	r2, r3
 8002946:	d107      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	23c0      	movs	r3, #192	@ 0xc0
 800294e:	039b      	lsls	r3, r3, #14
 8002950:	4013      	ands	r3, r2
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	429a      	cmp	r2, r3
 8002956:	d013      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	23c0      	movs	r3, #192	@ 0xc0
 800295e:	029b      	lsls	r3, r3, #10
 8002960:	401a      	ands	r2, r3
 8002962:	23c0      	movs	r3, #192	@ 0xc0
 8002964:	029b      	lsls	r3, r3, #10
 8002966:	429a      	cmp	r2, r3
 8002968:	d10a      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800296a:	4b91      	ldr	r3, [pc, #580]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	2380      	movs	r3, #128	@ 0x80
 8002970:	029b      	lsls	r3, r3, #10
 8002972:	401a      	ands	r2, r3
 8002974:	2380      	movs	r3, #128	@ 0x80
 8002976:	029b      	lsls	r3, r3, #10
 8002978:	429a      	cmp	r2, r3
 800297a:	d101      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e113      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002980:	4b8b      	ldr	r3, [pc, #556]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002982:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002984:	23c0      	movs	r3, #192	@ 0xc0
 8002986:	029b      	lsls	r3, r3, #10
 8002988:	4013      	ands	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d049      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	23c0      	movs	r3, #192	@ 0xc0
 8002998:	029b      	lsls	r3, r3, #10
 800299a:	4013      	ands	r3, r2
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d004      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2220      	movs	r2, #32
 80029a8:	4013      	ands	r3, r2
 80029aa:	d10d      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	23c0      	movs	r3, #192	@ 0xc0
 80029b2:	029b      	lsls	r3, r3, #10
 80029b4:	4013      	ands	r3, r2
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d034      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	2380      	movs	r3, #128	@ 0x80
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	4013      	ands	r3, r2
 80029c6:	d02e      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80029c8:	4b79      	ldr	r3, [pc, #484]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029cc:	4a7a      	ldr	r2, [pc, #488]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029d2:	4b77      	ldr	r3, [pc, #476]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029d6:	4b76      	ldr	r3, [pc, #472]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029d8:	2180      	movs	r1, #128	@ 0x80
 80029da:	0309      	lsls	r1, r1, #12
 80029dc:	430a      	orrs	r2, r1
 80029de:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029e0:	4b73      	ldr	r3, [pc, #460]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029e4:	4b72      	ldr	r3, [pc, #456]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029e6:	4975      	ldr	r1, [pc, #468]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80029e8:	400a      	ands	r2, r1
 80029ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80029ec:	4b70      	ldr	r3, [pc, #448]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	2380      	movs	r3, #128	@ 0x80
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	4013      	ands	r3, r2
 80029fa:	d014      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fc:	f7fe fb28 	bl	8001050 <HAL_GetTick>
 8002a00:	0003      	movs	r3, r0
 8002a02:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a04:	e009      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7fe fb23 	bl	8001050 <HAL_GetTick>
 8002a0a:	0002      	movs	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	4a6b      	ldr	r2, [pc, #428]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e0c6      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a1a:	4b65      	ldr	r3, [pc, #404]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a1e:	2380      	movs	r3, #128	@ 0x80
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4013      	ands	r3, r2
 8002a24:	d0ef      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	2380      	movs	r3, #128	@ 0x80
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d01f      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	23c0      	movs	r3, #192	@ 0xc0
 8002a38:	029b      	lsls	r3, r3, #10
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	23c0      	movs	r3, #192	@ 0xc0
 8002a3e:	029b      	lsls	r3, r3, #10
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d10c      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002a44:	4b5a      	ldr	r3, [pc, #360]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a5e      	ldr	r2, [pc, #376]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	0019      	movs	r1, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	23c0      	movs	r3, #192	@ 0xc0
 8002a54:	039b      	lsls	r3, r3, #14
 8002a56:	401a      	ands	r2, r3
 8002a58:	4b55      	ldr	r3, [pc, #340]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	4b54      	ldr	r3, [pc, #336]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a60:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	23c0      	movs	r3, #192	@ 0xc0
 8002a68:	029b      	lsls	r3, r3, #10
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	4b50      	ldr	r3, [pc, #320]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2220      	movs	r2, #32
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d01f      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	23c0      	movs	r3, #192	@ 0xc0
 8002a82:	029b      	lsls	r3, r3, #10
 8002a84:	401a      	ands	r2, r3
 8002a86:	23c0      	movs	r3, #192	@ 0xc0
 8002a88:	029b      	lsls	r3, r3, #10
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002a8e:	4b48      	ldr	r3, [pc, #288]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a4c      	ldr	r2, [pc, #304]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	0019      	movs	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	23c0      	movs	r3, #192	@ 0xc0
 8002a9e:	039b      	lsls	r3, r3, #14
 8002aa0:	401a      	ands	r2, r3
 8002aa2:	4b43      	ldr	r3, [pc, #268]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	4b41      	ldr	r3, [pc, #260]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002aaa:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	23c0      	movs	r3, #192	@ 0xc0
 8002ab2:	029b      	lsls	r3, r3, #10
 8002ab4:	401a      	ands	r2, r3
 8002ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002abc:	2317      	movs	r3, #23
 8002abe:	18fb      	adds	r3, r7, r3
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d105      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac6:	4b3a      	ldr	r3, [pc, #232]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ac8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002aca:	4b39      	ldr	r3, [pc, #228]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002acc:	493e      	ldr	r1, [pc, #248]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8002ace:	400a      	ands	r2, r1
 8002ad0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d009      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002adc:	4b34      	ldr	r3, [pc, #208]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	4393      	bics	r3, r2
 8002ae4:	0019      	movs	r1, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	4b31      	ldr	r3, [pc, #196]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002aec:	430a      	orrs	r2, r1
 8002aee:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2202      	movs	r2, #2
 8002af6:	4013      	ands	r3, r2
 8002af8:	d009      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002afa:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002afe:	220c      	movs	r2, #12
 8002b00:	4393      	bics	r3, r2
 8002b02:	0019      	movs	r1, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	4b29      	ldr	r3, [pc, #164]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2204      	movs	r2, #4
 8002b14:	4013      	ands	r3, r2
 8002b16:	d009      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b18:	4b25      	ldr	r3, [pc, #148]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b1c:	4a2b      	ldr	r2, [pc, #172]	@ (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	0019      	movs	r1, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695a      	ldr	r2, [r3, #20]
 8002b26:	4b22      	ldr	r3, [pc, #136]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2208      	movs	r2, #8
 8002b32:	4013      	ands	r3, r2
 8002b34:	d009      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b36:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b3a:	4a25      	ldr	r2, [pc, #148]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	0019      	movs	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	699a      	ldr	r2, [r3, #24]
 8002b44:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b46:	430a      	orrs	r2, r1
 8002b48:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	2380      	movs	r3, #128	@ 0x80
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4013      	ands	r3, r2
 8002b54:	d009      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b56:	4b16      	ldr	r3, [pc, #88]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5a:	4a17      	ldr	r2, [pc, #92]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	0019      	movs	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69da      	ldr	r2, [r3, #28]
 8002b64:	4b12      	ldr	r3, [pc, #72]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b66:	430a      	orrs	r2, r1
 8002b68:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2240      	movs	r2, #64	@ 0x40
 8002b70:	4013      	ands	r3, r2
 8002b72:	d009      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b74:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b78:	4a16      	ldr	r2, [pc, #88]	@ (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	0019      	movs	r1, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b82:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b84:	430a      	orrs	r2, r1
 8002b86:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2280      	movs	r2, #128	@ 0x80
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d009      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002b92:	4b07      	ldr	r3, [pc, #28]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b96:	4a10      	ldr	r2, [pc, #64]	@ (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1a      	ldr	r2, [r3, #32]
 8002ba0:	4b03      	ldr	r3, [pc, #12]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	0018      	movs	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b006      	add	sp, #24
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40007000 	.word	0x40007000
 8002bb8:	fffcffff 	.word	0xfffcffff
 8002bbc:	fff7ffff 	.word	0xfff7ffff
 8002bc0:	00001388 	.word	0x00001388
 8002bc4:	ffcfffff 	.word	0xffcfffff
 8002bc8:	efffffff 	.word	0xefffffff
 8002bcc:	fffff3ff 	.word	0xfffff3ff
 8002bd0:	ffffcfff 	.word	0xffffcfff
 8002bd4:	fbffffff 	.word	0xfbffffff
 8002bd8:	fff3ffff 	.word	0xfff3ffff

08002bdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e044      	b.n	8002c78 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d107      	bne.n	8002c06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2278      	movs	r2, #120	@ 0x78
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	0018      	movs	r0, r3
 8002c02:	f7fe f8d5 	bl	8000db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2224      	movs	r2, #36	@ 0x24
 8002c0a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2101      	movs	r1, #1
 8002c18:	438a      	bics	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	0018      	movs	r0, r3
 8002c28:	f000 fc50 	bl	80034cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f000 f9ae 	bl	8002f90 <UART_SetConfig>
 8002c34:	0003      	movs	r3, r0
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e01c      	b.n	8002c78 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	490d      	ldr	r1, [pc, #52]	@ (8002c80 <HAL_UART_Init+0xa4>)
 8002c4a:	400a      	ands	r2, r1
 8002c4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	212a      	movs	r1, #42	@ 0x2a
 8002c5a:	438a      	bics	r2, r1
 8002c5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2101      	movs	r1, #1
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	0018      	movs	r0, r3
 8002c72:	f000 fcdf 	bl	8003634 <UART_CheckIdleState>
 8002c76:	0003      	movs	r3, r0
}
 8002c78:	0018      	movs	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b002      	add	sp, #8
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	ffffb7ff 	.word	0xffffb7ff

08002c84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08a      	sub	sp, #40	@ 0x28
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	1dbb      	adds	r3, r7, #6
 8002c92:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d000      	beq.n	8002c9e <HAL_UART_Transmit+0x1a>
 8002c9c:	e08c      	b.n	8002db8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_UART_Transmit+0x28>
 8002ca4:	1dbb      	adds	r3, r7, #6
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e084      	b.n	8002dba <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	2380      	movs	r3, #128	@ 0x80
 8002cb6:	015b      	lsls	r3, r3, #5
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d109      	bne.n	8002cd0 <HAL_UART_Transmit+0x4c>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d105      	bne.n	8002cd0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d001      	beq.n	8002cd0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e074      	b.n	8002dba <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2284      	movs	r2, #132	@ 0x84
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2221      	movs	r2, #33	@ 0x21
 8002cdc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cde:	f7fe f9b7 	bl	8001050 <HAL_GetTick>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1dba      	adds	r2, r7, #6
 8002cea:	2150      	movs	r1, #80	@ 0x50
 8002cec:	8812      	ldrh	r2, [r2, #0]
 8002cee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1dba      	adds	r2, r7, #6
 8002cf4:	2152      	movs	r1, #82	@ 0x52
 8002cf6:	8812      	ldrh	r2, [r2, #0]
 8002cf8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	2380      	movs	r3, #128	@ 0x80
 8002d00:	015b      	lsls	r3, r3, #5
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d108      	bne.n	8002d18 <HAL_UART_Transmit+0x94>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d104      	bne.n	8002d18 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	e003      	b.n	8002d20 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d20:	e02f      	b.n	8002d82 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	0013      	movs	r3, r2
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2180      	movs	r1, #128	@ 0x80
 8002d30:	f000 fd28 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 8002d34:	1e03      	subs	r3, r0, #0
 8002d36:	d004      	beq.n	8002d42 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e03b      	b.n	8002dba <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10b      	bne.n	8002d60 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	001a      	movs	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	05d2      	lsls	r2, r2, #23
 8002d54:	0dd2      	lsrs	r2, r2, #23
 8002d56:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	3302      	adds	r3, #2
 8002d5c:	61bb      	str	r3, [r7, #24]
 8002d5e:	e007      	b.n	8002d70 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	781a      	ldrb	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2252      	movs	r2, #82	@ 0x52
 8002d74:	5a9b      	ldrh	r3, [r3, r2]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b299      	uxth	r1, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2252      	movs	r2, #82	@ 0x52
 8002d80:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2252      	movs	r2, #82	@ 0x52
 8002d86:	5a9b      	ldrh	r3, [r3, r2]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1c9      	bne.n	8002d22 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	0013      	movs	r3, r2
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2140      	movs	r1, #64	@ 0x40
 8002d9c:	f000 fcf2 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 8002da0:	1e03      	subs	r3, r0, #0
 8002da2:	d004      	beq.n	8002dae <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e005      	b.n	8002dba <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2220      	movs	r2, #32
 8002db2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	e000      	b.n	8002dba <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002db8:	2302      	movs	r3, #2
  }
}
 8002dba:	0018      	movs	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b008      	add	sp, #32
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	@ 0x28
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	1dbb      	adds	r3, r7, #6
 8002dd2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2280      	movs	r2, #128	@ 0x80
 8002dd8:	589b      	ldr	r3, [r3, r2]
 8002dda:	2b20      	cmp	r3, #32
 8002ddc:	d000      	beq.n	8002de0 <HAL_UART_Receive+0x1c>
 8002dde:	e0d0      	b.n	8002f82 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_UART_Receive+0x2a>
 8002de6:	1dbb      	adds	r3, r7, #6
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e0c8      	b.n	8002f84 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	2380      	movs	r3, #128	@ 0x80
 8002df8:	015b      	lsls	r3, r3, #5
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d109      	bne.n	8002e12 <HAL_UART_Receive+0x4e>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d105      	bne.n	8002e12 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d001      	beq.n	8002e12 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e0b8      	b.n	8002f84 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2284      	movs	r2, #132	@ 0x84
 8002e16:	2100      	movs	r1, #0
 8002e18:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2280      	movs	r2, #128	@ 0x80
 8002e1e:	2122      	movs	r1, #34	@ 0x22
 8002e20:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e28:	f7fe f912 	bl	8001050 <HAL_GetTick>
 8002e2c:	0003      	movs	r3, r0
 8002e2e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1dba      	adds	r2, r7, #6
 8002e34:	2158      	movs	r1, #88	@ 0x58
 8002e36:	8812      	ldrh	r2, [r2, #0]
 8002e38:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	1dba      	adds	r2, r7, #6
 8002e3e:	215a      	movs	r1, #90	@ 0x5a
 8002e40:	8812      	ldrh	r2, [r2, #0]
 8002e42:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	2380      	movs	r3, #128	@ 0x80
 8002e4a:	015b      	lsls	r3, r3, #5
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d10d      	bne.n	8002e6c <HAL_UART_Receive+0xa8>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d104      	bne.n	8002e62 <HAL_UART_Receive+0x9e>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	225c      	movs	r2, #92	@ 0x5c
 8002e5c:	494b      	ldr	r1, [pc, #300]	@ (8002f8c <HAL_UART_Receive+0x1c8>)
 8002e5e:	5299      	strh	r1, [r3, r2]
 8002e60:	e02e      	b.n	8002ec0 <HAL_UART_Receive+0xfc>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	225c      	movs	r2, #92	@ 0x5c
 8002e66:	21ff      	movs	r1, #255	@ 0xff
 8002e68:	5299      	strh	r1, [r3, r2]
 8002e6a:	e029      	b.n	8002ec0 <HAL_UART_Receive+0xfc>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10d      	bne.n	8002e90 <HAL_UART_Receive+0xcc>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d104      	bne.n	8002e86 <HAL_UART_Receive+0xc2>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	225c      	movs	r2, #92	@ 0x5c
 8002e80:	21ff      	movs	r1, #255	@ 0xff
 8002e82:	5299      	strh	r1, [r3, r2]
 8002e84:	e01c      	b.n	8002ec0 <HAL_UART_Receive+0xfc>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	225c      	movs	r2, #92	@ 0x5c
 8002e8a:	217f      	movs	r1, #127	@ 0x7f
 8002e8c:	5299      	strh	r1, [r3, r2]
 8002e8e:	e017      	b.n	8002ec0 <HAL_UART_Receive+0xfc>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	2380      	movs	r3, #128	@ 0x80
 8002e96:	055b      	lsls	r3, r3, #21
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d10d      	bne.n	8002eb8 <HAL_UART_Receive+0xf4>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d104      	bne.n	8002eae <HAL_UART_Receive+0xea>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	225c      	movs	r2, #92	@ 0x5c
 8002ea8:	217f      	movs	r1, #127	@ 0x7f
 8002eaa:	5299      	strh	r1, [r3, r2]
 8002eac:	e008      	b.n	8002ec0 <HAL_UART_Receive+0xfc>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	225c      	movs	r2, #92	@ 0x5c
 8002eb2:	213f      	movs	r1, #63	@ 0x3f
 8002eb4:	5299      	strh	r1, [r3, r2]
 8002eb6:	e003      	b.n	8002ec0 <HAL_UART_Receive+0xfc>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	225c      	movs	r2, #92	@ 0x5c
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002ec0:	2312      	movs	r3, #18
 8002ec2:	18fb      	adds	r3, r7, r3
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	215c      	movs	r1, #92	@ 0x5c
 8002ec8:	5a52      	ldrh	r2, [r2, r1]
 8002eca:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	2380      	movs	r3, #128	@ 0x80
 8002ed2:	015b      	lsls	r3, r3, #5
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d108      	bne.n	8002eea <HAL_UART_Receive+0x126>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d104      	bne.n	8002eea <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	61bb      	str	r3, [r7, #24]
 8002ee8:	e003      	b.n	8002ef2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002ef2:	e03a      	b.n	8002f6a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	0013      	movs	r3, r2
 8002efe:	2200      	movs	r2, #0
 8002f00:	2120      	movs	r1, #32
 8002f02:	f000 fc3f 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 8002f06:	1e03      	subs	r3, r0, #0
 8002f08:	d005      	beq.n	8002f16 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2280      	movs	r2, #128	@ 0x80
 8002f0e:	2120      	movs	r1, #32
 8002f10:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e036      	b.n	8002f84 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10e      	bne.n	8002f3a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	2212      	movs	r2, #18
 8002f26:	18ba      	adds	r2, r7, r2
 8002f28:	8812      	ldrh	r2, [r2, #0]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	3302      	adds	r3, #2
 8002f36:	61bb      	str	r3, [r7, #24]
 8002f38:	e00e      	b.n	8002f58 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2212      	movs	r2, #18
 8002f44:	18ba      	adds	r2, r7, r2
 8002f46:	8812      	ldrh	r2, [r2, #0]
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	3301      	adds	r3, #1
 8002f56:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	225a      	movs	r2, #90	@ 0x5a
 8002f5c:	5a9b      	ldrh	r3, [r3, r2]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	3b01      	subs	r3, #1
 8002f62:	b299      	uxth	r1, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	225a      	movs	r2, #90	@ 0x5a
 8002f68:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	225a      	movs	r2, #90	@ 0x5a
 8002f6e:	5a9b      	ldrh	r3, [r3, r2]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1be      	bne.n	8002ef4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2280      	movs	r2, #128	@ 0x80
 8002f7a:	2120      	movs	r1, #32
 8002f7c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e000      	b.n	8002f84 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8002f82:	2302      	movs	r3, #2
  }
}
 8002f84:	0018      	movs	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b008      	add	sp, #32
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	000001ff 	.word	0x000001ff

08002f90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f90:	b5b0      	push	{r4, r5, r7, lr}
 8002f92:	b08e      	sub	sp, #56	@ 0x38
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f98:	231a      	movs	r3, #26
 8002f9a:	2218      	movs	r2, #24
 8002f9c:	189b      	adds	r3, r3, r2
 8002f9e:	19db      	adds	r3, r3, r7
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	431a      	orrs	r2, r3
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4ac3      	ldr	r2, [pc, #780]	@ (80032d0 <UART_SetConfig+0x340>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	4abe      	ldr	r2, [pc, #760]	@ (80032d4 <UART_SetConfig+0x344>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	0019      	movs	r1, r3
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4ab8      	ldr	r2, [pc, #736]	@ (80032d8 <UART_SetConfig+0x348>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d004      	beq.n	8003004 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003000:	4313      	orrs	r3, r2
 8003002:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	4ab4      	ldr	r2, [pc, #720]	@ (80032dc <UART_SetConfig+0x34c>)
 800300c:	4013      	ands	r3, r2
 800300e:	0019      	movs	r1, r3
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003016:	430a      	orrs	r2, r1
 8003018:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4ab0      	ldr	r2, [pc, #704]	@ (80032e0 <UART_SetConfig+0x350>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d131      	bne.n	8003088 <UART_SetConfig+0xf8>
 8003024:	4baf      	ldr	r3, [pc, #700]	@ (80032e4 <UART_SetConfig+0x354>)
 8003026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003028:	2203      	movs	r2, #3
 800302a:	4013      	ands	r3, r2
 800302c:	2b03      	cmp	r3, #3
 800302e:	d01d      	beq.n	800306c <UART_SetConfig+0xdc>
 8003030:	d823      	bhi.n	800307a <UART_SetConfig+0xea>
 8003032:	2b02      	cmp	r3, #2
 8003034:	d00c      	beq.n	8003050 <UART_SetConfig+0xc0>
 8003036:	d820      	bhi.n	800307a <UART_SetConfig+0xea>
 8003038:	2b00      	cmp	r3, #0
 800303a:	d002      	beq.n	8003042 <UART_SetConfig+0xb2>
 800303c:	2b01      	cmp	r3, #1
 800303e:	d00e      	beq.n	800305e <UART_SetConfig+0xce>
 8003040:	e01b      	b.n	800307a <UART_SetConfig+0xea>
 8003042:	231b      	movs	r3, #27
 8003044:	2218      	movs	r2, #24
 8003046:	189b      	adds	r3, r3, r2
 8003048:	19db      	adds	r3, r3, r7
 800304a:	2201      	movs	r2, #1
 800304c:	701a      	strb	r2, [r3, #0]
 800304e:	e0b4      	b.n	80031ba <UART_SetConfig+0x22a>
 8003050:	231b      	movs	r3, #27
 8003052:	2218      	movs	r2, #24
 8003054:	189b      	adds	r3, r3, r2
 8003056:	19db      	adds	r3, r3, r7
 8003058:	2202      	movs	r2, #2
 800305a:	701a      	strb	r2, [r3, #0]
 800305c:	e0ad      	b.n	80031ba <UART_SetConfig+0x22a>
 800305e:	231b      	movs	r3, #27
 8003060:	2218      	movs	r2, #24
 8003062:	189b      	adds	r3, r3, r2
 8003064:	19db      	adds	r3, r3, r7
 8003066:	2204      	movs	r2, #4
 8003068:	701a      	strb	r2, [r3, #0]
 800306a:	e0a6      	b.n	80031ba <UART_SetConfig+0x22a>
 800306c:	231b      	movs	r3, #27
 800306e:	2218      	movs	r2, #24
 8003070:	189b      	adds	r3, r3, r2
 8003072:	19db      	adds	r3, r3, r7
 8003074:	2208      	movs	r2, #8
 8003076:	701a      	strb	r2, [r3, #0]
 8003078:	e09f      	b.n	80031ba <UART_SetConfig+0x22a>
 800307a:	231b      	movs	r3, #27
 800307c:	2218      	movs	r2, #24
 800307e:	189b      	adds	r3, r3, r2
 8003080:	19db      	adds	r3, r3, r7
 8003082:	2210      	movs	r2, #16
 8003084:	701a      	strb	r2, [r3, #0]
 8003086:	e098      	b.n	80031ba <UART_SetConfig+0x22a>
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a96      	ldr	r2, [pc, #600]	@ (80032e8 <UART_SetConfig+0x358>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d131      	bne.n	80030f6 <UART_SetConfig+0x166>
 8003092:	4b94      	ldr	r3, [pc, #592]	@ (80032e4 <UART_SetConfig+0x354>)
 8003094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003096:	220c      	movs	r2, #12
 8003098:	4013      	ands	r3, r2
 800309a:	2b0c      	cmp	r3, #12
 800309c:	d01d      	beq.n	80030da <UART_SetConfig+0x14a>
 800309e:	d823      	bhi.n	80030e8 <UART_SetConfig+0x158>
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d00c      	beq.n	80030be <UART_SetConfig+0x12e>
 80030a4:	d820      	bhi.n	80030e8 <UART_SetConfig+0x158>
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <UART_SetConfig+0x120>
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d00e      	beq.n	80030cc <UART_SetConfig+0x13c>
 80030ae:	e01b      	b.n	80030e8 <UART_SetConfig+0x158>
 80030b0:	231b      	movs	r3, #27
 80030b2:	2218      	movs	r2, #24
 80030b4:	189b      	adds	r3, r3, r2
 80030b6:	19db      	adds	r3, r3, r7
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
 80030bc:	e07d      	b.n	80031ba <UART_SetConfig+0x22a>
 80030be:	231b      	movs	r3, #27
 80030c0:	2218      	movs	r2, #24
 80030c2:	189b      	adds	r3, r3, r2
 80030c4:	19db      	adds	r3, r3, r7
 80030c6:	2202      	movs	r2, #2
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	e076      	b.n	80031ba <UART_SetConfig+0x22a>
 80030cc:	231b      	movs	r3, #27
 80030ce:	2218      	movs	r2, #24
 80030d0:	189b      	adds	r3, r3, r2
 80030d2:	19db      	adds	r3, r3, r7
 80030d4:	2204      	movs	r2, #4
 80030d6:	701a      	strb	r2, [r3, #0]
 80030d8:	e06f      	b.n	80031ba <UART_SetConfig+0x22a>
 80030da:	231b      	movs	r3, #27
 80030dc:	2218      	movs	r2, #24
 80030de:	189b      	adds	r3, r3, r2
 80030e0:	19db      	adds	r3, r3, r7
 80030e2:	2208      	movs	r2, #8
 80030e4:	701a      	strb	r2, [r3, #0]
 80030e6:	e068      	b.n	80031ba <UART_SetConfig+0x22a>
 80030e8:	231b      	movs	r3, #27
 80030ea:	2218      	movs	r2, #24
 80030ec:	189b      	adds	r3, r3, r2
 80030ee:	19db      	adds	r3, r3, r7
 80030f0:	2210      	movs	r2, #16
 80030f2:	701a      	strb	r2, [r3, #0]
 80030f4:	e061      	b.n	80031ba <UART_SetConfig+0x22a>
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a7c      	ldr	r2, [pc, #496]	@ (80032ec <UART_SetConfig+0x35c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d106      	bne.n	800310e <UART_SetConfig+0x17e>
 8003100:	231b      	movs	r3, #27
 8003102:	2218      	movs	r2, #24
 8003104:	189b      	adds	r3, r3, r2
 8003106:	19db      	adds	r3, r3, r7
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	e055      	b.n	80031ba <UART_SetConfig+0x22a>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a77      	ldr	r2, [pc, #476]	@ (80032f0 <UART_SetConfig+0x360>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d106      	bne.n	8003126 <UART_SetConfig+0x196>
 8003118:	231b      	movs	r3, #27
 800311a:	2218      	movs	r2, #24
 800311c:	189b      	adds	r3, r3, r2
 800311e:	19db      	adds	r3, r3, r7
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
 8003124:	e049      	b.n	80031ba <UART_SetConfig+0x22a>
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a6b      	ldr	r2, [pc, #428]	@ (80032d8 <UART_SetConfig+0x348>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d13e      	bne.n	80031ae <UART_SetConfig+0x21e>
 8003130:	4b6c      	ldr	r3, [pc, #432]	@ (80032e4 <UART_SetConfig+0x354>)
 8003132:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003134:	23c0      	movs	r3, #192	@ 0xc0
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	4013      	ands	r3, r2
 800313a:	22c0      	movs	r2, #192	@ 0xc0
 800313c:	0112      	lsls	r2, r2, #4
 800313e:	4293      	cmp	r3, r2
 8003140:	d027      	beq.n	8003192 <UART_SetConfig+0x202>
 8003142:	22c0      	movs	r2, #192	@ 0xc0
 8003144:	0112      	lsls	r2, r2, #4
 8003146:	4293      	cmp	r3, r2
 8003148:	d82a      	bhi.n	80031a0 <UART_SetConfig+0x210>
 800314a:	2280      	movs	r2, #128	@ 0x80
 800314c:	0112      	lsls	r2, r2, #4
 800314e:	4293      	cmp	r3, r2
 8003150:	d011      	beq.n	8003176 <UART_SetConfig+0x1e6>
 8003152:	2280      	movs	r2, #128	@ 0x80
 8003154:	0112      	lsls	r2, r2, #4
 8003156:	4293      	cmp	r3, r2
 8003158:	d822      	bhi.n	80031a0 <UART_SetConfig+0x210>
 800315a:	2b00      	cmp	r3, #0
 800315c:	d004      	beq.n	8003168 <UART_SetConfig+0x1d8>
 800315e:	2280      	movs	r2, #128	@ 0x80
 8003160:	00d2      	lsls	r2, r2, #3
 8003162:	4293      	cmp	r3, r2
 8003164:	d00e      	beq.n	8003184 <UART_SetConfig+0x1f4>
 8003166:	e01b      	b.n	80031a0 <UART_SetConfig+0x210>
 8003168:	231b      	movs	r3, #27
 800316a:	2218      	movs	r2, #24
 800316c:	189b      	adds	r3, r3, r2
 800316e:	19db      	adds	r3, r3, r7
 8003170:	2200      	movs	r2, #0
 8003172:	701a      	strb	r2, [r3, #0]
 8003174:	e021      	b.n	80031ba <UART_SetConfig+0x22a>
 8003176:	231b      	movs	r3, #27
 8003178:	2218      	movs	r2, #24
 800317a:	189b      	adds	r3, r3, r2
 800317c:	19db      	adds	r3, r3, r7
 800317e:	2202      	movs	r2, #2
 8003180:	701a      	strb	r2, [r3, #0]
 8003182:	e01a      	b.n	80031ba <UART_SetConfig+0x22a>
 8003184:	231b      	movs	r3, #27
 8003186:	2218      	movs	r2, #24
 8003188:	189b      	adds	r3, r3, r2
 800318a:	19db      	adds	r3, r3, r7
 800318c:	2204      	movs	r2, #4
 800318e:	701a      	strb	r2, [r3, #0]
 8003190:	e013      	b.n	80031ba <UART_SetConfig+0x22a>
 8003192:	231b      	movs	r3, #27
 8003194:	2218      	movs	r2, #24
 8003196:	189b      	adds	r3, r3, r2
 8003198:	19db      	adds	r3, r3, r7
 800319a:	2208      	movs	r2, #8
 800319c:	701a      	strb	r2, [r3, #0]
 800319e:	e00c      	b.n	80031ba <UART_SetConfig+0x22a>
 80031a0:	231b      	movs	r3, #27
 80031a2:	2218      	movs	r2, #24
 80031a4:	189b      	adds	r3, r3, r2
 80031a6:	19db      	adds	r3, r3, r7
 80031a8:	2210      	movs	r2, #16
 80031aa:	701a      	strb	r2, [r3, #0]
 80031ac:	e005      	b.n	80031ba <UART_SetConfig+0x22a>
 80031ae:	231b      	movs	r3, #27
 80031b0:	2218      	movs	r2, #24
 80031b2:	189b      	adds	r3, r3, r2
 80031b4:	19db      	adds	r3, r3, r7
 80031b6:	2210      	movs	r2, #16
 80031b8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a46      	ldr	r2, [pc, #280]	@ (80032d8 <UART_SetConfig+0x348>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d000      	beq.n	80031c6 <UART_SetConfig+0x236>
 80031c4:	e09a      	b.n	80032fc <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031c6:	231b      	movs	r3, #27
 80031c8:	2218      	movs	r2, #24
 80031ca:	189b      	adds	r3, r3, r2
 80031cc:	19db      	adds	r3, r3, r7
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d01d      	beq.n	8003210 <UART_SetConfig+0x280>
 80031d4:	dc20      	bgt.n	8003218 <UART_SetConfig+0x288>
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d015      	beq.n	8003206 <UART_SetConfig+0x276>
 80031da:	dc1d      	bgt.n	8003218 <UART_SetConfig+0x288>
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <UART_SetConfig+0x256>
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d005      	beq.n	80031f0 <UART_SetConfig+0x260>
 80031e4:	e018      	b.n	8003218 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031e6:	f7ff fb2f 	bl	8002848 <HAL_RCC_GetPCLK1Freq>
 80031ea:	0003      	movs	r3, r0
 80031ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80031ee:	e01c      	b.n	800322a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031f0:	4b3c      	ldr	r3, [pc, #240]	@ (80032e4 <UART_SetConfig+0x354>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2210      	movs	r2, #16
 80031f6:	4013      	ands	r3, r2
 80031f8:	d002      	beq.n	8003200 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80031fa:	4b3e      	ldr	r3, [pc, #248]	@ (80032f4 <UART_SetConfig+0x364>)
 80031fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80031fe:	e014      	b.n	800322a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003200:	4b3d      	ldr	r3, [pc, #244]	@ (80032f8 <UART_SetConfig+0x368>)
 8003202:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003204:	e011      	b.n	800322a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003206:	f7ff fa8f 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 800320a:	0003      	movs	r3, r0
 800320c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800320e:	e00c      	b.n	800322a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003210:	2380      	movs	r3, #128	@ 0x80
 8003212:	021b      	lsls	r3, r3, #8
 8003214:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003216:	e008      	b.n	800322a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800321c:	231a      	movs	r3, #26
 800321e:	2218      	movs	r2, #24
 8003220:	189b      	adds	r3, r3, r2
 8003222:	19db      	adds	r3, r3, r7
 8003224:	2201      	movs	r2, #1
 8003226:	701a      	strb	r2, [r3, #0]
        break;
 8003228:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800322a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d100      	bne.n	8003232 <UART_SetConfig+0x2a2>
 8003230:	e133      	b.n	800349a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	0013      	movs	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	189b      	adds	r3, r3, r2
 800323c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800323e:	429a      	cmp	r2, r3
 8003240:	d305      	bcc.n	800324e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003248:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800324a:	429a      	cmp	r2, r3
 800324c:	d906      	bls.n	800325c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800324e:	231a      	movs	r3, #26
 8003250:	2218      	movs	r2, #24
 8003252:	189b      	adds	r3, r3, r2
 8003254:	19db      	adds	r3, r3, r7
 8003256:	2201      	movs	r2, #1
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	e11e      	b.n	800349a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800325c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	6939      	ldr	r1, [r7, #16]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	000b      	movs	r3, r1
 800326a:	0e1b      	lsrs	r3, r3, #24
 800326c:	0010      	movs	r0, r2
 800326e:	0205      	lsls	r5, r0, #8
 8003270:	431d      	orrs	r5, r3
 8003272:	000b      	movs	r3, r1
 8003274:	021c      	lsls	r4, r3, #8
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	68b8      	ldr	r0, [r7, #8]
 8003284:	68f9      	ldr	r1, [r7, #12]
 8003286:	1900      	adds	r0, r0, r4
 8003288:	4169      	adcs	r1, r5
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	2300      	movs	r3, #0
 8003292:	607b      	str	r3, [r7, #4]
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f7fc ffc2 	bl	8000220 <__aeabi_uldivmod>
 800329c:	0002      	movs	r2, r0
 800329e:	000b      	movs	r3, r1
 80032a0:	0013      	movs	r3, r2
 80032a2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032a6:	23c0      	movs	r3, #192	@ 0xc0
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d309      	bcc.n	80032c2 <UART_SetConfig+0x332>
 80032ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032b0:	2380      	movs	r3, #128	@ 0x80
 80032b2:	035b      	lsls	r3, r3, #13
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d204      	bcs.n	80032c2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032be:	60da      	str	r2, [r3, #12]
 80032c0:	e0eb      	b.n	800349a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80032c2:	231a      	movs	r3, #26
 80032c4:	2218      	movs	r2, #24
 80032c6:	189b      	adds	r3, r3, r2
 80032c8:	19db      	adds	r3, r3, r7
 80032ca:	2201      	movs	r2, #1
 80032cc:	701a      	strb	r2, [r3, #0]
 80032ce:	e0e4      	b.n	800349a <UART_SetConfig+0x50a>
 80032d0:	efff69f3 	.word	0xefff69f3
 80032d4:	ffffcfff 	.word	0xffffcfff
 80032d8:	40004800 	.word	0x40004800
 80032dc:	fffff4ff 	.word	0xfffff4ff
 80032e0:	40013800 	.word	0x40013800
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40004400 	.word	0x40004400
 80032ec:	40004c00 	.word	0x40004c00
 80032f0:	40005000 	.word	0x40005000
 80032f4:	003d0900 	.word	0x003d0900
 80032f8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	69da      	ldr	r2, [r3, #28]
 8003300:	2380      	movs	r3, #128	@ 0x80
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	429a      	cmp	r2, r3
 8003306:	d000      	beq.n	800330a <UART_SetConfig+0x37a>
 8003308:	e070      	b.n	80033ec <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800330a:	231b      	movs	r3, #27
 800330c:	2218      	movs	r2, #24
 800330e:	189b      	adds	r3, r3, r2
 8003310:	19db      	adds	r3, r3, r7
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b08      	cmp	r3, #8
 8003316:	d822      	bhi.n	800335e <UART_SetConfig+0x3ce>
 8003318:	009a      	lsls	r2, r3, #2
 800331a:	4b67      	ldr	r3, [pc, #412]	@ (80034b8 <UART_SetConfig+0x528>)
 800331c:	18d3      	adds	r3, r2, r3
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003322:	f7ff fa91 	bl	8002848 <HAL_RCC_GetPCLK1Freq>
 8003326:	0003      	movs	r3, r0
 8003328:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800332a:	e021      	b.n	8003370 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800332c:	f7ff faa2 	bl	8002874 <HAL_RCC_GetPCLK2Freq>
 8003330:	0003      	movs	r3, r0
 8003332:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003334:	e01c      	b.n	8003370 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003336:	4b61      	ldr	r3, [pc, #388]	@ (80034bc <UART_SetConfig+0x52c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2210      	movs	r2, #16
 800333c:	4013      	ands	r3, r2
 800333e:	d002      	beq.n	8003346 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003340:	4b5f      	ldr	r3, [pc, #380]	@ (80034c0 <UART_SetConfig+0x530>)
 8003342:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003344:	e014      	b.n	8003370 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8003346:	4b5f      	ldr	r3, [pc, #380]	@ (80034c4 <UART_SetConfig+0x534>)
 8003348:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800334a:	e011      	b.n	8003370 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800334c:	f7ff f9ec 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 8003350:	0003      	movs	r3, r0
 8003352:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003354:	e00c      	b.n	8003370 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003356:	2380      	movs	r3, #128	@ 0x80
 8003358:	021b      	lsls	r3, r3, #8
 800335a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800335c:	e008      	b.n	8003370 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003362:	231a      	movs	r3, #26
 8003364:	2218      	movs	r2, #24
 8003366:	189b      	adds	r3, r3, r2
 8003368:	19db      	adds	r3, r3, r7
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]
        break;
 800336e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003372:	2b00      	cmp	r3, #0
 8003374:	d100      	bne.n	8003378 <UART_SetConfig+0x3e8>
 8003376:	e090      	b.n	800349a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800337a:	005a      	lsls	r2, r3, #1
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	085b      	lsrs	r3, r3, #1
 8003382:	18d2      	adds	r2, r2, r3
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	0019      	movs	r1, r3
 800338a:	0010      	movs	r0, r2
 800338c:	f7fc febc 	bl	8000108 <__udivsi3>
 8003390:	0003      	movs	r3, r0
 8003392:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003396:	2b0f      	cmp	r3, #15
 8003398:	d921      	bls.n	80033de <UART_SetConfig+0x44e>
 800339a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800339c:	2380      	movs	r3, #128	@ 0x80
 800339e:	025b      	lsls	r3, r3, #9
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d21c      	bcs.n	80033de <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	200e      	movs	r0, #14
 80033aa:	2418      	movs	r4, #24
 80033ac:	1903      	adds	r3, r0, r4
 80033ae:	19db      	adds	r3, r3, r7
 80033b0:	210f      	movs	r1, #15
 80033b2:	438a      	bics	r2, r1
 80033b4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b8:	085b      	lsrs	r3, r3, #1
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2207      	movs	r2, #7
 80033be:	4013      	ands	r3, r2
 80033c0:	b299      	uxth	r1, r3
 80033c2:	1903      	adds	r3, r0, r4
 80033c4:	19db      	adds	r3, r3, r7
 80033c6:	1902      	adds	r2, r0, r4
 80033c8:	19d2      	adds	r2, r2, r7
 80033ca:	8812      	ldrh	r2, [r2, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	1902      	adds	r2, r0, r4
 80033d6:	19d2      	adds	r2, r2, r7
 80033d8:	8812      	ldrh	r2, [r2, #0]
 80033da:	60da      	str	r2, [r3, #12]
 80033dc:	e05d      	b.n	800349a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80033de:	231a      	movs	r3, #26
 80033e0:	2218      	movs	r2, #24
 80033e2:	189b      	adds	r3, r3, r2
 80033e4:	19db      	adds	r3, r3, r7
 80033e6:	2201      	movs	r2, #1
 80033e8:	701a      	strb	r2, [r3, #0]
 80033ea:	e056      	b.n	800349a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033ec:	231b      	movs	r3, #27
 80033ee:	2218      	movs	r2, #24
 80033f0:	189b      	adds	r3, r3, r2
 80033f2:	19db      	adds	r3, r3, r7
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d822      	bhi.n	8003440 <UART_SetConfig+0x4b0>
 80033fa:	009a      	lsls	r2, r3, #2
 80033fc:	4b32      	ldr	r3, [pc, #200]	@ (80034c8 <UART_SetConfig+0x538>)
 80033fe:	18d3      	adds	r3, r2, r3
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003404:	f7ff fa20 	bl	8002848 <HAL_RCC_GetPCLK1Freq>
 8003408:	0003      	movs	r3, r0
 800340a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800340c:	e021      	b.n	8003452 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800340e:	f7ff fa31 	bl	8002874 <HAL_RCC_GetPCLK2Freq>
 8003412:	0003      	movs	r3, r0
 8003414:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003416:	e01c      	b.n	8003452 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003418:	4b28      	ldr	r3, [pc, #160]	@ (80034bc <UART_SetConfig+0x52c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2210      	movs	r2, #16
 800341e:	4013      	ands	r3, r2
 8003420:	d002      	beq.n	8003428 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003422:	4b27      	ldr	r3, [pc, #156]	@ (80034c0 <UART_SetConfig+0x530>)
 8003424:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003426:	e014      	b.n	8003452 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8003428:	4b26      	ldr	r3, [pc, #152]	@ (80034c4 <UART_SetConfig+0x534>)
 800342a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800342c:	e011      	b.n	8003452 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800342e:	f7ff f97b 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 8003432:	0003      	movs	r3, r0
 8003434:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003436:	e00c      	b.n	8003452 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003438:	2380      	movs	r3, #128	@ 0x80
 800343a:	021b      	lsls	r3, r3, #8
 800343c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800343e:	e008      	b.n	8003452 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003444:	231a      	movs	r3, #26
 8003446:	2218      	movs	r2, #24
 8003448:	189b      	adds	r3, r3, r2
 800344a:	19db      	adds	r3, r3, r7
 800344c:	2201      	movs	r2, #1
 800344e:	701a      	strb	r2, [r3, #0]
        break;
 8003450:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003454:	2b00      	cmp	r3, #0
 8003456:	d020      	beq.n	800349a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	085a      	lsrs	r2, r3, #1
 800345e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003460:	18d2      	adds	r2, r2, r3
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	0019      	movs	r1, r3
 8003468:	0010      	movs	r0, r2
 800346a:	f7fc fe4d 	bl	8000108 <__udivsi3>
 800346e:	0003      	movs	r3, r0
 8003470:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003474:	2b0f      	cmp	r3, #15
 8003476:	d90a      	bls.n	800348e <UART_SetConfig+0x4fe>
 8003478:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800347a:	2380      	movs	r3, #128	@ 0x80
 800347c:	025b      	lsls	r3, r3, #9
 800347e:	429a      	cmp	r2, r3
 8003480:	d205      	bcs.n	800348e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003484:	b29a      	uxth	r2, r3
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60da      	str	r2, [r3, #12]
 800348c:	e005      	b.n	800349a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800348e:	231a      	movs	r3, #26
 8003490:	2218      	movs	r2, #24
 8003492:	189b      	adds	r3, r3, r2
 8003494:	19db      	adds	r3, r3, r7
 8003496:	2201      	movs	r2, #1
 8003498:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	2200      	movs	r2, #0
 800349e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	2200      	movs	r2, #0
 80034a4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80034a6:	231a      	movs	r3, #26
 80034a8:	2218      	movs	r2, #24
 80034aa:	189b      	adds	r3, r3, r2
 80034ac:	19db      	adds	r3, r3, r7
 80034ae:	781b      	ldrb	r3, [r3, #0]
}
 80034b0:	0018      	movs	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b00e      	add	sp, #56	@ 0x38
 80034b6:	bdb0      	pop	{r4, r5, r7, pc}
 80034b8:	08003b18 	.word	0x08003b18
 80034bc:	40021000 	.word	0x40021000
 80034c0:	003d0900 	.word	0x003d0900
 80034c4:	00f42400 	.word	0x00f42400
 80034c8:	08003b3c 	.word	0x08003b3c

080034cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d8:	2208      	movs	r2, #8
 80034da:	4013      	ands	r3, r2
 80034dc:	d00b      	beq.n	80034f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003610 <UART_AdvFeatureConfig+0x144>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	0019      	movs	r1, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fa:	2201      	movs	r2, #1
 80034fc:	4013      	ands	r3, r2
 80034fe:	d00b      	beq.n	8003518 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	4a43      	ldr	r2, [pc, #268]	@ (8003614 <UART_AdvFeatureConfig+0x148>)
 8003508:	4013      	ands	r3, r2
 800350a:	0019      	movs	r1, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351c:	2202      	movs	r2, #2
 800351e:	4013      	ands	r3, r2
 8003520:	d00b      	beq.n	800353a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	4a3b      	ldr	r2, [pc, #236]	@ (8003618 <UART_AdvFeatureConfig+0x14c>)
 800352a:	4013      	ands	r3, r2
 800352c:	0019      	movs	r1, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353e:	2204      	movs	r2, #4
 8003540:	4013      	ands	r3, r2
 8003542:	d00b      	beq.n	800355c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4a34      	ldr	r2, [pc, #208]	@ (800361c <UART_AdvFeatureConfig+0x150>)
 800354c:	4013      	ands	r3, r2
 800354e:	0019      	movs	r1, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003560:	2210      	movs	r2, #16
 8003562:	4013      	ands	r3, r2
 8003564:	d00b      	beq.n	800357e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	4a2c      	ldr	r2, [pc, #176]	@ (8003620 <UART_AdvFeatureConfig+0x154>)
 800356e:	4013      	ands	r3, r2
 8003570:	0019      	movs	r1, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003582:	2220      	movs	r2, #32
 8003584:	4013      	ands	r3, r2
 8003586:	d00b      	beq.n	80035a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	4a25      	ldr	r2, [pc, #148]	@ (8003624 <UART_AdvFeatureConfig+0x158>)
 8003590:	4013      	ands	r3, r2
 8003592:	0019      	movs	r1, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a4:	2240      	movs	r2, #64	@ 0x40
 80035a6:	4013      	ands	r3, r2
 80035a8:	d01d      	beq.n	80035e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003628 <UART_AdvFeatureConfig+0x15c>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	0019      	movs	r1, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035c6:	2380      	movs	r3, #128	@ 0x80
 80035c8:	035b      	lsls	r3, r3, #13
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d10b      	bne.n	80035e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4a15      	ldr	r2, [pc, #84]	@ (800362c <UART_AdvFeatureConfig+0x160>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	0019      	movs	r1, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ea:	2280      	movs	r2, #128	@ 0x80
 80035ec:	4013      	ands	r3, r2
 80035ee:	d00b      	beq.n	8003608 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	4a0e      	ldr	r2, [pc, #56]	@ (8003630 <UART_AdvFeatureConfig+0x164>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	0019      	movs	r1, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	605a      	str	r2, [r3, #4]
  }
}
 8003608:	46c0      	nop			@ (mov r8, r8)
 800360a:	46bd      	mov	sp, r7
 800360c:	b002      	add	sp, #8
 800360e:	bd80      	pop	{r7, pc}
 8003610:	ffff7fff 	.word	0xffff7fff
 8003614:	fffdffff 	.word	0xfffdffff
 8003618:	fffeffff 	.word	0xfffeffff
 800361c:	fffbffff 	.word	0xfffbffff
 8003620:	ffffefff 	.word	0xffffefff
 8003624:	ffffdfff 	.word	0xffffdfff
 8003628:	ffefffff 	.word	0xffefffff
 800362c:	ff9fffff 	.word	0xff9fffff
 8003630:	fff7ffff 	.word	0xfff7ffff

08003634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b092      	sub	sp, #72	@ 0x48
 8003638:	af02      	add	r7, sp, #8
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2284      	movs	r2, #132	@ 0x84
 8003640:	2100      	movs	r1, #0
 8003642:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003644:	f7fd fd04 	bl	8001050 <HAL_GetTick>
 8003648:	0003      	movs	r3, r0
 800364a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2208      	movs	r2, #8
 8003654:	4013      	ands	r3, r2
 8003656:	2b08      	cmp	r3, #8
 8003658:	d12c      	bne.n	80036b4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800365a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800365c:	2280      	movs	r2, #128	@ 0x80
 800365e:	0391      	lsls	r1, r2, #14
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	4a46      	ldr	r2, [pc, #280]	@ (800377c <UART_CheckIdleState+0x148>)
 8003664:	9200      	str	r2, [sp, #0]
 8003666:	2200      	movs	r2, #0
 8003668:	f000 f88c 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 800366c:	1e03      	subs	r3, r0, #0
 800366e:	d021      	beq.n	80036b4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003670:	f3ef 8310 	mrs	r3, PRIMASK
 8003674:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003678:	63bb      	str	r3, [r7, #56]	@ 0x38
 800367a:	2301      	movs	r3, #1
 800367c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003680:	f383 8810 	msr	PRIMASK, r3
}
 8003684:	46c0      	nop			@ (mov r8, r8)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2180      	movs	r1, #128	@ 0x80
 8003692:	438a      	bics	r2, r1
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800369c:	f383 8810 	msr	PRIMASK, r3
}
 80036a0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2278      	movs	r2, #120	@ 0x78
 80036ac:	2100      	movs	r1, #0
 80036ae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e05f      	b.n	8003774 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2204      	movs	r2, #4
 80036bc:	4013      	ands	r3, r2
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d146      	bne.n	8003750 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036c4:	2280      	movs	r2, #128	@ 0x80
 80036c6:	03d1      	lsls	r1, r2, #15
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	4a2c      	ldr	r2, [pc, #176]	@ (800377c <UART_CheckIdleState+0x148>)
 80036cc:	9200      	str	r2, [sp, #0]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f000 f858 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 80036d4:	1e03      	subs	r3, r0, #0
 80036d6:	d03b      	beq.n	8003750 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d8:	f3ef 8310 	mrs	r3, PRIMASK
 80036dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80036de:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80036e2:	2301      	movs	r3, #1
 80036e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f383 8810 	msr	PRIMASK, r3
}
 80036ec:	46c0      	nop			@ (mov r8, r8)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4921      	ldr	r1, [pc, #132]	@ (8003780 <UART_CheckIdleState+0x14c>)
 80036fa:	400a      	ands	r2, r1
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003700:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f383 8810 	msr	PRIMASK, r3
}
 8003708:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800370a:	f3ef 8310 	mrs	r3, PRIMASK
 800370e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003710:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003712:	633b      	str	r3, [r7, #48]	@ 0x30
 8003714:	2301      	movs	r3, #1
 8003716:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f383 8810 	msr	PRIMASK, r3
}
 800371e:	46c0      	nop			@ (mov r8, r8)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2101      	movs	r1, #1
 800372c:	438a      	bics	r2, r1
 800372e:	609a      	str	r2, [r3, #8]
 8003730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003732:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	f383 8810 	msr	PRIMASK, r3
}
 800373a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2280      	movs	r2, #128	@ 0x80
 8003740:	2120      	movs	r1, #32
 8003742:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2278      	movs	r2, #120	@ 0x78
 8003748:	2100      	movs	r1, #0
 800374a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e011      	b.n	8003774 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2280      	movs	r2, #128	@ 0x80
 800375a:	2120      	movs	r1, #32
 800375c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2278      	movs	r2, #120	@ 0x78
 800376e:	2100      	movs	r1, #0
 8003770:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	0018      	movs	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	b010      	add	sp, #64	@ 0x40
 800377a:	bd80      	pop	{r7, pc}
 800377c:	01ffffff 	.word	0x01ffffff
 8003780:	fffffedf 	.word	0xfffffedf

08003784 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	1dfb      	adds	r3, r7, #7
 8003792:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003794:	e051      	b.n	800383a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	3301      	adds	r3, #1
 800379a:	d04e      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379c:	f7fd fc58 	bl	8001050 <HAL_GetTick>
 80037a0:	0002      	movs	r2, r0
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d302      	bcc.n	80037b2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e051      	b.n	800385a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2204      	movs	r2, #4
 80037be:	4013      	ands	r3, r2
 80037c0:	d03b      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0xb6>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b80      	cmp	r3, #128	@ 0x80
 80037c6:	d038      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0xb6>
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b40      	cmp	r3, #64	@ 0x40
 80037cc:	d035      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	2208      	movs	r2, #8
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d111      	bne.n	8003800 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2208      	movs	r2, #8
 80037e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f000 f83c 	bl	8003864 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2284      	movs	r2, #132	@ 0x84
 80037f0:	2108      	movs	r1, #8
 80037f2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2278      	movs	r2, #120	@ 0x78
 80037f8:	2100      	movs	r1, #0
 80037fa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e02c      	b.n	800385a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	69da      	ldr	r2, [r3, #28]
 8003806:	2380      	movs	r3, #128	@ 0x80
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	401a      	ands	r2, r3
 800380c:	2380      	movs	r3, #128	@ 0x80
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	429a      	cmp	r2, r3
 8003812:	d112      	bne.n	800383a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2280      	movs	r2, #128	@ 0x80
 800381a:	0112      	lsls	r2, r2, #4
 800381c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	0018      	movs	r0, r3
 8003822:	f000 f81f 	bl	8003864 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2284      	movs	r2, #132	@ 0x84
 800382a:	2120      	movs	r1, #32
 800382c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2278      	movs	r2, #120	@ 0x78
 8003832:	2100      	movs	r1, #0
 8003834:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e00f      	b.n	800385a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	4013      	ands	r3, r2
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	425a      	negs	r2, r3
 800384a:	4153      	adcs	r3, r2
 800384c:	b2db      	uxtb	r3, r3
 800384e:	001a      	movs	r2, r3
 8003850:	1dfb      	adds	r3, r7, #7
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d09e      	beq.n	8003796 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	0018      	movs	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	b004      	add	sp, #16
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08e      	sub	sp, #56	@ 0x38
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386c:	f3ef 8310 	mrs	r3, PRIMASK
 8003870:	617b      	str	r3, [r7, #20]
  return(result);
 8003872:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003874:	637b      	str	r3, [r7, #52]	@ 0x34
 8003876:	2301      	movs	r3, #1
 8003878:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	f383 8810 	msr	PRIMASK, r3
}
 8003880:	46c0      	nop			@ (mov r8, r8)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4926      	ldr	r1, [pc, #152]	@ (8003928 <UART_EndRxTransfer+0xc4>)
 800388e:	400a      	ands	r2, r1
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003894:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	f383 8810 	msr	PRIMASK, r3
}
 800389c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800389e:	f3ef 8310 	mrs	r3, PRIMASK
 80038a2:	623b      	str	r3, [r7, #32]
  return(result);
 80038a4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80038a8:	2301      	movs	r3, #1
 80038aa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ae:	f383 8810 	msr	PRIMASK, r3
}
 80038b2:	46c0      	nop			@ (mov r8, r8)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689a      	ldr	r2, [r3, #8]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2101      	movs	r1, #1
 80038c0:	438a      	bics	r2, r1
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ca:	f383 8810 	msr	PRIMASK, r3
}
 80038ce:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d118      	bne.n	800390a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d8:	f3ef 8310 	mrs	r3, PRIMASK
 80038dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80038de:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038e2:	2301      	movs	r3, #1
 80038e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f383 8810 	msr	PRIMASK, r3
}
 80038ec:	46c0      	nop			@ (mov r8, r8)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2110      	movs	r1, #16
 80038fa:	438a      	bics	r2, r1
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003900:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f383 8810 	msr	PRIMASK, r3
}
 8003908:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2280      	movs	r2, #128	@ 0x80
 800390e:	2120      	movs	r1, #32
 8003910:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b00e      	add	sp, #56	@ 0x38
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	fffffedf 	.word	0xfffffedf

0800392c <memset>:
 800392c:	0003      	movs	r3, r0
 800392e:	1882      	adds	r2, r0, r2
 8003930:	4293      	cmp	r3, r2
 8003932:	d100      	bne.n	8003936 <memset+0xa>
 8003934:	4770      	bx	lr
 8003936:	7019      	strb	r1, [r3, #0]
 8003938:	3301      	adds	r3, #1
 800393a:	e7f9      	b.n	8003930 <memset+0x4>

0800393c <__libc_init_array>:
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	2600      	movs	r6, #0
 8003940:	4c0c      	ldr	r4, [pc, #48]	@ (8003974 <__libc_init_array+0x38>)
 8003942:	4d0d      	ldr	r5, [pc, #52]	@ (8003978 <__libc_init_array+0x3c>)
 8003944:	1b64      	subs	r4, r4, r5
 8003946:	10a4      	asrs	r4, r4, #2
 8003948:	42a6      	cmp	r6, r4
 800394a:	d109      	bne.n	8003960 <__libc_init_array+0x24>
 800394c:	2600      	movs	r6, #0
 800394e:	f000 f823 	bl	8003998 <_init>
 8003952:	4c0a      	ldr	r4, [pc, #40]	@ (800397c <__libc_init_array+0x40>)
 8003954:	4d0a      	ldr	r5, [pc, #40]	@ (8003980 <__libc_init_array+0x44>)
 8003956:	1b64      	subs	r4, r4, r5
 8003958:	10a4      	asrs	r4, r4, #2
 800395a:	42a6      	cmp	r6, r4
 800395c:	d105      	bne.n	800396a <__libc_init_array+0x2e>
 800395e:	bd70      	pop	{r4, r5, r6, pc}
 8003960:	00b3      	lsls	r3, r6, #2
 8003962:	58eb      	ldr	r3, [r5, r3]
 8003964:	4798      	blx	r3
 8003966:	3601      	adds	r6, #1
 8003968:	e7ee      	b.n	8003948 <__libc_init_array+0xc>
 800396a:	00b3      	lsls	r3, r6, #2
 800396c:	58eb      	ldr	r3, [r5, r3]
 800396e:	4798      	blx	r3
 8003970:	3601      	adds	r6, #1
 8003972:	e7f2      	b.n	800395a <__libc_init_array+0x1e>
 8003974:	08003b68 	.word	0x08003b68
 8003978:	08003b68 	.word	0x08003b68
 800397c:	08003b6c 	.word	0x08003b6c
 8003980:	08003b68 	.word	0x08003b68

08003984 <memcpy>:
 8003984:	2300      	movs	r3, #0
 8003986:	b510      	push	{r4, lr}
 8003988:	429a      	cmp	r2, r3
 800398a:	d100      	bne.n	800398e <memcpy+0xa>
 800398c:	bd10      	pop	{r4, pc}
 800398e:	5ccc      	ldrb	r4, [r1, r3]
 8003990:	54c4      	strb	r4, [r0, r3]
 8003992:	3301      	adds	r3, #1
 8003994:	e7f8      	b.n	8003988 <memcpy+0x4>
	...

08003998 <_init>:
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	46c0      	nop			@ (mov r8, r8)
 800399c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399e:	bc08      	pop	{r3}
 80039a0:	469e      	mov	lr, r3
 80039a2:	4770      	bx	lr

080039a4 <_fini>:
 80039a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a6:	46c0      	nop			@ (mov r8, r8)
 80039a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039aa:	bc08      	pop	{r3}
 80039ac:	469e      	mov	lr, r3
 80039ae:	4770      	bx	lr
