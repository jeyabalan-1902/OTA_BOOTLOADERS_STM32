
BOOTLOADER_L073RZT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f80  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  08005040  08005040  00006040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005524  08005524  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005524  08005524  00006524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800552c  0800552c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800552c  0800552c  0000652c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005530  08005530  00006530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005534  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  20000068  0800559c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  0800559c  000073f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b67b  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f0  00000000  00000000  0001270b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  00014b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c6  00000000  00000000  00015530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166fc  00000000  00000000  00015cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000daf4  00000000  00000000  0002c3f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826a1  00000000  00000000  00039ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc587  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c4c  00000000  00000000  000bc5cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000bf218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005028 	.word	0x08005028

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08005028 	.word	0x08005028

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__udivmoddi4>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	4657      	mov	r7, sl
 8000278:	464e      	mov	r6, r9
 800027a:	4645      	mov	r5, r8
 800027c:	46de      	mov	lr, fp
 800027e:	b5e0      	push	{r5, r6, r7, lr}
 8000280:	0004      	movs	r4, r0
 8000282:	000d      	movs	r5, r1
 8000284:	4692      	mov	sl, r2
 8000286:	4699      	mov	r9, r3
 8000288:	b083      	sub	sp, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d830      	bhi.n	80002f0 <__udivmoddi4+0x7c>
 800028e:	d02d      	beq.n	80002ec <__udivmoddi4+0x78>
 8000290:	4649      	mov	r1, r9
 8000292:	4650      	mov	r0, sl
 8000294:	f000 f8ba 	bl	800040c <__clzdi2>
 8000298:	0029      	movs	r1, r5
 800029a:	0006      	movs	r6, r0
 800029c:	0020      	movs	r0, r4
 800029e:	f000 f8b5 	bl	800040c <__clzdi2>
 80002a2:	1a33      	subs	r3, r6, r0
 80002a4:	4698      	mov	r8, r3
 80002a6:	3b20      	subs	r3, #32
 80002a8:	d434      	bmi.n	8000314 <__udivmoddi4+0xa0>
 80002aa:	469b      	mov	fp, r3
 80002ac:	4653      	mov	r3, sl
 80002ae:	465a      	mov	r2, fp
 80002b0:	4093      	lsls	r3, r2
 80002b2:	4642      	mov	r2, r8
 80002b4:	001f      	movs	r7, r3
 80002b6:	4653      	mov	r3, sl
 80002b8:	4093      	lsls	r3, r2
 80002ba:	001e      	movs	r6, r3
 80002bc:	42af      	cmp	r7, r5
 80002be:	d83b      	bhi.n	8000338 <__udivmoddi4+0xc4>
 80002c0:	42af      	cmp	r7, r5
 80002c2:	d100      	bne.n	80002c6 <__udivmoddi4+0x52>
 80002c4:	e079      	b.n	80003ba <__udivmoddi4+0x146>
 80002c6:	465b      	mov	r3, fp
 80002c8:	1ba4      	subs	r4, r4, r6
 80002ca:	41bd      	sbcs	r5, r7
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	da00      	bge.n	80002d2 <__udivmoddi4+0x5e>
 80002d0:	e076      	b.n	80003c0 <__udivmoddi4+0x14c>
 80002d2:	2200      	movs	r2, #0
 80002d4:	2300      	movs	r3, #0
 80002d6:	9200      	str	r2, [sp, #0]
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	2301      	movs	r3, #1
 80002dc:	465a      	mov	r2, fp
 80002de:	4093      	lsls	r3, r2
 80002e0:	9301      	str	r3, [sp, #4]
 80002e2:	2301      	movs	r3, #1
 80002e4:	4642      	mov	r2, r8
 80002e6:	4093      	lsls	r3, r2
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	e029      	b.n	8000340 <__udivmoddi4+0xcc>
 80002ec:	4282      	cmp	r2, r0
 80002ee:	d9cf      	bls.n	8000290 <__udivmoddi4+0x1c>
 80002f0:	2200      	movs	r2, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	9200      	str	r2, [sp, #0]
 80002f6:	9301      	str	r3, [sp, #4]
 80002f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <__udivmoddi4+0x8e>
 80002fe:	601c      	str	r4, [r3, #0]
 8000300:	605d      	str	r5, [r3, #4]
 8000302:	9800      	ldr	r0, [sp, #0]
 8000304:	9901      	ldr	r1, [sp, #4]
 8000306:	b003      	add	sp, #12
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	46bb      	mov	fp, r7
 800030c:	46b2      	mov	sl, r6
 800030e:	46a9      	mov	r9, r5
 8000310:	46a0      	mov	r8, r4
 8000312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000314:	4642      	mov	r2, r8
 8000316:	469b      	mov	fp, r3
 8000318:	2320      	movs	r3, #32
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	4652      	mov	r2, sl
 800031e:	40da      	lsrs	r2, r3
 8000320:	4641      	mov	r1, r8
 8000322:	0013      	movs	r3, r2
 8000324:	464a      	mov	r2, r9
 8000326:	408a      	lsls	r2, r1
 8000328:	0017      	movs	r7, r2
 800032a:	4642      	mov	r2, r8
 800032c:	431f      	orrs	r7, r3
 800032e:	4653      	mov	r3, sl
 8000330:	4093      	lsls	r3, r2
 8000332:	001e      	movs	r6, r3
 8000334:	42af      	cmp	r7, r5
 8000336:	d9c3      	bls.n	80002c0 <__udivmoddi4+0x4c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	4643      	mov	r3, r8
 8000342:	2b00      	cmp	r3, #0
 8000344:	d0d8      	beq.n	80002f8 <__udivmoddi4+0x84>
 8000346:	07fb      	lsls	r3, r7, #31
 8000348:	0872      	lsrs	r2, r6, #1
 800034a:	431a      	orrs	r2, r3
 800034c:	4646      	mov	r6, r8
 800034e:	087b      	lsrs	r3, r7, #1
 8000350:	e00e      	b.n	8000370 <__udivmoddi4+0xfc>
 8000352:	42ab      	cmp	r3, r5
 8000354:	d101      	bne.n	800035a <__udivmoddi4+0xe6>
 8000356:	42a2      	cmp	r2, r4
 8000358:	d80c      	bhi.n	8000374 <__udivmoddi4+0x100>
 800035a:	1aa4      	subs	r4, r4, r2
 800035c:	419d      	sbcs	r5, r3
 800035e:	2001      	movs	r0, #1
 8000360:	1924      	adds	r4, r4, r4
 8000362:	416d      	adcs	r5, r5
 8000364:	2100      	movs	r1, #0
 8000366:	3e01      	subs	r6, #1
 8000368:	1824      	adds	r4, r4, r0
 800036a:	414d      	adcs	r5, r1
 800036c:	2e00      	cmp	r6, #0
 800036e:	d006      	beq.n	800037e <__udivmoddi4+0x10a>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d9ee      	bls.n	8000352 <__udivmoddi4+0xde>
 8000374:	3e01      	subs	r6, #1
 8000376:	1924      	adds	r4, r4, r4
 8000378:	416d      	adcs	r5, r5
 800037a:	2e00      	cmp	r6, #0
 800037c:	d1f8      	bne.n	8000370 <__udivmoddi4+0xfc>
 800037e:	9800      	ldr	r0, [sp, #0]
 8000380:	9901      	ldr	r1, [sp, #4]
 8000382:	465b      	mov	r3, fp
 8000384:	1900      	adds	r0, r0, r4
 8000386:	4169      	adcs	r1, r5
 8000388:	2b00      	cmp	r3, #0
 800038a:	db24      	blt.n	80003d6 <__udivmoddi4+0x162>
 800038c:	002b      	movs	r3, r5
 800038e:	465a      	mov	r2, fp
 8000390:	4644      	mov	r4, r8
 8000392:	40d3      	lsrs	r3, r2
 8000394:	002a      	movs	r2, r5
 8000396:	40e2      	lsrs	r2, r4
 8000398:	001c      	movs	r4, r3
 800039a:	465b      	mov	r3, fp
 800039c:	0015      	movs	r5, r2
 800039e:	2b00      	cmp	r3, #0
 80003a0:	db2a      	blt.n	80003f8 <__udivmoddi4+0x184>
 80003a2:	0026      	movs	r6, r4
 80003a4:	409e      	lsls	r6, r3
 80003a6:	0033      	movs	r3, r6
 80003a8:	0026      	movs	r6, r4
 80003aa:	4647      	mov	r7, r8
 80003ac:	40be      	lsls	r6, r7
 80003ae:	0032      	movs	r2, r6
 80003b0:	1a80      	subs	r0, r0, r2
 80003b2:	4199      	sbcs	r1, r3
 80003b4:	9000      	str	r0, [sp, #0]
 80003b6:	9101      	str	r1, [sp, #4]
 80003b8:	e79e      	b.n	80002f8 <__udivmoddi4+0x84>
 80003ba:	42a3      	cmp	r3, r4
 80003bc:	d8bc      	bhi.n	8000338 <__udivmoddi4+0xc4>
 80003be:	e782      	b.n	80002c6 <__udivmoddi4+0x52>
 80003c0:	4642      	mov	r2, r8
 80003c2:	2320      	movs	r3, #32
 80003c4:	2100      	movs	r1, #0
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	2200      	movs	r2, #0
 80003ca:	9100      	str	r1, [sp, #0]
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	2201      	movs	r2, #1
 80003d0:	40da      	lsrs	r2, r3
 80003d2:	9201      	str	r2, [sp, #4]
 80003d4:	e785      	b.n	80002e2 <__udivmoddi4+0x6e>
 80003d6:	4642      	mov	r2, r8
 80003d8:	2320      	movs	r3, #32
 80003da:	1a9b      	subs	r3, r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	4646      	mov	r6, r8
 80003e0:	409a      	lsls	r2, r3
 80003e2:	0023      	movs	r3, r4
 80003e4:	40f3      	lsrs	r3, r6
 80003e6:	4644      	mov	r4, r8
 80003e8:	4313      	orrs	r3, r2
 80003ea:	002a      	movs	r2, r5
 80003ec:	40e2      	lsrs	r2, r4
 80003ee:	001c      	movs	r4, r3
 80003f0:	465b      	mov	r3, fp
 80003f2:	0015      	movs	r5, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	dad4      	bge.n	80003a2 <__udivmoddi4+0x12e>
 80003f8:	4642      	mov	r2, r8
 80003fa:	002f      	movs	r7, r5
 80003fc:	2320      	movs	r3, #32
 80003fe:	0026      	movs	r6, r4
 8000400:	4097      	lsls	r7, r2
 8000402:	1a9b      	subs	r3, r3, r2
 8000404:	40de      	lsrs	r6, r3
 8000406:	003b      	movs	r3, r7
 8000408:	4333      	orrs	r3, r6
 800040a:	e7cd      	b.n	80003a8 <__udivmoddi4+0x134>

0800040c <__clzdi2>:
 800040c:	b510      	push	{r4, lr}
 800040e:	2900      	cmp	r1, #0
 8000410:	d103      	bne.n	800041a <__clzdi2+0xe>
 8000412:	f000 f807 	bl	8000424 <__clzsi2>
 8000416:	3020      	adds	r0, #32
 8000418:	e002      	b.n	8000420 <__clzdi2+0x14>
 800041a:	0008      	movs	r0, r1
 800041c:	f000 f802 	bl	8000424 <__clzsi2>
 8000420:	bd10      	pop	{r4, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__clzsi2>:
 8000424:	211c      	movs	r1, #28
 8000426:	2301      	movs	r3, #1
 8000428:	041b      	lsls	r3, r3, #16
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0xe>
 800042e:	0c00      	lsrs	r0, r0, #16
 8000430:	3910      	subs	r1, #16
 8000432:	0a1b      	lsrs	r3, r3, #8
 8000434:	4298      	cmp	r0, r3
 8000436:	d301      	bcc.n	800043c <__clzsi2+0x18>
 8000438:	0a00      	lsrs	r0, r0, #8
 800043a:	3908      	subs	r1, #8
 800043c:	091b      	lsrs	r3, r3, #4
 800043e:	4298      	cmp	r0, r3
 8000440:	d301      	bcc.n	8000446 <__clzsi2+0x22>
 8000442:	0900      	lsrs	r0, r0, #4
 8000444:	3904      	subs	r1, #4
 8000446:	a202      	add	r2, pc, #8	@ (adr r2, 8000450 <__clzsi2+0x2c>)
 8000448:	5c10      	ldrb	r0, [r2, r0]
 800044a:	1840      	adds	r0, r0, r1
 800044c:	4770      	bx	lr
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	02020304 	.word	0x02020304
 8000454:	01010101 	.word	0x01010101
	...

08000460 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000464:	f3bf 8f4f 	dsb	sy
}
 8000468:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800046a:	4b04      	ldr	r3, [pc, #16]	@ (800047c <__NVIC_SystemReset+0x1c>)
 800046c:	4a04      	ldr	r2, [pc, #16]	@ (8000480 <__NVIC_SystemReset+0x20>)
 800046e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000470:	f3bf 8f4f 	dsb	sy
}
 8000474:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000476:	46c0      	nop			@ (mov r8, r8)
 8000478:	e7fd      	b.n	8000476 <__NVIC_SystemReset+0x16>
 800047a:	46c0      	nop			@ (mov r8, r8)
 800047c:	e000ed00 	.word	0xe000ed00
 8000480:	05fa0004 	.word	0x05fa0004

08000484 <bootloader_uart_read_data>:

uint8_t bl_rx_buffer[BL_RX_LEN];
UART_HandleTypeDef *C_UART = NULL;

void  bootloader_uart_read_data(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
    uint8_t rcv_len=0;
 800048a:	1dfb      	adds	r3, r7, #7
 800048c:	2200      	movs	r2, #0
 800048e:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		memset(bl_rx_buffer,0,200);
 8000490:	4b26      	ldr	r3, [pc, #152]	@ (800052c <bootloader_uart_read_data+0xa8>)
 8000492:	22c8      	movs	r2, #200	@ 0xc8
 8000494:	2100      	movs	r1, #0
 8000496:	0018      	movs	r0, r3
 8000498:	f003 fe40 	bl	800411c <memset>
        HAL_UART_Receive(C_UART,bl_rx_buffer,1,HAL_MAX_DELAY);
 800049c:	4b24      	ldr	r3, [pc, #144]	@ (8000530 <bootloader_uart_read_data+0xac>)
 800049e:	6818      	ldr	r0, [r3, #0]
 80004a0:	2301      	movs	r3, #1
 80004a2:	425b      	negs	r3, r3
 80004a4:	4921      	ldr	r1, [pc, #132]	@ (800052c <bootloader_uart_read_data+0xa8>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	f002 fe24 	bl	80030f4 <HAL_UART_Receive>
		rcv_len= bl_rx_buffer[0];
 80004ac:	1dfb      	adds	r3, r7, #7
 80004ae:	4a1f      	ldr	r2, [pc, #124]	@ (800052c <bootloader_uart_read_data+0xa8>)
 80004b0:	7812      	ldrb	r2, [r2, #0]
 80004b2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive(C_UART,&bl_rx_buffer[1],rcv_len,HAL_MAX_DELAY);
 80004b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000530 <bootloader_uart_read_data+0xac>)
 80004b6:	6818      	ldr	r0, [r3, #0]
 80004b8:	1dfb      	adds	r3, r7, #7
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	b29a      	uxth	r2, r3
 80004be:	2301      	movs	r3, #1
 80004c0:	425b      	negs	r3, r3
 80004c2:	491c      	ldr	r1, [pc, #112]	@ (8000534 <bootloader_uart_read_data+0xb0>)
 80004c4:	f002 fe16 	bl	80030f4 <HAL_UART_Receive>
		printf("BL_MSG: UART RX => LEN: %d CMD: 0x%02X\n", bl_rx_buffer[0], bl_rx_buffer[1]);
 80004c8:	4b18      	ldr	r3, [pc, #96]	@ (800052c <bootloader_uart_read_data+0xa8>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	0019      	movs	r1, r3
 80004ce:	4b17      	ldr	r3, [pc, #92]	@ (800052c <bootloader_uart_read_data+0xa8>)
 80004d0:	785b      	ldrb	r3, [r3, #1]
 80004d2:	001a      	movs	r2, r3
 80004d4:	4b18      	ldr	r3, [pc, #96]	@ (8000538 <bootloader_uart_read_data+0xb4>)
 80004d6:	0018      	movs	r0, r3
 80004d8:	f003 fc84 	bl	8003de4 <iprintf>
		switch(bl_rx_buffer[1])
 80004dc:	4b13      	ldr	r3, [pc, #76]	@ (800052c <bootloader_uart_read_data+0xa8>)
 80004de:	785b      	ldrb	r3, [r3, #1]
 80004e0:	2b54      	cmp	r3, #84	@ 0x54
 80004e2:	d017      	beq.n	8000514 <bootloader_uart_read_data+0x90>
 80004e4:	dc1b      	bgt.n	800051e <bootloader_uart_read_data+0x9a>
 80004e6:	2b53      	cmp	r3, #83	@ 0x53
 80004e8:	d00f      	beq.n	800050a <bootloader_uart_read_data+0x86>
 80004ea:	dc18      	bgt.n	800051e <bootloader_uart_read_data+0x9a>
 80004ec:	2b51      	cmp	r3, #81	@ 0x51
 80004ee:	d002      	beq.n	80004f6 <bootloader_uart_read_data+0x72>
 80004f0:	2b52      	cmp	r3, #82	@ 0x52
 80004f2:	d005      	beq.n	8000500 <bootloader_uart_read_data+0x7c>
 80004f4:	e013      	b.n	800051e <bootloader_uart_read_data+0x9a>
		{
            case BL_GET_CID:
                bootloader_handle_getcid_cmd(bl_rx_buffer);
 80004f6:	4b0d      	ldr	r3, [pc, #52]	@ (800052c <bootloader_uart_read_data+0xa8>)
 80004f8:	0018      	movs	r0, r3
 80004fa:	f000 f8b9 	bl	8000670 <bootloader_handle_getcid_cmd>
                break;
 80004fe:	e013      	b.n	8000528 <bootloader_uart_read_data+0xa4>
            case BL_GO_TO_RESET:
            	bootloader_go_reset_cmd(bl_rx_buffer);
 8000500:	4b0a      	ldr	r3, [pc, #40]	@ (800052c <bootloader_uart_read_data+0xa8>)
 8000502:	0018      	movs	r0, r3
 8000504:	f000 f88e 	bl	8000624 <bootloader_go_reset_cmd>
                break;
 8000508:	e00e      	b.n	8000528 <bootloader_uart_read_data+0xa4>
            case BL_FLASH_ERASE:
                bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 800050a:	4b08      	ldr	r3, [pc, #32]	@ (800052c <bootloader_uart_read_data+0xa8>)
 800050c:	0018      	movs	r0, r3
 800050e:	f000 f8eb 	bl	80006e8 <bootloader_handle_flash_erase_cmd>
                break;
 8000512:	e009      	b.n	8000528 <bootloader_uart_read_data+0xa4>
            case BL_MEM_WRITE:
                bootloader_handle_mem_write_cmd(bl_rx_buffer);
 8000514:	4b05      	ldr	r3, [pc, #20]	@ (800052c <bootloader_uart_read_data+0xa8>)
 8000516:	0018      	movs	r0, r3
 8000518:	f000 f948 	bl	80007ac <bootloader_handle_mem_write_cmd>
                break;
 800051c:	e004      	b.n	8000528 <bootloader_uart_read_data+0xa4>
            default:
                printf("BL_MSG:Invalid command code received from host \n");
 800051e:	4b07      	ldr	r3, [pc, #28]	@ (800053c <bootloader_uart_read_data+0xb8>)
 8000520:	0018      	movs	r0, r3
 8000522:	f003 fccf 	bl	8003ec4 <puts>
                break;
 8000526:	46c0      	nop			@ (mov r8, r8)
		memset(bl_rx_buffer,0,200);
 8000528:	e7b2      	b.n	8000490 <bootloader_uart_read_data+0xc>
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	20000084 	.word	0x20000084
 8000530:	2000014c 	.word	0x2000014c
 8000534:	20000085 	.word	0x20000085
 8000538:	08005040 	.word	0x08005040
 800053c:	08005068 	.word	0x08005068

08000540 <bootloader_jump_to_user_app>:
		}
	}
}

void bootloader_jump_to_user_app(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08c      	sub	sp, #48	@ 0x30
 8000544:	af00      	add	r7, sp, #0
	 void (*app_reset_handler)(void);

	    printf("BL_MSG: bootloader_jump_to_user_app\n");
 8000546:	4b2f      	ldr	r3, [pc, #188]	@ (8000604 <bootloader_jump_to_user_app+0xc4>)
 8000548:	0018      	movs	r0, r3
 800054a:	f003 fcbb 	bl	8003ec4 <puts>

	    uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 800054e:	4b2e      	ldr	r3, [pc, #184]	@ (8000608 <bootloader_jump_to_user_app+0xc8>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	62bb      	str	r3, [r7, #40]	@ 0x28
	    uint32_t reset_handler_address = *(volatile uint32_t *)(FLASH_SECTOR2_BASE_ADDRESS + 4);
 8000554:	4b2d      	ldr	r3, [pc, #180]	@ (800060c <bootloader_jump_to_user_app+0xcc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	627b      	str	r3, [r7, #36]	@ 0x24

	    char msg[23];
		snprintf(msg, sizeof(msg), "MSP: 0x%08lX", msp_value);
 800055a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800055c:	4a2c      	ldr	r2, [pc, #176]	@ (8000610 <bootloader_jump_to_user_app+0xd0>)
 800055e:	1d38      	adds	r0, r7, #4
 8000560:	2117      	movs	r1, #23
 8000562:	f003 fcb9 	bl	8003ed8 <sniprintf>
		printf("%s",msg);
 8000566:	1d3a      	adds	r2, r7, #4
 8000568:	4b2a      	ldr	r3, [pc, #168]	@ (8000614 <bootloader_jump_to_user_app+0xd4>)
 800056a:	0011      	movs	r1, r2
 800056c:	0018      	movs	r0, r3
 800056e:	f003 fc39 	bl	8003de4 <iprintf>

		snprintf(msg, sizeof(msg), "Reset: 0x%08lX", reset_handler_address);
 8000572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000574:	4a28      	ldr	r2, [pc, #160]	@ (8000618 <bootloader_jump_to_user_app+0xd8>)
 8000576:	1d38      	adds	r0, r7, #4
 8000578:	2117      	movs	r1, #23
 800057a:	f003 fcad 	bl	8003ed8 <sniprintf>
		printf("%s",msg);
 800057e:	1d3a      	adds	r2, r7, #4
 8000580:	4b24      	ldr	r3, [pc, #144]	@ (8000614 <bootloader_jump_to_user_app+0xd4>)
 8000582:	0011      	movs	r1, r2
 8000584:	0018      	movs	r0, r3
 8000586:	f003 fc2d 	bl	8003de4 <iprintf>

		HAL_Delay(1000);
 800058a:	23fa      	movs	r3, #250	@ 0xfa
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	0018      	movs	r0, r3
 8000590:	f000 ff00 	bl	8001394 <HAL_Delay>

	    HAL_RCC_DeInit();
 8000594:	f001 fc9c 	bl	8001ed0 <HAL_RCC_DeInit>
		HAL_DeInit();
 8000598:	f000 fe80 	bl	800129c <HAL_DeInit>

		SysTick->CTRL = 0;
 800059c:	4b1f      	ldr	r3, [pc, #124]	@ (800061c <bootloader_jump_to_user_app+0xdc>)
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
		SysTick->LOAD = 0;
 80005a2:	4b1e      	ldr	r3, [pc, #120]	@ (800061c <bootloader_jump_to_user_app+0xdc>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
 80005a8:	4b1c      	ldr	r3, [pc, #112]	@ (800061c <bootloader_jump_to_user_app+0xdc>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]

		for (int i = 0; i < 8; i++) {
 80005ae:	2300      	movs	r3, #0
 80005b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80005b2:	e010      	b.n	80005d6 <bootloader_jump_to_user_app+0x96>
			NVIC->ICER[i] = 0xFFFFFFFF;
 80005b4:	491a      	ldr	r1, [pc, #104]	@ (8000620 <bootloader_jump_to_user_app+0xe0>)
 80005b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005b8:	3320      	adds	r3, #32
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	2201      	movs	r2, #1
 80005be:	4252      	negs	r2, r2
 80005c0:	505a      	str	r2, [r3, r1]
			NVIC->ICPR[i] = 0xFFFFFFFF;
 80005c2:	4917      	ldr	r1, [pc, #92]	@ (8000620 <bootloader_jump_to_user_app+0xe0>)
 80005c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005c6:	3360      	adds	r3, #96	@ 0x60
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	2201      	movs	r2, #1
 80005cc:	4252      	negs	r2, r2
 80005ce:	505a      	str	r2, [r3, r1]
		for (int i = 0; i < 8; i++) {
 80005d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005d2:	3301      	adds	r3, #1
 80005d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80005d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005d8:	2b07      	cmp	r3, #7
 80005da:	ddeb      	ble.n	80005b4 <bootloader_jump_to_user_app+0x74>
  __ASM volatile ("dsb 0xF":::"memory");
 80005dc:	f3bf 8f4f 	dsb	sy
}
 80005e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80005e2:	f3bf 8f6f 	isb	sy
}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	f383 8808 	msr	MSP, r3
}
 80005f2:	46c0      	nop			@ (mov r8, r8)
		}
		__DSB();
		__ISB();
	    __set_MSP(msp_value);

	    app_reset_handler = (void *)reset_handler_address;
 80005f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005f6:	623b      	str	r3, [r7, #32]
	    app_reset_handler();
 80005f8:	6a3b      	ldr	r3, [r7, #32]
 80005fa:	4798      	blx	r3

}
 80005fc:	46c0      	nop			@ (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	b00c      	add	sp, #48	@ 0x30
 8000602:	bd80      	pop	{r7, pc}
 8000604:	08005098 	.word	0x08005098
 8000608:	08006000 	.word	0x08006000
 800060c:	08006004 	.word	0x08006004
 8000610:	080050bc 	.word	0x080050bc
 8000614:	080050cc 	.word	0x080050cc
 8000618:	080050d0 	.word	0x080050d0
 800061c:	e000e010 	.word	0xe000e010
 8000620:	e000e100 	.word	0xe000e100

08000624 <bootloader_go_reset_cmd>:

void bootloader_go_reset_cmd(uint8_t *pBuffer)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
    printf("BL_MSG:bootloader_go_reset_cmd\n");
 800062c:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <bootloader_go_reset_cmd+0x44>)
 800062e:	0018      	movs	r0, r3
 8000630:	f003 fc48 	bl	8003ec4 <puts>

    // Send ACK (no follow-up data expected)
    bootloader_send_ack(pBuffer[0], 0);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2100      	movs	r1, #0
 800063a:	0018      	movs	r0, r3
 800063c:	f000 f976 	bl	800092c <bootloader_send_ack>

    // Optionally send a confirmation byte (e.g., ADDR_VALID)
    uint8_t resp = ADDR_VALID;
 8000640:	210f      	movs	r1, #15
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
    bootloader_uart_write_data(&resp, 1);
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2101      	movs	r1, #1
 800064c:	0018      	movs	r0, r3
 800064e:	f000 f98d 	bl	800096c <bootloader_uart_write_data>

    printf("BL_MSG:Going to reset... !!\n");
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <bootloader_go_reset_cmd+0x48>)
 8000654:	0018      	movs	r0, r3
 8000656:	f003 fc35 	bl	8003ec4 <puts>
    HAL_Delay(1000);  // Optional delay before reset
 800065a:	23fa      	movs	r3, #250	@ 0xfa
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	0018      	movs	r0, r3
 8000660:	f000 fe98 	bl	8001394 <HAL_Delay>

    NVIC_SystemReset();  // Perform system reset
 8000664:	f7ff fefc 	bl	8000460 <__NVIC_SystemReset>
 8000668:	080050e0 	.word	0x080050e0
 800066c:	08005100 	.word	0x08005100

08000670 <bootloader_handle_getcid_cmd>:
}

void bootloader_handle_getcid_cmd(uint8_t *pBuffer)
{
 8000670:	b5b0      	push	{r4, r5, r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	uint16_t bl_cid_num = get_mcu_chip_id();
 8000678:	250e      	movs	r5, #14
 800067a:	197c      	adds	r4, r7, r5
 800067c:	f000 f98a 	bl	8000994 <get_mcu_chip_id>
 8000680:	0003      	movs	r3, r0
 8000682:	8023      	strh	r3, [r4, #0]
    uint8_t tx_buf[4];

    printf("BL_MSG:bootloader_handle_getcid_cmd\n");
 8000684:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <bootloader_handle_getcid_cmd+0x6c>)
 8000686:	0018      	movs	r0, r3
 8000688:	f003 fc1c 	bl	8003ec4 <puts>



    tx_buf[0] = BL_ACK;
 800068c:	2108      	movs	r1, #8
 800068e:	187b      	adds	r3, r7, r1
 8000690:	22a5      	movs	r2, #165	@ 0xa5
 8000692:	701a      	strb	r2, [r3, #0]
    tx_buf[1] = 2;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2202      	movs	r2, #2
 8000698:	705a      	strb	r2, [r3, #1]
    tx_buf[2] = (uint8_t)(bl_cid_num & 0xFF);
 800069a:	002c      	movs	r4, r5
 800069c:	193b      	adds	r3, r7, r4
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	709a      	strb	r2, [r3, #2]
    tx_buf[3] = (uint8_t)((bl_cid_num >> 8) & 0xFF);
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	0a1b      	lsrs	r3, r3, #8
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	70da      	strb	r2, [r3, #3]

    HAL_UART_Transmit(C_UART, tx_buf, sizeof(tx_buf), HAL_MAX_DELAY);
 80006b4:	4b0a      	ldr	r3, [pc, #40]	@ (80006e0 <bootloader_handle_getcid_cmd+0x70>)
 80006b6:	6818      	ldr	r0, [r3, #0]
 80006b8:	2301      	movs	r3, #1
 80006ba:	425b      	negs	r3, r3
 80006bc:	1879      	adds	r1, r7, r1
 80006be:	2204      	movs	r2, #4
 80006c0:	f002 fc78 	bl	8002fb4 <HAL_UART_Transmit>

    printf("BL_MSG:Sent ACK + CID: 0x%04X\n", bl_cid_num);
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	881a      	ldrh	r2, [r3, #0]
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <bootloader_handle_getcid_cmd+0x74>)
 80006ca:	0011      	movs	r1, r2
 80006cc:	0018      	movs	r0, r3
 80006ce:	f003 fb89 	bl	8003de4 <iprintf>
}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b004      	add	sp, #16
 80006d8:	bdb0      	pop	{r4, r5, r7, pc}
 80006da:	46c0      	nop			@ (mov r8, r8)
 80006dc:	0800511c 	.word	0x0800511c
 80006e0:	2000014c 	.word	0x2000014c
 80006e4:	08005140 	.word	0x08005140

080006e8 <bootloader_handle_flash_erase_cmd>:



void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
{
 80006e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
    uint8_t erase_status = 0x00;
 80006f0:	240b      	movs	r4, #11
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
    printf("BL_MSG: bootloader_handle_flash_erase_cmd\n");
 80006f8:	4b29      	ldr	r3, [pc, #164]	@ (80007a0 <bootloader_handle_flash_erase_cmd+0xb8>)
 80006fa:	0018      	movs	r0, r3
 80006fc:	f003 fbe2 	bl	8003ec4 <puts>

    uint8_t initial_page = pBuffer[2];
 8000700:	210f      	movs	r1, #15
 8000702:	187b      	adds	r3, r7, r1
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	7892      	ldrb	r2, [r2, #2]
 8000708:	701a      	strb	r2, [r3, #0]
    uint16_t num_pages = pBuffer[3] | (pBuffer[4] << 8);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	3303      	adds	r3, #3
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	b21a      	sxth	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	3304      	adds	r3, #4
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	b21b      	sxth	r3, r3
 800071a:	021b      	lsls	r3, r3, #8
 800071c:	b21b      	sxth	r3, r3
 800071e:	4313      	orrs	r3, r2
 8000720:	b21a      	sxth	r2, r3
 8000722:	200c      	movs	r0, #12
 8000724:	183b      	adds	r3, r7, r0
 8000726:	801a      	strh	r2, [r3, #0]

    printf("BL_MSG: initial_page: %d, number_of_pages: %d\n", initial_page, num_pages);
 8000728:	000d      	movs	r5, r1
 800072a:	187b      	adds	r3, r7, r1
 800072c:	7819      	ldrb	r1, [r3, #0]
 800072e:	0006      	movs	r6, r0
 8000730:	183b      	adds	r3, r7, r0
 8000732:	881a      	ldrh	r2, [r3, #0]
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000736:	0018      	movs	r0, r3
 8000738:	f003 fb54 	bl	8003de4 <iprintf>

    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 800073c:	23a0      	movs	r3, #160	@ 0xa0
 800073e:	05db      	lsls	r3, r3, #23
 8000740:	2201      	movs	r2, #1
 8000742:	2120      	movs	r1, #32
 8000744:	0018      	movs	r0, r3
 8000746:	f001 fba6 	bl	8001e96 <HAL_GPIO_WritePin>

    erase_status = execute_flash_erase(initial_page, num_pages);
 800074a:	19bb      	adds	r3, r7, r6
 800074c:	881a      	ldrh	r2, [r3, #0]
 800074e:	197b      	adds	r3, r7, r5
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	0011      	movs	r1, r2
 8000754:	0018      	movs	r0, r3
 8000756:	f000 f95b 	bl	8000a10 <execute_flash_erase>
 800075a:	0003      	movs	r3, r0
 800075c:	001a      	movs	r2, r3
 800075e:	193b      	adds	r3, r7, r4
 8000760:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000762:	23a0      	movs	r3, #160	@ 0xa0
 8000764:	05db      	lsls	r3, r3, #23
 8000766:	2200      	movs	r2, #0
 8000768:	2120      	movs	r1, #32
 800076a:	0018      	movs	r0, r3
 800076c:	f001 fb93 	bl	8001e96 <HAL_GPIO_WritePin>

    bootloader_send_ack(pBuffer[0], 1);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2101      	movs	r1, #1
 8000776:	0018      	movs	r0, r3
 8000778:	f000 f8d8 	bl	800092c <bootloader_send_ack>

    printf("BL_MSG: flash erase status: %d\n", erase_status);
 800077c:	193b      	adds	r3, r7, r4
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	001a      	movs	r2, r3
 8000782:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000784:	0011      	movs	r1, r2
 8000786:	0018      	movs	r0, r3
 8000788:	f003 fb2c 	bl	8003de4 <iprintf>
    bootloader_uart_write_data(&erase_status, 1);
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2101      	movs	r1, #1
 8000790:	0018      	movs	r0, r3
 8000792:	f000 f8eb 	bl	800096c <bootloader_uart_write_data>
}
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	b005      	add	sp, #20
 800079c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	08005160 	.word	0x08005160
 80007a4:	0800518c 	.word	0x0800518c
 80007a8:	080051bc 	.word	0x080051bc

080007ac <bootloader_handle_mem_write_cmd>:



void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b087      	sub	sp, #28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
    printf("BL_MSG: >>> ENTERED bootloader_handle_mem_write_cmd <<<\n");
 80007b4:	4b52      	ldr	r3, [pc, #328]	@ (8000900 <bootloader_handle_mem_write_cmd+0x154>)
 80007b6:	0018      	movs	r0, r3
 80007b8:	f003 fb84 	bl	8003ec4 <puts>

    uint8_t len = pBuffer[0];
 80007bc:	2113      	movs	r1, #19
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	7812      	ldrb	r2, [r2, #0]
 80007c4:	701a      	strb	r2, [r3, #0]
    if (len < 7) {
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b06      	cmp	r3, #6
 80007cc:	d804      	bhi.n	80007d8 <bootloader_handle_mem_write_cmd+0x2c>
        printf("BL_MSG: ERROR - Packet too short\n");
 80007ce:	4b4d      	ldr	r3, [pc, #308]	@ (8000904 <bootloader_handle_mem_write_cmd+0x158>)
 80007d0:	0018      	movs	r0, r3
 80007d2:	f003 fb77 	bl	8003ec4 <puts>
 80007d6:	e090      	b.n	80008fa <bootloader_handle_mem_write_cmd+0x14e>
        return;
    }

    printf("BL_MSG: Packet length = %d\n", len);
 80007d8:	2313      	movs	r3, #19
 80007da:	18fb      	adds	r3, r7, r3
 80007dc:	781a      	ldrb	r2, [r3, #0]
 80007de:	4b4a      	ldr	r3, [pc, #296]	@ (8000908 <bootloader_handle_mem_write_cmd+0x15c>)
 80007e0:	0011      	movs	r1, r2
 80007e2:	0018      	movs	r0, r3
 80007e4:	f003 fafe 	bl	8003de4 <iprintf>
    printf("BL_MSG: DUMP: ");
 80007e8:	4b48      	ldr	r3, [pc, #288]	@ (800090c <bootloader_handle_mem_write_cmd+0x160>)
 80007ea:	0018      	movs	r0, r3
 80007ec:	f003 fafa 	bl	8003de4 <iprintf>
    for (int i = 0; i < (len < 16 ? len : 16); i++) {
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	e00c      	b.n	8000810 <bootloader_handle_mem_write_cmd+0x64>
        printf("%02X ", pBuffer[i]);
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	18d3      	adds	r3, r2, r3
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	001a      	movs	r2, r3
 8000800:	4b43      	ldr	r3, [pc, #268]	@ (8000910 <bootloader_handle_mem_write_cmd+0x164>)
 8000802:	0011      	movs	r1, r2
 8000804:	0018      	movs	r0, r3
 8000806:	f003 faed 	bl	8003de4 <iprintf>
    for (int i = 0; i < (len < 16 ? len : 16); i++) {
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3301      	adds	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	2313      	movs	r3, #19
 8000812:	18fb      	adds	r3, r7, r3
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b2da      	uxtb	r2, r3
 8000818:	2a10      	cmp	r2, #16
 800081a:	d900      	bls.n	800081e <bootloader_handle_mem_write_cmd+0x72>
 800081c:	2310      	movs	r3, #16
 800081e:	b2db      	uxtb	r3, r3
 8000820:	001a      	movs	r2, r3
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	4293      	cmp	r3, r2
 8000826:	dbe6      	blt.n	80007f6 <bootloader_handle_mem_write_cmd+0x4a>
    }
    printf("\n");
 8000828:	200a      	movs	r0, #10
 800082a:	f003 faeb 	bl	8003e04 <putchar>

    uint8_t payload_len = pBuffer[6];
 800082e:	2412      	movs	r4, #18
 8000830:	193b      	adds	r3, r7, r4
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	7992      	ldrb	r2, [r2, #6]
 8000836:	701a      	strb	r2, [r3, #0]
    uint32_t mem_address;
    memcpy(&mem_address, &pBuffer[2], 4);  // Safe on Cortex-M0+
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	1c99      	adds	r1, r3, #2
 800083c:	230c      	movs	r3, #12
 800083e:	18fb      	adds	r3, r7, r3
 8000840:	2204      	movs	r2, #4
 8000842:	0018      	movs	r0, r3
 8000844:	f003 fced 	bl	8004222 <memcpy>

    printf("BL_MSG: write addr = 0x%08lX, data length = %d\n", mem_address, payload_len);
 8000848:	68f9      	ldr	r1, [r7, #12]
 800084a:	193b      	adds	r3, r7, r4
 800084c:	781a      	ldrb	r2, [r3, #0]
 800084e:	4b31      	ldr	r3, [pc, #196]	@ (8000914 <bootloader_handle_mem_write_cmd+0x168>)
 8000850:	0018      	movs	r0, r3
 8000852:	f003 fac7 	bl	8003de4 <iprintf>

    bootloader_send_ack(pBuffer[0], 1);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2101      	movs	r1, #1
 800085c:	0018      	movs	r0, r3
 800085e:	f000 f865 	bl	800092c <bootloader_send_ack>
    printf("BL_MSG: ACK sent\n");
 8000862:	4b2d      	ldr	r3, [pc, #180]	@ (8000918 <bootloader_handle_mem_write_cmd+0x16c>)
 8000864:	0018      	movs	r0, r3
 8000866:	f003 fb2d 	bl	8003ec4 <puts>

    uint8_t write_status;

    if (verify_address(mem_address) == ADDR_VALID)
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	0018      	movs	r0, r3
 800086e:	f000 f8a3 	bl	80009b8 <verify_address>
 8000872:	1e03      	subs	r3, r0, #0
 8000874:	d123      	bne.n	80008be <bootloader_handle_mem_write_cmd+0x112>
    {
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000876:	23a0      	movs	r3, #160	@ 0xa0
 8000878:	05db      	lsls	r3, r3, #23
 800087a:	2201      	movs	r2, #1
 800087c:	2120      	movs	r1, #32
 800087e:	0018      	movs	r0, r3
 8000880:	f001 fb09 	bl	8001e96 <HAL_GPIO_WritePin>

        write_status = execute_mem_write(&pBuffer[7], mem_address, payload_len);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	1dd8      	adds	r0, r3, #7
 8000888:	68f9      	ldr	r1, [r7, #12]
 800088a:	193b      	adds	r3, r7, r4
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	001a      	movs	r2, r3
 8000890:	f000 f8f6 	bl	8000a80 <execute_mem_write>
 8000894:	0003      	movs	r3, r0
 8000896:	001a      	movs	r2, r3
 8000898:	240b      	movs	r4, #11
 800089a:	193b      	adds	r3, r7, r4
 800089c:	701a      	strb	r2, [r3, #0]

        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800089e:	23a0      	movs	r3, #160	@ 0xa0
 80008a0:	05db      	lsls	r3, r3, #23
 80008a2:	2200      	movs	r2, #0
 80008a4:	2120      	movs	r1, #32
 80008a6:	0018      	movs	r0, r3
 80008a8:	f001 faf5 	bl	8001e96 <HAL_GPIO_WritePin>
        printf("BL_MSG: memory write status = %d\n", write_status);
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	001a      	movs	r2, r3
 80008b2:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <bootloader_handle_mem_write_cmd+0x170>)
 80008b4:	0011      	movs	r1, r2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f003 fa94 	bl	8003de4 <iprintf>
 80008bc:	e007      	b.n	80008ce <bootloader_handle_mem_write_cmd+0x122>
    }
    else
    {
        printf("BL_MSG: invalid memory address\n");
 80008be:	4b18      	ldr	r3, [pc, #96]	@ (8000920 <bootloader_handle_mem_write_cmd+0x174>)
 80008c0:	0018      	movs	r0, r3
 80008c2:	f003 faff 	bl	8003ec4 <puts>
        write_status = ADDR_INVALID;
 80008c6:	230b      	movs	r3, #11
 80008c8:	18fb      	adds	r3, r7, r3
 80008ca:	2201      	movs	r2, #1
 80008cc:	701a      	strb	r2, [r3, #0]
    }

    printf("BL_MSG: writing status byte: 0x%02X\n", write_status);
 80008ce:	240b      	movs	r4, #11
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	001a      	movs	r2, r3
 80008d6:	4b13      	ldr	r3, [pc, #76]	@ (8000924 <bootloader_handle_mem_write_cmd+0x178>)
 80008d8:	0011      	movs	r1, r2
 80008da:	0018      	movs	r0, r3
 80008dc:	f003 fa82 	bl	8003de4 <iprintf>
    bootloader_uart_write_data(&write_status, 1);
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	2101      	movs	r1, #1
 80008e4:	0018      	movs	r0, r3
 80008e6:	f000 f841 	bl	800096c <bootloader_uart_write_data>
    printf("BL_MSG: write_status sent: %d\n", write_status);
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	001a      	movs	r2, r3
 80008f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <bootloader_handle_mem_write_cmd+0x17c>)
 80008f2:	0011      	movs	r1, r2
 80008f4:	0018      	movs	r0, r3
 80008f6:	f003 fa75 	bl	8003de4 <iprintf>
}
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b007      	add	sp, #28
 80008fe:	bd90      	pop	{r4, r7, pc}
 8000900:	080051dc 	.word	0x080051dc
 8000904:	08005214 	.word	0x08005214
 8000908:	08005238 	.word	0x08005238
 800090c:	08005254 	.word	0x08005254
 8000910:	08005264 	.word	0x08005264
 8000914:	0800526c 	.word	0x0800526c
 8000918:	0800529c 	.word	0x0800529c
 800091c:	080052b0 	.word	0x080052b0
 8000920:	080052d4 	.word	0x080052d4
 8000924:	080052f4 	.word	0x080052f4
 8000928:	0800531c 	.word	0x0800531c

0800092c <bootloader_send_ack>:


 void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
 {
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	0002      	movs	r2, r0
 8000934:	1dfb      	adds	r3, r7, #7
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	1dbb      	adds	r3, r7, #6
 800093a:	1c0a      	adds	r2, r1, #0
 800093c:	701a      	strb	r2, [r3, #0]
 	 //here we send 2 byte.. first byte is ack and the second byte is len value
 	uint8_t ack_buf[2];
 	ack_buf[0] = BL_ACK;
 800093e:	210c      	movs	r1, #12
 8000940:	187b      	adds	r3, r7, r1
 8000942:	22a5      	movs	r2, #165	@ 0xa5
 8000944:	701a      	strb	r2, [r3, #0]
 	ack_buf[1] = follow_len;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	1dba      	adds	r2, r7, #6
 800094a:	7812      	ldrb	r2, [r2, #0]
 800094c:	705a      	strb	r2, [r3, #1]
 	HAL_UART_Transmit(C_UART,ack_buf,2,HAL_MAX_DELAY);
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <bootloader_send_ack+0x3c>)
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	2301      	movs	r3, #1
 8000954:	425b      	negs	r3, r3
 8000956:	1879      	adds	r1, r7, r1
 8000958:	2202      	movs	r2, #2
 800095a:	f002 fb2b 	bl	8002fb4 <HAL_UART_Transmit>

 }
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	b004      	add	sp, #16
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			@ (mov r8, r8)
 8000968:	2000014c 	.word	0x2000014c

0800096c <bootloader_uart_write_data>:
     return (uwCRCValue == crc_host) ? VERIFY_CRC_SUCCESS : VERIFY_CRC_FAIL;
 }


 void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
 {
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
     /*you can replace the below ST's USART driver API call with your MCUs driver API call */
 	HAL_UART_Transmit(C_UART,pBuffer,len,HAL_MAX_DELAY);
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <bootloader_uart_write_data+0x24>)
 8000978:	6818      	ldr	r0, [r3, #0]
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	b29a      	uxth	r2, r3
 800097e:	2301      	movs	r3, #1
 8000980:	425b      	negs	r3, r3
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	f002 fb16 	bl	8002fb4 <HAL_UART_Transmit>

 }
 8000988:	46c0      	nop			@ (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b002      	add	sp, #8
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2000014c 	.word	0x2000014c

08000994 <get_mcu_chip_id>:

 uint16_t get_mcu_chip_id(void)
 {
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 	uint16_t cid;
 	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <get_mcu_chip_id+0x20>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	b29a      	uxth	r2, r3
 80009a0:	1dbb      	adds	r3, r7, #6
 80009a2:	0512      	lsls	r2, r2, #20
 80009a4:	0d12      	lsrs	r2, r2, #20
 80009a6:	801a      	strh	r2, [r3, #0]
 	return  cid;
 80009a8:	1dbb      	adds	r3, r7, #6
 80009aa:	881b      	ldrh	r3, [r3, #0]
 }
 80009ac:	0018      	movs	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b002      	add	sp, #8
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40015800 	.word	0x40015800

080009b8 <verify_address>:


 uint8_t verify_address(uint32_t go_address)
 {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
     if ((go_address >= SRAM1_BASE) && (go_address < SRAM1_END))
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	2380      	movs	r3, #128	@ 0x80
 80009c4:	059b      	lsls	r3, r3, #22
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d305      	bcc.n	80009d6 <verify_address+0x1e>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a04 <verify_address+0x4c>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d801      	bhi.n	80009d6 <verify_address+0x1e>
         return ADDR_VALID;
 80009d2:	2300      	movs	r3, #0
 80009d4:	e012      	b.n	80009fc <verify_address+0x44>
     else if ((go_address >= FLASH_BASE) && (go_address < FLASH_END))
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	2380      	movs	r3, #128	@ 0x80
 80009da:	051b      	lsls	r3, r3, #20
 80009dc:	429a      	cmp	r2, r3
 80009de:	d30c      	bcc.n	80009fa <verify_address+0x42>
 80009e0:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <verify_address+0x50>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	041b      	lsls	r3, r3, #16
 80009e6:	0c1b      	lsrs	r3, r3, #16
 80009e8:	029b      	lsls	r3, r3, #10
 80009ea:	4a08      	ldr	r2, [pc, #32]	@ (8000a0c <verify_address+0x54>)
 80009ec:	4694      	mov	ip, r2
 80009ee:	4463      	add	r3, ip
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d201      	bcs.n	80009fa <verify_address+0x42>
         return ADDR_VALID;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <verify_address+0x44>
     return ADDR_INVALID;
 80009fa:	2301      	movs	r3, #1
 }
 80009fc:	0018      	movs	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b002      	add	sp, #8
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20004fff 	.word	0x20004fff
 8000a08:	1ff8007c 	.word	0x1ff8007c
 8000a0c:	07ffffff 	.word	0x07ffffff

08000a10 <execute_flash_erase>:


 uint8_t execute_flash_erase(uint8_t page_number, uint16_t number_of_pages)
 {
 8000a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a12:	b089      	sub	sp, #36	@ 0x24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	0002      	movs	r2, r0
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	701a      	strb	r2, [r3, #0]
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	1c0a      	adds	r2, r1, #0
 8000a20:	801a      	strh	r2, [r3, #0]
     FLASH_EraseInitTypeDef flashErase_handle;
     HAL_StatusTypeDef status;
     uint32_t pageError;

     if (number_of_pages > 512) // L073 has 1536 pages, stay safe
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	881a      	ldrh	r2, [r3, #0]
 8000a26:	2380      	movs	r3, #128	@ 0x80
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d901      	bls.n	8000a32 <execute_flash_erase+0x22>
         return INVALID_SECTOR;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	e022      	b.n	8000a78 <execute_flash_erase+0x68>

     flashErase_handle.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000a32:	2110      	movs	r1, #16
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
     flashErase_handle.PageAddress = FLASH_BASE + ((uint32_t)page_number * 128); // 128 bytes/page
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2280      	movs	r2, #128	@ 0x80
 8000a40:	0352      	lsls	r2, r2, #13
 8000a42:	4694      	mov	ip, r2
 8000a44:	4463      	add	r3, ip
 8000a46:	01da      	lsls	r2, r3, #7
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	605a      	str	r2, [r3, #4]
     flashErase_handle.NbPages     = number_of_pages;
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	881a      	ldrh	r2, [r3, #0]
 8000a50:	000d      	movs	r5, r1
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	609a      	str	r2, [r3, #8]

     HAL_FLASH_Unlock();
 8000a56:	f000 fe89 	bl	800176c <HAL_FLASH_Unlock>
     status = HAL_FLASHEx_Erase(&flashErase_handle, &pageError);
 8000a5a:	261f      	movs	r6, #31
 8000a5c:	19bc      	adds	r4, r7, r6
 8000a5e:	230c      	movs	r3, #12
 8000a60:	18fa      	adds	r2, r7, r3
 8000a62:	197b      	adds	r3, r7, r5
 8000a64:	0011      	movs	r1, r2
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 fff6 	bl	8001a58 <HAL_FLASHEx_Erase>
 8000a6c:	0003      	movs	r3, r0
 8000a6e:	7023      	strb	r3, [r4, #0]
     HAL_FLASH_Lock();
 8000a70:	f000 fed0 	bl	8001814 <HAL_FLASH_Lock>

     return status;
 8000a74:	19bb      	adds	r3, r7, r6
 8000a76:	781b      	ldrb	r3, [r3, #0]
 }
 8000a78:	0018      	movs	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b009      	add	sp, #36	@ 0x24
 8000a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a80 <execute_mem_write>:



 uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
 {
 8000a80:	b5b0      	push	{r4, r5, r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
     HAL_StatusTypeDef status = HAL_OK;
 8000a8c:	231f      	movs	r3, #31
 8000a8e:	18fb      	adds	r3, r7, r3
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]

     printf("BL_MSG: inside execute_mem_write len = %lu\n", len);
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	4b41      	ldr	r3, [pc, #260]	@ (8000b9c <execute_mem_write+0x11c>)
 8000a98:	0011      	movs	r1, r2
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f003 f9a2 	bl	8003de4 <iprintf>

     // Align length to 4 bytes
     uint32_t padded_len = (len + 3) & ~0x03;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3303      	adds	r3, #3
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	4393      	bics	r3, r2
 8000aa8:	617b      	str	r3, [r7, #20]

     HAL_FLASH_Unlock();
 8000aaa:	f000 fe5f 	bl	800176c <HAL_FLASH_Unlock>

     for (uint32_t i = 0; i < padded_len; i += 4)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
 8000ab2:	e05e      	b.n	8000b72 <execute_mem_write+0xf2>
     {
         uint32_t word = 0xFFFFFFFF;  // default fill
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	425b      	negs	r3, r3
 8000ab8:	613b      	str	r3, [r7, #16]

         // Copy safely (pad if buffer shorter)
         word  = (i + 0 < len ? pBuffer[i + 0] : 0xFF);
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d204      	bcs.n	8000acc <execute_mem_write+0x4c>
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	18d3      	adds	r3, r2, r3
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	e000      	b.n	8000ace <execute_mem_write+0x4e>
 8000acc:	23ff      	movs	r3, #255	@ 0xff
 8000ace:	613b      	str	r3, [r7, #16]
         word |= (i + 1 < len ? pBuffer[i + 1] : 0xFF) << 8;
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d906      	bls.n	8000ae8 <execute_mem_write+0x68>
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	3301      	adds	r3, #1
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	18d3      	adds	r3, r2, r3
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	021b      	lsls	r3, r3, #8
 8000ae6:	e001      	b.n	8000aec <execute_mem_write+0x6c>
 8000ae8:	23ff      	movs	r3, #255	@ 0xff
 8000aea:	021b      	lsls	r3, r3, #8
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
         word |= (i + 2 < len ? pBuffer[i + 2] : 0xFF) << 16;
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	3302      	adds	r3, #2
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d906      	bls.n	8000b0a <execute_mem_write+0x8a>
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	3302      	adds	r3, #2
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	18d3      	adds	r3, r2, r3
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	041b      	lsls	r3, r3, #16
 8000b08:	e001      	b.n	8000b0e <execute_mem_write+0x8e>
 8000b0a:	23ff      	movs	r3, #255	@ 0xff
 8000b0c:	041b      	lsls	r3, r3, #16
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
         word |= (i + 3 < len ? pBuffer[i + 3] : 0xFF) << 24;
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	3303      	adds	r3, #3
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d906      	bls.n	8000b2c <execute_mem_write+0xac>
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	3303      	adds	r3, #3
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	18d3      	adds	r3, r2, r3
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	061b      	lsls	r3, r3, #24
 8000b2a:	e001      	b.n	8000b30 <execute_mem_write+0xb0>
 8000b2c:	23ff      	movs	r3, #255	@ 0xff
 8000b2e:	061b      	lsls	r3, r3, #24
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]

         // Write 32-bit word
         status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, mem_address + i, word);
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	18d3      	adds	r3, r2, r3
 8000b3c:	251f      	movs	r5, #31
 8000b3e:	197c      	adds	r4, r7, r5
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	0019      	movs	r1, r3
 8000b44:	2002      	movs	r0, #2
 8000b46:	f000 fdd9 	bl	80016fc <HAL_FLASH_Program>
 8000b4a:	0003      	movs	r3, r0
 8000b4c:	7023      	strb	r3, [r4, #0]

         if (status != HAL_OK)
 8000b4e:	0028      	movs	r0, r5
 8000b50:	183b      	adds	r3, r7, r0
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d009      	beq.n	8000b6c <execute_mem_write+0xec>
         {
             printf("BL_MSG: FLASH PROGRAM FAIL at 0x%08lX (status: %d)\n", mem_address + i, status);
 8000b58:	68ba      	ldr	r2, [r7, #8]
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	18d1      	adds	r1, r2, r3
 8000b5e:	183b      	adds	r3, r7, r0
 8000b60:	781a      	ldrb	r2, [r3, #0]
 8000b62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba0 <execute_mem_write+0x120>)
 8000b64:	0018      	movs	r0, r3
 8000b66:	f003 f93d 	bl	8003de4 <iprintf>
             break;
 8000b6a:	e006      	b.n	8000b7a <execute_mem_write+0xfa>
     for (uint32_t i = 0; i < padded_len; i += 4)
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	3304      	adds	r3, #4
 8000b70:	61bb      	str	r3, [r7, #24]
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d39c      	bcc.n	8000ab4 <execute_mem_write+0x34>
         }
     }

     HAL_FLASH_Lock();
 8000b7a:	f000 fe4b 	bl	8001814 <HAL_FLASH_Lock>

     printf("BL_MSG: FLASH write complete with status = %d\n", status);
 8000b7e:	241f      	movs	r4, #31
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	781a      	ldrb	r2, [r3, #0]
 8000b84:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <execute_mem_write+0x124>)
 8000b86:	0011      	movs	r1, r2
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f003 f92b 	bl	8003de4 <iprintf>
     return status;
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	781b      	ldrb	r3, [r3, #0]
 }
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b008      	add	sp, #32
 8000b98:	bdb0      	pop	{r4, r5, r7, pc}
 8000b9a:	46c0      	nop			@ (mov r8, r8)
 8000b9c:	0800533c 	.word	0x0800533c
 8000ba0:	08005368 	.word	0x08005368
 8000ba4:	0800539c 	.word	0x0800539c

08000ba8 <bootloader_main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void bootloader_main(void)
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8000bae:	2380      	movs	r3, #128	@ 0x80
 8000bb0:	019b      	lsls	r3, r3, #6
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c24 <bootloader_main+0x7c>)
 8000bb4:	0019      	movs	r1, r3
 8000bb6:	0010      	movs	r0, r2
 8000bb8:	f001 f950 	bl	8001e5c <HAL_GPIO_ReadPin>
 8000bbc:	1e03      	subs	r3, r0, #0
 8000bbe:	d109      	bne.n	8000bd4 <bootloader_main+0x2c>
	{
		C_UART = &huart1;
 8000bc0:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <bootloader_main+0x80>)
 8000bc2:	4a1a      	ldr	r2, [pc, #104]	@ (8000c2c <bootloader_main+0x84>)
 8000bc4:	601a      	str	r2, [r3, #0]
		printf("button pressed...entering the bootloader mode\n");
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c30 <bootloader_main+0x88>)
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f003 f97b 	bl	8003ec4 <puts>
		bootloader_uart_read_data();
 8000bce:	f7ff fc59 	bl	8000484 <bootloader_uart_read_data>
		{
			printf("No valid BOOT_CMD received...jumping to application\n\r");
			bootloader_jump_to_user_app();
		}
	}
}
 8000bd2:	e023      	b.n	8000c1c <bootloader_main+0x74>
		uint8_t rx_byte = 0;
 8000bd4:	1dbb      	adds	r3, r7, #6
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]
		status = HAL_UART_Receive(&huart1, &rx_byte, 1, UART_TIMEOUT_MS);
 8000bda:	1dfc      	adds	r4, r7, #7
 8000bdc:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <bootloader_main+0x8c>)
 8000bde:	1db9      	adds	r1, r7, #6
 8000be0:	4812      	ldr	r0, [pc, #72]	@ (8000c2c <bootloader_main+0x84>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	f002 fa86 	bl	80030f4 <HAL_UART_Receive>
 8000be8:	0003      	movs	r3, r0
 8000bea:	7023      	strb	r3, [r4, #0]
		if (status == HAL_OK && rx_byte == BOOT_CMD)
 8000bec:	1dfb      	adds	r3, r7, #7
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d10d      	bne.n	8000c10 <bootloader_main+0x68>
 8000bf4:	1dbb      	adds	r3, r7, #6
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b50      	cmp	r3, #80	@ 0x50
 8000bfa:	d109      	bne.n	8000c10 <bootloader_main+0x68>
			C_UART = &huart1;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <bootloader_main+0x80>)
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	@ (8000c2c <bootloader_main+0x84>)
 8000c00:	601a      	str	r2, [r3, #0]
			printf("BOOT_CMD (0x50) received...entering bootloader mode\n\r");
 8000c02:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <bootloader_main+0x90>)
 8000c04:	0018      	movs	r0, r3
 8000c06:	f003 f8ed 	bl	8003de4 <iprintf>
			bootloader_uart_read_data();
 8000c0a:	f7ff fc3b 	bl	8000484 <bootloader_uart_read_data>
}
 8000c0e:	e005      	b.n	8000c1c <bootloader_main+0x74>
			printf("No valid BOOT_CMD received...jumping to application\n\r");
 8000c10:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <bootloader_main+0x94>)
 8000c12:	0018      	movs	r0, r3
 8000c14:	f003 f8e6 	bl	8003de4 <iprintf>
			bootloader_jump_to_user_app();
 8000c18:	f7ff fc92 	bl	8000540 <bootloader_jump_to_user_app>
}
 8000c1c:	46c0      	nop			@ (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b003      	add	sp, #12
 8000c22:	bd90      	pop	{r4, r7, pc}
 8000c24:	50000800 	.word	0x50000800
 8000c28:	2000014c 	.word	0x2000014c
 8000c2c:	20000174 	.word	0x20000174
 8000c30:	080053cc 	.word	0x080053cc
 8000c34:	00000bb8 	.word	0x00000bb8
 8000c38:	080053fc 	.word	0x080053fc
 8000c3c:	08005434 	.word	0x08005434

08000c40 <__io_putchar>:

#define PRINTF   int __io_putchar(int ch)
PRINTF
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000c48:	2301      	movs	r3, #1
 8000c4a:	425b      	negs	r3, r3
 8000c4c:	1d39      	adds	r1, r7, #4
 8000c4e:	4804      	ldr	r0, [pc, #16]	@ (8000c60 <__io_putchar+0x20>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	f002 f9af 	bl	8002fb4 <HAL_UART_Transmit>
	return ch;
 8000c56:	687b      	ldr	r3, [r7, #4]
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b002      	add	sp, #8
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	200001fc 	.word	0x200001fc

08000c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c68:	f000 faf8 	bl	800125c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6c:	f000 f812 	bl	8000c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c70:	f000 f90a 	bl	8000e88 <MX_GPIO_Init>
  MX_CRC_Init();
 8000c74:	f000 f884 	bl	8000d80 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000c78:	f000 f8a6 	bl	8000dc8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000c7c:	f000 f8d4 	bl	8000e28 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("bootloader running....\n");
 8000c80:	4b03      	ldr	r3, [pc, #12]	@ (8000c90 <main+0x2c>)
 8000c82:	0018      	movs	r0, r3
 8000c84:	f003 f91e 	bl	8003ec4 <puts>
  bootloader_main();
 8000c88:	f7ff ff8e 	bl	8000ba8 <bootloader_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c8c:	46c0      	nop			@ (mov r8, r8)
 8000c8e:	e7fd      	b.n	8000c8c <main+0x28>
 8000c90:	0800546c 	.word	0x0800546c

08000c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c94:	b590      	push	{r4, r7, lr}
 8000c96:	b09f      	sub	sp, #124	@ 0x7c
 8000c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9a:	2440      	movs	r4, #64	@ 0x40
 8000c9c:	193b      	adds	r3, r7, r4
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	2338      	movs	r3, #56	@ 0x38
 8000ca2:	001a      	movs	r2, r3
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	f003 fa39 	bl	800411c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000caa:	232c      	movs	r3, #44	@ 0x2c
 8000cac:	18fb      	adds	r3, r7, r3
 8000cae:	0018      	movs	r0, r3
 8000cb0:	2314      	movs	r3, #20
 8000cb2:	001a      	movs	r2, r3
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	f003 fa31 	bl	800411c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	2328      	movs	r3, #40	@ 0x28
 8000cc0:	001a      	movs	r2, r3
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	f003 fa2a 	bl	800411c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d78 <SystemClock_Config+0xe4>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8000d7c <SystemClock_Config+0xe8>)
 8000cce:	401a      	ands	r2, r3
 8000cd0:	4b29      	ldr	r3, [pc, #164]	@ (8000d78 <SystemClock_Config+0xe4>)
 8000cd2:	2180      	movs	r1, #128	@ 0x80
 8000cd4:	0109      	lsls	r1, r1, #4
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cda:	0021      	movs	r1, r4
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	2202      	movs	r2, #2
 8000ce0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	2210      	movs	r2, #16
 8000cec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000cfa:	187b      	adds	r3, r7, r1
 8000cfc:	2280      	movs	r2, #128	@ 0x80
 8000cfe:	02d2      	lsls	r2, r2, #11
 8000d00:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2280      	movs	r2, #128	@ 0x80
 8000d06:	03d2      	lsls	r2, r2, #15
 8000d08:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f001 f987 	bl	8002020 <HAL_RCC_OscConfig>
 8000d12:	1e03      	subs	r3, r0, #0
 8000d14:	d001      	beq.n	8000d1a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000d16:	f000 f90d 	bl	8000f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1a:	212c      	movs	r1, #44	@ 0x2c
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	220f      	movs	r2, #15
 8000d20:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	2203      	movs	r2, #3
 8000d26:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f001 fd42 	bl	80027c8 <HAL_RCC_ClockConfig>
 8000d44:	1e03      	subs	r3, r0, #0
 8000d46:	d001      	beq.n	8000d4c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000d48:	f000 f8f4 	bl	8000f34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2203      	movs	r2, #3
 8000d50:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	0018      	movs	r0, r3
 8000d62:	f001 ff35 	bl	8002bd0 <HAL_RCCEx_PeriphCLKConfig>
 8000d66:	1e03      	subs	r3, r0, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000d6a:	f000 f8e3 	bl	8000f34 <Error_Handler>
  }
}
 8000d6e:	46c0      	nop			@ (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b01f      	add	sp, #124	@ 0x7c
 8000d74:	bd90      	pop	{r4, r7, pc}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	40007000 	.word	0x40007000
 8000d7c:	ffffe7ff 	.word	0xffffe7ff

08000d80 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d84:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <MX_CRC_Init+0x40>)
 8000d86:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc4 <MX_CRC_Init+0x44>)
 8000d88:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc0 <MX_CRC_Init+0x40>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d90:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <MX_CRC_Init+0x40>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d96:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <MX_CRC_Init+0x40>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <MX_CRC_Init+0x40>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000da2:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <MX_CRC_Init+0x40>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000da8:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <MX_CRC_Init+0x40>)
 8000daa:	0018      	movs	r0, r3
 8000dac:	f000 fbca 	bl	8001544 <HAL_CRC_Init>
 8000db0:	1e03      	subs	r3, r0, #0
 8000db2:	d001      	beq.n	8000db8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000db4:	f000 f8be 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000db8:	46c0      	nop			@ (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	20000150 	.word	0x20000150
 8000dc4:	40023000 	.word	0x40023000

08000dc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dcc:	4b14      	ldr	r3, [pc, #80]	@ (8000e20 <MX_USART1_UART_Init+0x58>)
 8000dce:	4a15      	ldr	r2, [pc, #84]	@ (8000e24 <MX_USART1_UART_Init+0x5c>)
 8000dd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	@ (8000e20 <MX_USART1_UART_Init+0x58>)
 8000dd4:	22e1      	movs	r2, #225	@ 0xe1
 8000dd6:	0252      	lsls	r2, r2, #9
 8000dd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dda:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <MX_USART1_UART_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e20 <MX_USART1_UART_Init+0x58>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <MX_USART1_UART_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <MX_USART1_UART_Init+0x58>)
 8000dee:	220c      	movs	r2, #12
 8000df0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <MX_USART1_UART_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df8:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <MX_USART1_UART_Init+0x58>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <MX_USART1_UART_Init+0x58>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <MX_USART1_UART_Init+0x58>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e0a:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <MX_USART1_UART_Init+0x58>)
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f002 f87d 	bl	8002f0c <HAL_UART_Init>
 8000e12:	1e03      	subs	r3, r0, #0
 8000e14:	d001      	beq.n	8000e1a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e16:	f000 f88d 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e1a:	46c0      	nop			@ (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000174 	.word	0x20000174
 8000e24:	40013800 	.word	0x40013800

08000e28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	@ (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e2e:	4a15      	ldr	r2, [pc, #84]	@ (8000e84 <MX_USART2_UART_Init+0x5c>)
 8000e30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e32:	4b13      	ldr	r3, [pc, #76]	@ (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e34:	22e1      	movs	r2, #225	@ 0xe1
 8000e36:	0252      	lsls	r2, r2, #9
 8000e38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	@ (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e4e:	220c      	movs	r2, #12
 8000e50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e58:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e64:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e6a:	4b05      	ldr	r3, [pc, #20]	@ (8000e80 <MX_USART2_UART_Init+0x58>)
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f002 f84d 	bl	8002f0c <HAL_UART_Init>
 8000e72:	1e03      	subs	r3, r0, #0
 8000e74:	d001      	beq.n	8000e7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e76:	f000 f85d 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	200001fc 	.word	0x200001fc
 8000e84:	40004400 	.word	0x40004400

08000e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b089      	sub	sp, #36	@ 0x24
 8000e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	240c      	movs	r4, #12
 8000e90:	193b      	adds	r3, r7, r4
 8000e92:	0018      	movs	r0, r3
 8000e94:	2314      	movs	r3, #20
 8000e96:	001a      	movs	r2, r3
 8000e98:	2100      	movs	r1, #0
 8000e9a:	f003 f93f 	bl	800411c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	4b23      	ldr	r3, [pc, #140]	@ (8000f2c <MX_GPIO_Init+0xa4>)
 8000ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ea2:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <MX_GPIO_Init+0xa4>)
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000eaa:	4b20      	ldr	r3, [pc, #128]	@ (8000f2c <MX_GPIO_Init+0xa4>)
 8000eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eae:	2204      	movs	r2, #4
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f2c <MX_GPIO_Init+0xa4>)
 8000eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000eba:	4b1c      	ldr	r3, [pc, #112]	@ (8000f2c <MX_GPIO_Init+0xa4>)
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <MX_GPIO_Init+0xa4>)
 8000ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4013      	ands	r3, r2
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ece:	23a0      	movs	r3, #160	@ 0xa0
 8000ed0:	05db      	lsls	r3, r3, #23
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2120      	movs	r1, #32
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f000 ffdd 	bl	8001e96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000edc:	193b      	adds	r3, r7, r4
 8000ede:	2280      	movs	r2, #128	@ 0x80
 8000ee0:	0192      	lsls	r2, r2, #6
 8000ee2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee4:	193b      	adds	r3, r7, r4
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	193b      	adds	r3, r7, r4
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f30 <MX_GPIO_Init+0xa8>)
 8000ef4:	0019      	movs	r1, r3
 8000ef6:	0010      	movs	r0, r2
 8000ef8:	f000 fe32 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000efc:	0021      	movs	r1, r4
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	2220      	movs	r2, #32
 8000f02:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	2201      	movs	r2, #1
 8000f08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f16:	187a      	adds	r2, r7, r1
 8000f18:	23a0      	movs	r3, #160	@ 0xa0
 8000f1a:	05db      	lsls	r3, r3, #23
 8000f1c:	0011      	movs	r1, r2
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f000 fe1e 	bl	8001b60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f24:	46c0      	nop			@ (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b009      	add	sp, #36	@ 0x24
 8000f2a:	bd90      	pop	{r4, r7, pc}
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	50000800 	.word	0x50000800

08000f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f38:	b672      	cpsid	i
}
 8000f3a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f3c:	46c0      	nop			@ (mov r8, r8)
 8000f3e:	e7fd      	b.n	8000f3c <Error_Handler+0x8>

08000f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f44:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <HAL_MspInit+0x24>)
 8000f46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <HAL_MspInit+0x24>)
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f50:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <HAL_MspInit+0x24>)
 8000f52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f54:	4b03      	ldr	r3, [pc, #12]	@ (8000f64 <HAL_MspInit+0x24>)
 8000f56:	2180      	movs	r1, #128	@ 0x80
 8000f58:	0549      	lsls	r1, r1, #21
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40021000 	.word	0x40021000

08000f68 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <HAL_CRC_MspInit+0x38>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d10d      	bne.n	8000f96 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <HAL_CRC_MspInit+0x3c>)
 8000f7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f7e:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <HAL_CRC_MspInit+0x3c>)
 8000f80:	2180      	movs	r1, #128	@ 0x80
 8000f82:	0149      	lsls	r1, r1, #5
 8000f84:	430a      	orrs	r2, r1
 8000f86:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_CRC_MspInit+0x3c>)
 8000f8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f8c:	2380      	movs	r3, #128	@ 0x80
 8000f8e:	015b      	lsls	r3, r3, #5
 8000f90:	4013      	ands	r3, r2
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b004      	add	sp, #16
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			@ (mov r8, r8)
 8000fa0:	40023000 	.word	0x40023000
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b08b      	sub	sp, #44	@ 0x2c
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	2414      	movs	r4, #20
 8000fb2:	193b      	adds	r3, r7, r4
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	2314      	movs	r3, #20
 8000fb8:	001a      	movs	r2, r3
 8000fba:	2100      	movs	r1, #0
 8000fbc:	f003 f8ae 	bl	800411c <memset>
  if(huart->Instance==USART1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a30      	ldr	r2, [pc, #192]	@ (8001088 <HAL_UART_MspInit+0xe0>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d12b      	bne.n	8001022 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fca:	4b30      	ldr	r3, [pc, #192]	@ (800108c <HAL_UART_MspInit+0xe4>)
 8000fcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fce:	4b2f      	ldr	r3, [pc, #188]	@ (800108c <HAL_UART_MspInit+0xe4>)
 8000fd0:	2180      	movs	r1, #128	@ 0x80
 8000fd2:	01c9      	lsls	r1, r1, #7
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd8:	4b2c      	ldr	r3, [pc, #176]	@ (800108c <HAL_UART_MspInit+0xe4>)
 8000fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800108c <HAL_UART_MspInit+0xe4>)
 8000fde:	2101      	movs	r1, #1
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fe4:	4b29      	ldr	r3, [pc, #164]	@ (800108c <HAL_UART_MspInit+0xe4>)
 8000fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ff0:	193b      	adds	r3, r7, r4
 8000ff2:	22c0      	movs	r2, #192	@ 0xc0
 8000ff4:	00d2      	lsls	r2, r2, #3
 8000ff6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	0021      	movs	r1, r4
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	187b      	adds	r3, r7, r1
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	187b      	adds	r3, r7, r1
 8001008:	2203      	movs	r2, #3
 800100a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800100c:	187b      	adds	r3, r7, r1
 800100e:	2204      	movs	r2, #4
 8001010:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	187a      	adds	r2, r7, r1
 8001014:	23a0      	movs	r3, #160	@ 0xa0
 8001016:	05db      	lsls	r3, r3, #23
 8001018:	0011      	movs	r1, r2
 800101a:	0018      	movs	r0, r3
 800101c:	f000 fda0 	bl	8001b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001020:	e02e      	b.n	8001080 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a1a      	ldr	r2, [pc, #104]	@ (8001090 <HAL_UART_MspInit+0xe8>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d129      	bne.n	8001080 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800102c:	4b17      	ldr	r3, [pc, #92]	@ (800108c <HAL_UART_MspInit+0xe4>)
 800102e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001030:	4b16      	ldr	r3, [pc, #88]	@ (800108c <HAL_UART_MspInit+0xe4>)
 8001032:	2180      	movs	r1, #128	@ 0x80
 8001034:	0289      	lsls	r1, r1, #10
 8001036:	430a      	orrs	r2, r1
 8001038:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	4b14      	ldr	r3, [pc, #80]	@ (800108c <HAL_UART_MspInit+0xe4>)
 800103c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <HAL_UART_MspInit+0xe4>)
 8001040:	2101      	movs	r1, #1
 8001042:	430a      	orrs	r2, r1
 8001044:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001046:	4b11      	ldr	r3, [pc, #68]	@ (800108c <HAL_UART_MspInit+0xe4>)
 8001048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800104a:	2201      	movs	r2, #1
 800104c:	4013      	ands	r3, r2
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001052:	2114      	movs	r1, #20
 8001054:	187b      	adds	r3, r7, r1
 8001056:	220c      	movs	r2, #12
 8001058:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	187b      	adds	r3, r7, r1
 800105c:	2202      	movs	r2, #2
 800105e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	187b      	adds	r3, r7, r1
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	187b      	adds	r3, r7, r1
 8001068:	2203      	movs	r2, #3
 800106a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800106c:	187b      	adds	r3, r7, r1
 800106e:	2204      	movs	r2, #4
 8001070:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	187a      	adds	r2, r7, r1
 8001074:	23a0      	movs	r3, #160	@ 0xa0
 8001076:	05db      	lsls	r3, r3, #23
 8001078:	0011      	movs	r1, r2
 800107a:	0018      	movs	r0, r3
 800107c:	f000 fd70 	bl	8001b60 <HAL_GPIO_Init>
}
 8001080:	46c0      	nop			@ (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	b00b      	add	sp, #44	@ 0x2c
 8001086:	bd90      	pop	{r4, r7, pc}
 8001088:	40013800 	.word	0x40013800
 800108c:	40021000 	.word	0x40021000
 8001090:	40004400 	.word	0x40004400

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001098:	46c0      	nop			@ (mov r8, r8)
 800109a:	e7fd      	b.n	8001098 <NMI_Handler+0x4>

0800109c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a0:	46c0      	nop			@ (mov r8, r8)
 80010a2:	e7fd      	b.n	80010a0 <HardFault_Handler+0x4>

080010a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010a8:	46c0      	nop			@ (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b2:	46c0      	nop			@ (mov r8, r8)
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010bc:	f000 f94e 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c0:	46c0      	nop			@ (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b086      	sub	sp, #24
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	e00a      	b.n	80010ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010d8:	e000      	b.n	80010dc <_read+0x16>
 80010da:	bf00      	nop
 80010dc:	0001      	movs	r1, r0
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	1c5a      	adds	r2, r3, #1
 80010e2:	60ba      	str	r2, [r7, #8]
 80010e4:	b2ca      	uxtb	r2, r1
 80010e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	3301      	adds	r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	dbf0      	blt.n	80010d8 <_read+0x12>
  }

  return len;
 80010f6:	687b      	ldr	r3, [r7, #4]
}
 80010f8:	0018      	movs	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b006      	add	sp, #24
 80010fe:	bd80      	pop	{r7, pc}

08001100 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	e009      	b.n	8001126 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	1c5a      	adds	r2, r3, #1
 8001116:	60ba      	str	r2, [r7, #8]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	0018      	movs	r0, r3
 800111c:	f7ff fd90 	bl	8000c40 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	3301      	adds	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	429a      	cmp	r2, r3
 800112c:	dbf1      	blt.n	8001112 <_write+0x12>
  }
  return len;
 800112e:	687b      	ldr	r3, [r7, #4]
}
 8001130:	0018      	movs	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	b006      	add	sp, #24
 8001136:	bd80      	pop	{r7, pc}

08001138 <_close>:

int _close(int file)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001140:	2301      	movs	r3, #1
 8001142:	425b      	negs	r3, r3
}
 8001144:	0018      	movs	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	b002      	add	sp, #8
 800114a:	bd80      	pop	{r7, pc}

0800114c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	2280      	movs	r2, #128	@ 0x80
 800115a:	0192      	lsls	r2, r2, #6
 800115c:	605a      	str	r2, [r3, #4]
  return 0;
 800115e:	2300      	movs	r3, #0
}
 8001160:	0018      	movs	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	b002      	add	sp, #8
 8001166:	bd80      	pop	{r7, pc}

08001168 <_isatty>:

int _isatty(int file)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001170:	2301      	movs	r3, #1
}
 8001172:	0018      	movs	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	b002      	add	sp, #8
 8001178:	bd80      	pop	{r7, pc}

0800117a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b084      	sub	sp, #16
 800117e:	af00      	add	r7, sp, #0
 8001180:	60f8      	str	r0, [r7, #12]
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001186:	2300      	movs	r3, #0
}
 8001188:	0018      	movs	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	b004      	add	sp, #16
 800118e:	bd80      	pop	{r7, pc}

08001190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001198:	4a14      	ldr	r2, [pc, #80]	@ (80011ec <_sbrk+0x5c>)
 800119a:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <_sbrk+0x60>)
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a4:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011ac:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <_sbrk+0x64>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	@ (80011f8 <_sbrk+0x68>)
 80011b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b2:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	18d3      	adds	r3, r2, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d207      	bcs.n	80011d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c0:	f003 f802 	bl	80041c8 <__errno>
 80011c4:	0003      	movs	r3, r0
 80011c6:	220c      	movs	r2, #12
 80011c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	425b      	negs	r3, r3
 80011ce:	e009      	b.n	80011e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d0:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <_sbrk+0x64>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011d6:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	18d2      	adds	r2, r2, r3
 80011de:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <_sbrk+0x64>)
 80011e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80011e2:	68fb      	ldr	r3, [r7, #12]
}
 80011e4:	0018      	movs	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b006      	add	sp, #24
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20005000 	.word	0x20005000
 80011f0:	00000400 	.word	0x00000400
 80011f4:	20000284 	.word	0x20000284
 80011f8:	200003f0 	.word	0x200003f0

080011fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001200:	46c0      	nop			@ (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001208:	480d      	ldr	r0, [pc, #52]	@ (8001240 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800120a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800120c:	f7ff fff6 	bl	80011fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001210:	480c      	ldr	r0, [pc, #48]	@ (8001244 <LoopForever+0x6>)
  ldr r1, =_edata
 8001212:	490d      	ldr	r1, [pc, #52]	@ (8001248 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001214:	4a0d      	ldr	r2, [pc, #52]	@ (800124c <LoopForever+0xe>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001228:	4c0a      	ldr	r4, [pc, #40]	@ (8001254 <LoopForever+0x16>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001236:	f002 ffcd 	bl	80041d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123a:	f7ff fd13 	bl	8000c64 <main>

0800123e <LoopForever>:

LoopForever:
    b LoopForever
 800123e:	e7fe      	b.n	800123e <LoopForever>
   ldr   r0, =_estack
 8001240:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800124c:	08005534 	.word	0x08005534
  ldr r2, =_sbss
 8001250:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001254:	200003f0 	.word	0x200003f0

08001258 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC1_COMP_IRQHandler>
	...

0800125c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001262:	1dfb      	adds	r3, r7, #7
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001268:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <HAL_Init+0x3c>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <HAL_Init+0x3c>)
 800126e:	2140      	movs	r1, #64	@ 0x40
 8001270:	430a      	orrs	r2, r1
 8001272:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001274:	2003      	movs	r0, #3
 8001276:	f000 f83d 	bl	80012f4 <HAL_InitTick>
 800127a:	1e03      	subs	r3, r0, #0
 800127c:	d003      	beq.n	8001286 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	2201      	movs	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
 8001284:	e001      	b.n	800128a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001286:	f7ff fe5b 	bl	8000f40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	781b      	ldrb	r3, [r3, #0]
}
 800128e:	0018      	movs	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	b002      	add	sp, #8
 8001294:	bd80      	pop	{r7, pc}
 8001296:	46c0      	nop			@ (mov r8, r8)
 8001298:	40022000 	.word	0x40022000

0800129c <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80012a0:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <HAL_DeInit+0x48>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	4252      	negs	r2, r2
 80012a6:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_APB1_RELEASE_RESET();
 80012a8:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <HAL_DeInit+0x48>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	629a      	str	r2, [r3, #40]	@ 0x28

  __HAL_RCC_APB2_FORCE_RESET();
 80012ae:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <HAL_DeInit+0x48>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	4252      	negs	r2, r2
 80012b4:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80012b6:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <HAL_DeInit+0x48>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB_FORCE_RESET();
 80012bc:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <HAL_DeInit+0x48>)
 80012be:	2201      	movs	r2, #1
 80012c0:	4252      	negs	r2, r2
 80012c2:	621a      	str	r2, [r3, #32]
  __HAL_RCC_AHB_RELEASE_RESET();
 80012c4:	4b07      	ldr	r3, [pc, #28]	@ (80012e4 <HAL_DeInit+0x48>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	621a      	str	r2, [r3, #32]

  __HAL_RCC_IOP_FORCE_RESET();
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <HAL_DeInit+0x48>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	4252      	negs	r2, r2
 80012d0:	61da      	str	r2, [r3, #28]
  __HAL_RCC_IOP_RELEASE_RESET();
 80012d2:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <HAL_DeInit+0x48>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	61da      	str	r2, [r3, #28]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80012d8:	f000 f806 	bl	80012e8 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	0018      	movs	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40021000 	.word	0x40021000

080012e8 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80012ec:	46c0      	nop			@ (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012fc:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <HAL_InitTick+0x5c>)
 80012fe:	681c      	ldr	r4, [r3, #0]
 8001300:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <HAL_InitTick+0x60>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	0019      	movs	r1, r3
 8001306:	23fa      	movs	r3, #250	@ 0xfa
 8001308:	0098      	lsls	r0, r3, #2
 800130a:	f7fe ff07 	bl	800011c <__udivsi3>
 800130e:	0003      	movs	r3, r0
 8001310:	0019      	movs	r1, r3
 8001312:	0020      	movs	r0, r4
 8001314:	f7fe ff02 	bl	800011c <__udivsi3>
 8001318:	0003      	movs	r3, r0
 800131a:	0018      	movs	r0, r3
 800131c:	f000 f905 	bl	800152a <HAL_SYSTICK_Config>
 8001320:	1e03      	subs	r3, r0, #0
 8001322:	d001      	beq.n	8001328 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e00f      	b.n	8001348 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b03      	cmp	r3, #3
 800132c:	d80b      	bhi.n	8001346 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	2301      	movs	r3, #1
 8001332:	425b      	negs	r3, r3
 8001334:	2200      	movs	r2, #0
 8001336:	0018      	movs	r0, r3
 8001338:	f000 f8e2 	bl	8001500 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <HAL_InitTick+0x64>)
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e000      	b.n	8001348 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
}
 8001348:	0018      	movs	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	b003      	add	sp, #12
 800134e:	bd90      	pop	{r4, r7, pc}
 8001350:	20000000 	.word	0x20000000
 8001354:	20000008 	.word	0x20000008
 8001358:	20000004 	.word	0x20000004

0800135c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001360:	4b05      	ldr	r3, [pc, #20]	@ (8001378 <HAL_IncTick+0x1c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	001a      	movs	r2, r3
 8001366:	4b05      	ldr	r3, [pc, #20]	@ (800137c <HAL_IncTick+0x20>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	18d2      	adds	r2, r2, r3
 800136c:	4b03      	ldr	r3, [pc, #12]	@ (800137c <HAL_IncTick+0x20>)
 800136e:	601a      	str	r2, [r3, #0]
}
 8001370:	46c0      	nop			@ (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			@ (mov r8, r8)
 8001378:	20000008 	.word	0x20000008
 800137c:	20000288 	.word	0x20000288

08001380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b02      	ldr	r3, [pc, #8]	@ (8001390 <HAL_GetTick+0x10>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	0018      	movs	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	20000288 	.word	0x20000288

08001394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff fff0 	bl	8001380 <HAL_GetTick>
 80013a0:	0003      	movs	r3, r0
 80013a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3301      	adds	r3, #1
 80013ac:	d005      	beq.n	80013ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ae:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <HAL_Delay+0x44>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	001a      	movs	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	189b      	adds	r3, r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ba:	46c0      	nop			@ (mov r8, r8)
 80013bc:	f7ff ffe0 	bl	8001380 <HAL_GetTick>
 80013c0:	0002      	movs	r2, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d8f7      	bhi.n	80013bc <HAL_Delay+0x28>
  {
  }
}
 80013cc:	46c0      	nop			@ (mov r8, r8)
 80013ce:	46c0      	nop			@ (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b004      	add	sp, #16
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	46c0      	nop			@ (mov r8, r8)
 80013d8:	20000008 	.word	0x20000008

080013dc <__NVIC_SetPriority>:
{
 80013dc:	b590      	push	{r4, r7, lr}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	0002      	movs	r2, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	1dfb      	adds	r3, r7, #7
 80013e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80013f0:	d828      	bhi.n	8001444 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013f2:	4a2f      	ldr	r2, [pc, #188]	@ (80014b0 <__NVIC_SetPriority+0xd4>)
 80013f4:	1dfb      	adds	r3, r7, #7
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b25b      	sxtb	r3, r3
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	33c0      	adds	r3, #192	@ 0xc0
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	589b      	ldr	r3, [r3, r2]
 8001402:	1dfa      	adds	r2, r7, #7
 8001404:	7812      	ldrb	r2, [r2, #0]
 8001406:	0011      	movs	r1, r2
 8001408:	2203      	movs	r2, #3
 800140a:	400a      	ands	r2, r1
 800140c:	00d2      	lsls	r2, r2, #3
 800140e:	21ff      	movs	r1, #255	@ 0xff
 8001410:	4091      	lsls	r1, r2
 8001412:	000a      	movs	r2, r1
 8001414:	43d2      	mvns	r2, r2
 8001416:	401a      	ands	r2, r3
 8001418:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	019b      	lsls	r3, r3, #6
 800141e:	22ff      	movs	r2, #255	@ 0xff
 8001420:	401a      	ands	r2, r3
 8001422:	1dfb      	adds	r3, r7, #7
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	0018      	movs	r0, r3
 8001428:	2303      	movs	r3, #3
 800142a:	4003      	ands	r3, r0
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001430:	481f      	ldr	r0, [pc, #124]	@ (80014b0 <__NVIC_SetPriority+0xd4>)
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	b25b      	sxtb	r3, r3
 8001438:	089b      	lsrs	r3, r3, #2
 800143a:	430a      	orrs	r2, r1
 800143c:	33c0      	adds	r3, #192	@ 0xc0
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	501a      	str	r2, [r3, r0]
}
 8001442:	e031      	b.n	80014a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001444:	4a1b      	ldr	r2, [pc, #108]	@ (80014b4 <__NVIC_SetPriority+0xd8>)
 8001446:	1dfb      	adds	r3, r7, #7
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	0019      	movs	r1, r3
 800144c:	230f      	movs	r3, #15
 800144e:	400b      	ands	r3, r1
 8001450:	3b08      	subs	r3, #8
 8001452:	089b      	lsrs	r3, r3, #2
 8001454:	3306      	adds	r3, #6
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	18d3      	adds	r3, r2, r3
 800145a:	3304      	adds	r3, #4
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	1dfa      	adds	r2, r7, #7
 8001460:	7812      	ldrb	r2, [r2, #0]
 8001462:	0011      	movs	r1, r2
 8001464:	2203      	movs	r2, #3
 8001466:	400a      	ands	r2, r1
 8001468:	00d2      	lsls	r2, r2, #3
 800146a:	21ff      	movs	r1, #255	@ 0xff
 800146c:	4091      	lsls	r1, r2
 800146e:	000a      	movs	r2, r1
 8001470:	43d2      	mvns	r2, r2
 8001472:	401a      	ands	r2, r3
 8001474:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	019b      	lsls	r3, r3, #6
 800147a:	22ff      	movs	r2, #255	@ 0xff
 800147c:	401a      	ands	r2, r3
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	0018      	movs	r0, r3
 8001484:	2303      	movs	r3, #3
 8001486:	4003      	ands	r3, r0
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800148c:	4809      	ldr	r0, [pc, #36]	@ (80014b4 <__NVIC_SetPriority+0xd8>)
 800148e:	1dfb      	adds	r3, r7, #7
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	001c      	movs	r4, r3
 8001494:	230f      	movs	r3, #15
 8001496:	4023      	ands	r3, r4
 8001498:	3b08      	subs	r3, #8
 800149a:	089b      	lsrs	r3, r3, #2
 800149c:	430a      	orrs	r2, r1
 800149e:	3306      	adds	r3, #6
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	18c3      	adds	r3, r0, r3
 80014a4:	3304      	adds	r3, #4
 80014a6:	601a      	str	r2, [r3, #0]
}
 80014a8:	46c0      	nop			@ (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b003      	add	sp, #12
 80014ae:	bd90      	pop	{r4, r7, pc}
 80014b0:	e000e100 	.word	0xe000e100
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	1e5a      	subs	r2, r3, #1
 80014c4:	2380      	movs	r3, #128	@ 0x80
 80014c6:	045b      	lsls	r3, r3, #17
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d301      	bcc.n	80014d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014cc:	2301      	movs	r3, #1
 80014ce:	e010      	b.n	80014f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d0:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <SysTick_Config+0x44>)
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	3a01      	subs	r2, #1
 80014d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d8:	2301      	movs	r3, #1
 80014da:	425b      	negs	r3, r3
 80014dc:	2103      	movs	r1, #3
 80014de:	0018      	movs	r0, r3
 80014e0:	f7ff ff7c 	bl	80013dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e4:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <SysTick_Config+0x44>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ea:	4b04      	ldr	r3, [pc, #16]	@ (80014fc <SysTick_Config+0x44>)
 80014ec:	2207      	movs	r2, #7
 80014ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	0018      	movs	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b002      	add	sp, #8
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	46c0      	nop			@ (mov r8, r8)
 80014fc:	e000e010 	.word	0xe000e010

08001500 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	210f      	movs	r1, #15
 800150c:	187b      	adds	r3, r7, r1
 800150e:	1c02      	adds	r2, r0, #0
 8001510:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	187b      	adds	r3, r7, r1
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b25b      	sxtb	r3, r3
 800151a:	0011      	movs	r1, r2
 800151c:	0018      	movs	r0, r3
 800151e:	f7ff ff5d 	bl	80013dc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001522:	46c0      	nop			@ (mov r8, r8)
 8001524:	46bd      	mov	sp, r7
 8001526:	b004      	add	sp, #16
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	0018      	movs	r0, r3
 8001536:	f7ff ffbf 	bl	80014b8 <SysTick_Config>
 800153a:	0003      	movs	r3, r0
}
 800153c:	0018      	movs	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	b002      	add	sp, #8
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e056      	b.n	8001604 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	7f5b      	ldrb	r3, [r3, #29]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d106      	bne.n	800156e <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	0018      	movs	r0, r3
 800156a:	f7ff fcfd 	bl	8000f68 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2202      	movs	r2, #2
 8001572:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	791b      	ldrb	r3, [r3, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10c      	bne.n	8001596 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a22      	ldr	r2, [pc, #136]	@ (800160c <HAL_CRC_Init+0xc8>)
 8001582:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2118      	movs	r1, #24
 8001590:	438a      	bics	r2, r1
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	e00b      	b.n	80015ae <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6899      	ldr	r1, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68da      	ldr	r2, [r3, #12]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	0018      	movs	r0, r3
 80015a2:	f000 f835 	bl	8001610 <HAL_CRCEx_Polynomial_Set>
 80015a6:	1e03      	subs	r3, r0, #0
 80015a8:	d001      	beq.n	80015ae <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e02a      	b.n	8001604 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	795b      	ldrb	r3, [r3, #5]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d105      	bne.n	80015c2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2201      	movs	r2, #1
 80015bc:	4252      	negs	r2, r2
 80015be:	611a      	str	r2, [r3, #16]
 80015c0:	e004      	b.n	80015cc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6912      	ldr	r2, [r2, #16]
 80015ca:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2260      	movs	r2, #96	@ 0x60
 80015d4:	4393      	bics	r3, r2
 80015d6:	0019      	movs	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	695a      	ldr	r2, [r3, #20]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2280      	movs	r2, #128	@ 0x80
 80015ec:	4393      	bics	r3, r2
 80015ee:	0019      	movs	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	699a      	ldr	r2, [r3, #24]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	0018      	movs	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	b002      	add	sp, #8
 800160a:	bd80      	pop	{r7, pc}
 800160c:	04c11db7 	.word	0x04c11db7

08001610 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800161c:	2117      	movs	r1, #23
 800161e:	187b      	adds	r3, r7, r1
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001624:	231f      	movs	r3, #31
 8001626:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2201      	movs	r2, #1
 800162c:	4013      	ands	r3, r2
 800162e:	d103      	bne.n	8001638 <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 8001630:	187b      	adds	r3, r7, r1
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
 8001636:	e045      	b.n	80016c4 <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001638:	46c0      	nop			@ (mov r8, r8)
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1e5a      	subs	r2, r3, #1
 800163e:	613a      	str	r2, [r7, #16]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d008      	beq.n	8001656 <HAL_CRCEx_Polynomial_Set+0x46>
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	221f      	movs	r2, #31
 8001648:	4013      	ands	r3, r2
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	40da      	lsrs	r2, r3
 800164e:	0013      	movs	r3, r2
 8001650:	2201      	movs	r2, #1
 8001652:	4013      	ands	r3, r2
 8001654:	d0f1      	beq.n	800163a <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b18      	cmp	r3, #24
 800165a:	d00f      	beq.n	800167c <HAL_CRCEx_Polynomial_Set+0x6c>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b18      	cmp	r3, #24
 8001660:	d824      	bhi.n	80016ac <HAL_CRCEx_Polynomial_Set+0x9c>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b10      	cmp	r3, #16
 8001666:	d011      	beq.n	800168c <HAL_CRCEx_Polynomial_Set+0x7c>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b10      	cmp	r3, #16
 800166c:	d81e      	bhi.n	80016ac <HAL_CRCEx_Polynomial_Set+0x9c>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d020      	beq.n	80016b6 <HAL_CRCEx_Polynomial_Set+0xa6>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b08      	cmp	r3, #8
 8001678:	d010      	beq.n	800169c <HAL_CRCEx_Polynomial_Set+0x8c>
 800167a:	e017      	b.n	80016ac <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	2b06      	cmp	r3, #6
 8001680:	d91b      	bls.n	80016ba <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 8001682:	2317      	movs	r3, #23
 8001684:	18fb      	adds	r3, r7, r3
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
        }
        break;
 800168a:	e016      	b.n	80016ba <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	2b07      	cmp	r3, #7
 8001690:	d915      	bls.n	80016be <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 8001692:	2317      	movs	r3, #23
 8001694:	18fb      	adds	r3, r7, r3
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
        }
        break;
 800169a:	e010      	b.n	80016be <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	2b0f      	cmp	r3, #15
 80016a0:	d90f      	bls.n	80016c2 <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 80016a2:	2317      	movs	r3, #23
 80016a4:	18fb      	adds	r3, r7, r3
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
        }
        break;
 80016aa:	e00a      	b.n	80016c2 <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80016ac:	2317      	movs	r3, #23
 80016ae:	18fb      	adds	r3, r7, r3
 80016b0:	2201      	movs	r2, #1
 80016b2:	701a      	strb	r2, [r3, #0]
        break;
 80016b4:	e006      	b.n	80016c4 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80016b6:	46c0      	nop			@ (mov r8, r8)
 80016b8:	e004      	b.n	80016c4 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80016ba:	46c0      	nop			@ (mov r8, r8)
 80016bc:	e002      	b.n	80016c4 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80016be:	46c0      	nop			@ (mov r8, r8)
 80016c0:	e000      	b.n	80016c4 <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 80016c2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 80016c4:	2317      	movs	r3, #23
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10e      	bne.n	80016ec <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2218      	movs	r2, #24
 80016de:	4393      	bics	r3, r2
 80016e0:	0019      	movs	r1, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80016ec:	2317      	movs	r3, #23
 80016ee:	18fb      	adds	r3, r7, r3
 80016f0:	781b      	ldrb	r3, [r3, #0]
}
 80016f2:	0018      	movs	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b006      	add	sp, #24
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80016fc:	b5b0      	push	{r4, r5, r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001708:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <HAL_FLASH_Program+0x68>)
 800170a:	7c1b      	ldrb	r3, [r3, #16]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d101      	bne.n	8001714 <HAL_FLASH_Program+0x18>
 8001710:	2302      	movs	r3, #2
 8001712:	e022      	b.n	800175a <HAL_FLASH_Program+0x5e>
 8001714:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <HAL_FLASH_Program+0x68>)
 8001716:	2201      	movs	r2, #1
 8001718:	741a      	strb	r2, [r3, #16]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(TypeProgram);

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800171a:	2517      	movs	r5, #23
 800171c:	197c      	adds	r4, r7, r5
 800171e:	4b12      	ldr	r3, [pc, #72]	@ (8001768 <HAL_FLASH_Program+0x6c>)
 8001720:	0018      	movs	r0, r3
 8001722:	f000 f88b 	bl	800183c <FLASH_WaitForLastOperation>
 8001726:	0003      	movs	r3, r0
 8001728:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800172a:	0029      	movs	r1, r5
 800172c:	187b      	adds	r3, r7, r1
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10c      	bne.n	800174e <HAL_FLASH_Program+0x52>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001734:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <HAL_FLASH_Program+0x68>)
 8001736:	2200      	movs	r2, #0
 8001738:	615a      	str	r2, [r3, #20]

    /*Program word (32-bit) at a specified address.*/
    *(__IO uint32_t *)Address = Data;
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001740:	187c      	adds	r4, r7, r1
 8001742:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <HAL_FLASH_Program+0x6c>)
 8001744:	0018      	movs	r0, r3
 8001746:	f000 f879 	bl	800183c <FLASH_WaitForLastOperation>
 800174a:	0003      	movs	r3, r0
 800174c:	7023      	strb	r3, [r4, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800174e:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <HAL_FLASH_Program+0x68>)
 8001750:	2200      	movs	r2, #0
 8001752:	741a      	strb	r2, [r3, #16]

  return status;
 8001754:	2317      	movs	r3, #23
 8001756:	18fb      	adds	r3, r7, r3
 8001758:	781b      	ldrb	r3, [r3, #0]
}
 800175a:	0018      	movs	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	b006      	add	sp, #24
 8001760:	bdb0      	pop	{r4, r5, r7, pc}
 8001762:	46c0      	nop			@ (mov r8, r8)
 8001764:	2000028c 	.word	0x2000028c
 8001768:	0000c350 	.word	0x0000c350

0800176c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  /* Unlocking FLASH_PECR register access*/
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8001772:	4b23      	ldr	r3, [pc, #140]	@ (8001800 <HAL_FLASH_Unlock+0x94>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	4013      	ands	r3, r2
 800177a:	2b01      	cmp	r3, #1
 800177c:	d11a      	bne.n	80017b4 <HAL_FLASH_Unlock+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800177e:	f3ef 8310 	mrs	r3, PRIMASK
 8001782:	60fb      	str	r3, [r7, #12]
  return(result);
 8001784:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8001786:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 800178c:	4b1c      	ldr	r3, [pc, #112]	@ (8001800 <HAL_FLASH_Unlock+0x94>)
 800178e:	4a1d      	ldr	r2, [pc, #116]	@ (8001804 <HAL_FLASH_Unlock+0x98>)
 8001790:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 8001792:	4b1b      	ldr	r3, [pc, #108]	@ (8001800 <HAL_FLASH_Unlock+0x94>)
 8001794:	4a1c      	ldr	r2, [pc, #112]	@ (8001808 <HAL_FLASH_Unlock+0x9c>)
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	f383 8810 	msr	PRIMASK, r3
}
 80017a2:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 80017a4:	4b16      	ldr	r3, [pc, #88]	@ (8001800 <HAL_FLASH_Unlock+0x94>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_FLASH_Unlock+0x48>
    {
      return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e021      	b.n	80017f8 <HAL_FLASH_Unlock+0x8c>
    }
  }

  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 80017b4:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <HAL_FLASH_Unlock+0x94>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2202      	movs	r2, #2
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d11a      	bne.n	80017f6 <HAL_FLASH_Unlock+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017c0:	f3ef 8310 	mrs	r3, PRIMASK
 80017c4:	607b      	str	r3, [r7, #4]
  return(result);
 80017c6:	687b      	ldr	r3, [r7, #4]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 80017c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80017ca:	b672      	cpsid	i
}
 80017cc:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 80017ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <HAL_FLASH_Unlock+0x94>)
 80017d0:	4a0e      	ldr	r2, [pc, #56]	@ (800180c <HAL_FLASH_Unlock+0xa0>)
 80017d2:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 80017d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001800 <HAL_FLASH_Unlock+0x94>)
 80017d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001810 <HAL_FLASH_Unlock+0xa4>)
 80017d8:	611a      	str	r2, [r3, #16]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	f383 8810 	msr	PRIMASK, r3
}
 80017e4:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 80017e6:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <HAL_FLASH_Unlock+0x94>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2202      	movs	r2, #2
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d101      	bne.n	80017f6 <HAL_FLASH_Unlock+0x8a>
    {
      return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <HAL_FLASH_Unlock+0x8c>
    }
  }

  return HAL_OK; 
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	0018      	movs	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b006      	add	sp, #24
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40022000 	.word	0x40022000
 8001804:	89abcdef 	.word	0x89abcdef
 8001808:	02030405 	.word	0x02030405
 800180c:	8c9daebf 	.word	0x8c9daebf
 8001810:	13141516 	.word	0x13141516

08001814 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8001818:	4b07      	ldr	r3, [pc, #28]	@ (8001838 <HAL_FLASH_Lock+0x24>)
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <HAL_FLASH_Lock+0x24>)
 800181e:	2102      	movs	r1, #2
 8001820:	430a      	orrs	r2, r1
 8001822:	605a      	str	r2, [r3, #4]
  
  /* Set the PELOCK Bit to lock the PECR Register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8001824:	4b04      	ldr	r3, [pc, #16]	@ (8001838 <HAL_FLASH_Lock+0x24>)
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	4b03      	ldr	r3, [pc, #12]	@ (8001838 <HAL_FLASH_Lock+0x24>)
 800182a:	2101      	movs	r1, #1
 800182c:	430a      	orrs	r2, r1
 800182e:	605a      	str	r2, [r3, #4]

  return HAL_OK;  
 8001830:	2300      	movs	r3, #0
}
 8001832:	0018      	movs	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40022000 	.word	0x40022000

0800183c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001844:	f7ff fd9c 	bl	8001380 <HAL_GetTick>
 8001848:	0003      	movs	r3, r0
 800184a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800184c:	e00f      	b.n	800186e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3301      	adds	r3, #1
 8001852:	d00c      	beq.n	800186e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d007      	beq.n	800186a <FLASH_WaitForLastOperation+0x2e>
 800185a:	f7ff fd91 	bl	8001380 <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	429a      	cmp	r2, r3
 8001868:	d201      	bcs.n	800186e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e052      	b.n	8001914 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800186e:	4b2b      	ldr	r3, [pc, #172]	@ (800191c <FLASH_WaitForLastOperation+0xe0>)
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	2201      	movs	r2, #1
 8001874:	4013      	ands	r3, r2
 8001876:	2b01      	cmp	r3, #1
 8001878:	d0e9      	beq.n	800184e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800187a:	4b28      	ldr	r3, [pc, #160]	@ (800191c <FLASH_WaitForLastOperation+0xe0>)
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	2202      	movs	r2, #2
 8001880:	4013      	ands	r3, r2
 8001882:	2b02      	cmp	r3, #2
 8001884:	d102      	bne.n	800188c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001886:	4b25      	ldr	r3, [pc, #148]	@ (800191c <FLASH_WaitForLastOperation+0xe0>)
 8001888:	2202      	movs	r2, #2
 800188a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800188c:	4b23      	ldr	r3, [pc, #140]	@ (800191c <FLASH_WaitForLastOperation+0xe0>)
 800188e:	699a      	ldr	r2, [r3, #24]
 8001890:	2380      	movs	r3, #128	@ 0x80
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	401a      	ands	r2, r3
 8001896:	2380      	movs	r3, #128	@ 0x80
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	429a      	cmp	r2, r3
 800189c:	d035      	beq.n	800190a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800189e:	4b1f      	ldr	r3, [pc, #124]	@ (800191c <FLASH_WaitForLastOperation+0xe0>)
 80018a0:	699a      	ldr	r2, [r3, #24]
 80018a2:	2380      	movs	r3, #128	@ 0x80
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80018a8:	2380      	movs	r3, #128	@ 0x80
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d02c      	beq.n	800190a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80018b0:	4b1a      	ldr	r3, [pc, #104]	@ (800191c <FLASH_WaitForLastOperation+0xe0>)
 80018b2:	699a      	ldr	r2, [r3, #24]
 80018b4:	2380      	movs	r3, #128	@ 0x80
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80018ba:	2380      	movs	r3, #128	@ 0x80
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	429a      	cmp	r2, r3
 80018c0:	d023      	beq.n	800190a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80018c2:	4b16      	ldr	r3, [pc, #88]	@ (800191c <FLASH_WaitForLastOperation+0xe0>)
 80018c4:	699a      	ldr	r2, [r3, #24]
 80018c6:	2380      	movs	r3, #128	@ 0x80
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80018cc:	2380      	movs	r3, #128	@ 0x80
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d01a      	beq.n	800190a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80018d4:	4b11      	ldr	r3, [pc, #68]	@ (800191c <FLASH_WaitForLastOperation+0xe0>)
 80018d6:	699a      	ldr	r2, [r3, #24]
 80018d8:	2380      	movs	r3, #128	@ 0x80
 80018da:	019b      	lsls	r3, r3, #6
 80018dc:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80018de:	2380      	movs	r3, #128	@ 0x80
 80018e0:	019b      	lsls	r3, r3, #6
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d011      	beq.n	800190a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80018e6:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <FLASH_WaitForLastOperation+0xe0>)
 80018e8:	699a      	ldr	r2, [r3, #24]
 80018ea:	2380      	movs	r3, #128	@ 0x80
 80018ec:	029b      	lsls	r3, r3, #10
 80018ee:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80018f0:	2380      	movs	r3, #128	@ 0x80
 80018f2:	029b      	lsls	r3, r3, #10
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d008      	beq.n	800190a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80018f8:	4b08      	ldr	r3, [pc, #32]	@ (800191c <FLASH_WaitForLastOperation+0xe0>)
 80018fa:	699a      	ldr	r2, [r3, #24]
 80018fc:	2380      	movs	r3, #128	@ 0x80
 80018fe:	025b      	lsls	r3, r3, #9
 8001900:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8001902:	2380      	movs	r3, #128	@ 0x80
 8001904:	025b      	lsls	r3, r3, #9
 8001906:	429a      	cmp	r2, r3
 8001908:	d103      	bne.n	8001912 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800190a:	f000 f809 	bl	8001920 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	0018      	movs	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	b004      	add	sp, #16
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40022000 	.word	0x40022000

08001920 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800192a:	4b49      	ldr	r3, [pc, #292]	@ (8001a50 <FLASH_SetErrorCode+0x130>)
 800192c:	699a      	ldr	r2, [r3, #24]
 800192e:	2380      	movs	r3, #128	@ 0x80
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	401a      	ands	r2, r3
 8001934:	2380      	movs	r3, #128	@ 0x80
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	429a      	cmp	r2, r3
 800193a:	d10a      	bne.n	8001952 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800193c:	4b45      	ldr	r3, [pc, #276]	@ (8001a54 <FLASH_SetErrorCode+0x134>)
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	2202      	movs	r2, #2
 8001942:	431a      	orrs	r2, r3
 8001944:	4b43      	ldr	r3, [pc, #268]	@ (8001a54 <FLASH_SetErrorCode+0x134>)
 8001946:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2280      	movs	r2, #128	@ 0x80
 800194c:	0052      	lsls	r2, r2, #1
 800194e:	4313      	orrs	r3, r2
 8001950:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8001952:	4b3f      	ldr	r3, [pc, #252]	@ (8001a50 <FLASH_SetErrorCode+0x130>)
 8001954:	699a      	ldr	r2, [r3, #24]
 8001956:	2380      	movs	r3, #128	@ 0x80
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	401a      	ands	r2, r3
 800195c:	2380      	movs	r3, #128	@ 0x80
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	429a      	cmp	r2, r3
 8001962:	d10a      	bne.n	800197a <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001964:	4b3b      	ldr	r3, [pc, #236]	@ (8001a54 <FLASH_SetErrorCode+0x134>)
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	2201      	movs	r2, #1
 800196a:	431a      	orrs	r2, r3
 800196c:	4b39      	ldr	r3, [pc, #228]	@ (8001a54 <FLASH_SetErrorCode+0x134>)
 800196e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2280      	movs	r2, #128	@ 0x80
 8001974:	0092      	lsls	r2, r2, #2
 8001976:	4313      	orrs	r3, r2
 8001978:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800197a:	4b35      	ldr	r3, [pc, #212]	@ (8001a50 <FLASH_SetErrorCode+0x130>)
 800197c:	699a      	ldr	r2, [r3, #24]
 800197e:	2380      	movs	r3, #128	@ 0x80
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	401a      	ands	r2, r3
 8001984:	2380      	movs	r3, #128	@ 0x80
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	429a      	cmp	r2, r3
 800198a:	d10a      	bne.n	80019a2 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800198c:	4b31      	ldr	r3, [pc, #196]	@ (8001a54 <FLASH_SetErrorCode+0x134>)
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	2208      	movs	r2, #8
 8001992:	431a      	orrs	r2, r3
 8001994:	4b2f      	ldr	r3, [pc, #188]	@ (8001a54 <FLASH_SetErrorCode+0x134>)
 8001996:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2280      	movs	r2, #128	@ 0x80
 800199c:	00d2      	lsls	r2, r2, #3
 800199e:	4313      	orrs	r3, r2
 80019a0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80019a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a50 <FLASH_SetErrorCode+0x130>)
 80019a4:	699a      	ldr	r2, [r3, #24]
 80019a6:	2380      	movs	r3, #128	@ 0x80
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	401a      	ands	r2, r3
 80019ac:	2380      	movs	r3, #128	@ 0x80
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d10a      	bne.n	80019ca <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80019b4:	4b27      	ldr	r3, [pc, #156]	@ (8001a54 <FLASH_SetErrorCode+0x134>)
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	2204      	movs	r2, #4
 80019ba:	431a      	orrs	r2, r3
 80019bc:	4b25      	ldr	r3, [pc, #148]	@ (8001a54 <FLASH_SetErrorCode+0x134>)
 80019be:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2280      	movs	r2, #128	@ 0x80
 80019c4:	0112      	lsls	r2, r2, #4
 80019c6:	4313      	orrs	r3, r2
 80019c8:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 80019ca:	4b21      	ldr	r3, [pc, #132]	@ (8001a50 <FLASH_SetErrorCode+0x130>)
 80019cc:	699a      	ldr	r2, [r3, #24]
 80019ce:	2380      	movs	r3, #128	@ 0x80
 80019d0:	019b      	lsls	r3, r3, #6
 80019d2:	401a      	ands	r2, r3
 80019d4:	2380      	movs	r3, #128	@ 0x80
 80019d6:	019b      	lsls	r3, r3, #6
 80019d8:	429a      	cmp	r2, r3
 80019da:	d10a      	bne.n	80019f2 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80019dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a54 <FLASH_SetErrorCode+0x134>)
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	2210      	movs	r2, #16
 80019e2:	431a      	orrs	r2, r3
 80019e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a54 <FLASH_SetErrorCode+0x134>)
 80019e6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2280      	movs	r2, #128	@ 0x80
 80019ec:	0192      	lsls	r2, r2, #6
 80019ee:	4313      	orrs	r3, r2
 80019f0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80019f2:	4b17      	ldr	r3, [pc, #92]	@ (8001a50 <FLASH_SetErrorCode+0x130>)
 80019f4:	699a      	ldr	r2, [r3, #24]
 80019f6:	2380      	movs	r3, #128	@ 0x80
 80019f8:	029b      	lsls	r3, r3, #10
 80019fa:	401a      	ands	r2, r3
 80019fc:	2380      	movs	r3, #128	@ 0x80
 80019fe:	029b      	lsls	r3, r3, #10
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d109      	bne.n	8001a18 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8001a04:	4b13      	ldr	r3, [pc, #76]	@ (8001a54 <FLASH_SetErrorCode+0x134>)
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	2220      	movs	r2, #32
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <FLASH_SetErrorCode+0x134>)
 8001a0e:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2220      	movs	r2, #32
 8001a14:	4313      	orrs	r3, r2
 8001a16:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8001a18:	4b0d      	ldr	r3, [pc, #52]	@ (8001a50 <FLASH_SetErrorCode+0x130>)
 8001a1a:	699a      	ldr	r2, [r3, #24]
 8001a1c:	2380      	movs	r3, #128	@ 0x80
 8001a1e:	025b      	lsls	r3, r3, #9
 8001a20:	401a      	ands	r2, r3
 8001a22:	2380      	movs	r3, #128	@ 0x80
 8001a24:	025b      	lsls	r3, r3, #9
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d10a      	bne.n	8001a40 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a54 <FLASH_SetErrorCode+0x134>)
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	2240      	movs	r2, #64	@ 0x40
 8001a30:	431a      	orrs	r2, r3
 8001a32:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <FLASH_SetErrorCode+0x134>)
 8001a34:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2280      	movs	r2, #128	@ 0x80
 8001a3a:	0252      	lsls	r2, r2, #9
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001a40:	4b03      	ldr	r3, [pc, #12]	@ (8001a50 <FLASH_SetErrorCode+0x130>)
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	619a      	str	r2, [r3, #24]
}  
 8001a46:	46c0      	nop			@ (mov r8, r8)
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	b002      	add	sp, #8
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	46c0      	nop			@ (mov r8, r8)
 8001a50:	40022000 	.word	0x40022000
 8001a54:	2000028c 	.word	0x2000028c

08001a58 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001a58:	b5b0      	push	{r4, r5, r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t address = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a66:	4b29      	ldr	r3, [pc, #164]	@ (8001b0c <HAL_FLASHEx_Erase+0xb4>)
 8001a68:	7c1b      	ldrb	r3, [r3, #16]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d101      	bne.n	8001a72 <HAL_FLASHEx_Erase+0x1a>
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e048      	b.n	8001b04 <HAL_FLASHEx_Erase+0xac>
 8001a72:	4b26      	ldr	r3, [pc, #152]	@ (8001b0c <HAL_FLASHEx_Erase+0xb4>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	741a      	strb	r2, [r3, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001a78:	250f      	movs	r5, #15
 8001a7a:	197c      	adds	r4, r7, r5
 8001a7c:	4b24      	ldr	r3, [pc, #144]	@ (8001b10 <HAL_FLASHEx_Erase+0xb8>)
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f7ff fedc 	bl	800183c <FLASH_WaitForLastOperation>
 8001a84:	0003      	movs	r3, r0
 8001a86:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001a88:	197b      	adds	r3, r7, r5
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d133      	bne.n	8001af8 <HAL_FLASHEx_Erase+0xa0>
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2201      	movs	r2, #1
 8001a94:	4252      	negs	r2, r2
 8001a96:	601a      	str	r2, [r3, #0]
    assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_PROGRAM_ADDRESS((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_SIZE - 1U));

    /* Erase page by page to be done*/
    for(address = pEraseInit->PageAddress; 
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	e022      	b.n	8001ae6 <HAL_FLASHEx_Erase+0x8e>
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
        address += FLASH_PAGE_SIZE)
    {
      FLASH_PageErase(address);
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f000 f83a 	bl	8001b1c <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001aa8:	250f      	movs	r5, #15
 8001aaa:	197c      	adds	r4, r7, r5
 8001aac:	4b18      	ldr	r3, [pc, #96]	@ (8001b10 <HAL_FLASHEx_Erase+0xb8>)
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f7ff fec4 	bl	800183c <FLASH_WaitForLastOperation>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	7023      	strb	r3, [r4, #0]

      /* If the erase operation is completed, disable the ERASE Bit */
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8001ab8:	4b16      	ldr	r3, [pc, #88]	@ (8001b14 <HAL_FLASHEx_Erase+0xbc>)
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <HAL_FLASHEx_Erase+0xbc>)
 8001abe:	2108      	movs	r1, #8
 8001ac0:	438a      	bics	r2, r1
 8001ac2:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8001ac4:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <HAL_FLASHEx_Erase+0xbc>)
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <HAL_FLASHEx_Erase+0xbc>)
 8001aca:	4913      	ldr	r1, [pc, #76]	@ (8001b18 <HAL_FLASHEx_Erase+0xc0>)
 8001acc:	400a      	ands	r2, r1
 8001ace:	605a      	str	r2, [r3, #4]

      if (status != HAL_OK) 
 8001ad0:	197b      	adds	r3, r7, r5
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_FLASHEx_Erase+0x88>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = address;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	601a      	str	r2, [r3, #0]
        break;
 8001ade:	e00b      	b.n	8001af8 <HAL_FLASHEx_Erase+0xa0>
        address += FLASH_PAGE_SIZE)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	3380      	adds	r3, #128	@ 0x80
 8001ae4:	60bb      	str	r3, [r7, #8]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	01da      	lsls	r2, r3, #7
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	18d3      	adds	r3, r2, r3
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d3d3      	bcc.n	8001aa0 <HAL_FLASHEx_Erase+0x48>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001af8:	4b04      	ldr	r3, [pc, #16]	@ (8001b0c <HAL_FLASHEx_Erase+0xb4>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	741a      	strb	r2, [r3, #16]

  return status;
 8001afe:	230f      	movs	r3, #15
 8001b00:	18fb      	adds	r3, r7, r3
 8001b02:	781b      	ldrb	r3, [r3, #0]
}
 8001b04:	0018      	movs	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b004      	add	sp, #16
 8001b0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b0c:	2000028c 	.word	0x2000028c
 8001b10:	0000c350 	.word	0x0000c350
 8001b14:	40022000 	.word	0x40022000
 8001b18:	fffffdff 	.word	0xfffffdff

08001b1c <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load 
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b24:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <FLASH_PageErase+0x3c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <FLASH_PageErase+0x40>)
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <FLASH_PageErase+0x40>)
 8001b30:	2180      	movs	r1, #128	@ 0x80
 8001b32:	0089      	lsls	r1, r1, #2
 8001b34:	430a      	orrs	r2, r1
 8001b36:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8001b38:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <FLASH_PageErase+0x40>)
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	4b07      	ldr	r3, [pc, #28]	@ (8001b5c <FLASH_PageErase+0x40>)
 8001b3e:	2108      	movs	r1, #8
 8001b40:	430a      	orrs	r2, r1
 8001b42:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	227f      	movs	r2, #127	@ 0x7f
 8001b48:	4393      	bics	r3, r2
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
}
 8001b4e:	46c0      	nop			@ (mov r8, r8)
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b002      	add	sp, #8
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	46c0      	nop			@ (mov r8, r8)
 8001b58:	2000028c 	.word	0x2000028c
 8001b5c:	40022000 	.word	0x40022000

08001b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b76:	e155      	b.n	8001e24 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	4091      	lsls	r1, r2
 8001b82:	000a      	movs	r2, r1
 8001b84:	4013      	ands	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d100      	bne.n	8001b90 <HAL_GPIO_Init+0x30>
 8001b8e:	e146      	b.n	8001e1e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2203      	movs	r2, #3
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d005      	beq.n	8001ba8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d130      	bne.n	8001c0a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	0013      	movs	r3, r2
 8001bb8:	43da      	mvns	r2, r3
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	0013      	movs	r3, r2
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bde:	2201      	movs	r2, #1
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	409a      	lsls	r2, r3
 8001be4:	0013      	movs	r3, r2
 8001be6:	43da      	mvns	r2, r3
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	091b      	lsrs	r3, r3, #4
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	409a      	lsls	r2, r3
 8001bfc:	0013      	movs	r3, r2
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2203      	movs	r2, #3
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d017      	beq.n	8001c46 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	2203      	movs	r2, #3
 8001c22:	409a      	lsls	r2, r3
 8001c24:	0013      	movs	r3, r2
 8001c26:	43da      	mvns	r2, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	409a      	lsls	r2, r3
 8001c38:	0013      	movs	r3, r2
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d123      	bne.n	8001c9a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	08da      	lsrs	r2, r3, #3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3208      	adds	r2, #8
 8001c5a:	0092      	lsls	r2, r2, #2
 8001c5c:	58d3      	ldr	r3, [r2, r3]
 8001c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2207      	movs	r2, #7
 8001c64:	4013      	ands	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	220f      	movs	r2, #15
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	0013      	movs	r3, r2
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4013      	ands	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	691a      	ldr	r2, [r3, #16]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2107      	movs	r1, #7
 8001c7e:	400b      	ands	r3, r1
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	409a      	lsls	r2, r3
 8001c84:	0013      	movs	r3, r2
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	08da      	lsrs	r2, r3, #3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3208      	adds	r2, #8
 8001c94:	0092      	lsls	r2, r2, #2
 8001c96:	6939      	ldr	r1, [r7, #16]
 8001c98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	0013      	movs	r3, r2
 8001caa:	43da      	mvns	r2, r3
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	401a      	ands	r2, r3
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	0013      	movs	r3, r2
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	23c0      	movs	r3, #192	@ 0xc0
 8001cd4:	029b      	lsls	r3, r3, #10
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d100      	bne.n	8001cdc <HAL_GPIO_Init+0x17c>
 8001cda:	e0a0      	b.n	8001e1e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cdc:	4b57      	ldr	r3, [pc, #348]	@ (8001e3c <HAL_GPIO_Init+0x2dc>)
 8001cde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ce0:	4b56      	ldr	r3, [pc, #344]	@ (8001e3c <HAL_GPIO_Init+0x2dc>)
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ce8:	4a55      	ldr	r2, [pc, #340]	@ (8001e40 <HAL_GPIO_Init+0x2e0>)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	589b      	ldr	r3, [r3, r2]
 8001cf4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	220f      	movs	r2, #15
 8001d00:	409a      	lsls	r2, r3
 8001d02:	0013      	movs	r3, r2
 8001d04:	43da      	mvns	r2, r3
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	23a0      	movs	r3, #160	@ 0xa0
 8001d10:	05db      	lsls	r3, r3, #23
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d01f      	beq.n	8001d56 <HAL_GPIO_Init+0x1f6>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a4a      	ldr	r2, [pc, #296]	@ (8001e44 <HAL_GPIO_Init+0x2e4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d019      	beq.n	8001d52 <HAL_GPIO_Init+0x1f2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a49      	ldr	r2, [pc, #292]	@ (8001e48 <HAL_GPIO_Init+0x2e8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_GPIO_Init+0x1ee>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a48      	ldr	r2, [pc, #288]	@ (8001e4c <HAL_GPIO_Init+0x2ec>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00d      	beq.n	8001d4a <HAL_GPIO_Init+0x1ea>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a47      	ldr	r2, [pc, #284]	@ (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d007      	beq.n	8001d46 <HAL_GPIO_Init+0x1e6>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a46      	ldr	r2, [pc, #280]	@ (8001e54 <HAL_GPIO_Init+0x2f4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d101      	bne.n	8001d42 <HAL_GPIO_Init+0x1e2>
 8001d3e:	2305      	movs	r3, #5
 8001d40:	e00a      	b.n	8001d58 <HAL_GPIO_Init+0x1f8>
 8001d42:	2306      	movs	r3, #6
 8001d44:	e008      	b.n	8001d58 <HAL_GPIO_Init+0x1f8>
 8001d46:	2304      	movs	r3, #4
 8001d48:	e006      	b.n	8001d58 <HAL_GPIO_Init+0x1f8>
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e004      	b.n	8001d58 <HAL_GPIO_Init+0x1f8>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e002      	b.n	8001d58 <HAL_GPIO_Init+0x1f8>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <HAL_GPIO_Init+0x1f8>
 8001d56:	2300      	movs	r3, #0
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	2103      	movs	r1, #3
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	0092      	lsls	r2, r2, #2
 8001d60:	4093      	lsls	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d68:	4935      	ldr	r1, [pc, #212]	@ (8001e40 <HAL_GPIO_Init+0x2e0>)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	089b      	lsrs	r3, r3, #2
 8001d6e:	3302      	adds	r3, #2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d76:	4b38      	ldr	r3, [pc, #224]	@ (8001e58 <HAL_GPIO_Init+0x2f8>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	2380      	movs	r3, #128	@ 0x80
 8001d8c:	035b      	lsls	r3, r3, #13
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8001e58 <HAL_GPIO_Init+0x2f8>)
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001da0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e58 <HAL_GPIO_Init+0x2f8>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	43da      	mvns	r2, r3
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	2380      	movs	r3, #128	@ 0x80
 8001db6:	039b      	lsls	r3, r3, #14
 8001db8:	4013      	ands	r3, r2
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dc4:	4b24      	ldr	r3, [pc, #144]	@ (8001e58 <HAL_GPIO_Init+0x2f8>)
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001dca:	4b23      	ldr	r3, [pc, #140]	@ (8001e58 <HAL_GPIO_Init+0x2f8>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	2380      	movs	r3, #128	@ 0x80
 8001de0:	029b      	lsls	r3, r3, #10
 8001de2:	4013      	ands	r3, r2
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	@ (8001e58 <HAL_GPIO_Init+0x2f8>)
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df4:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <HAL_GPIO_Init+0x2f8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	43da      	mvns	r2, r3
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	2380      	movs	r3, #128	@ 0x80
 8001e0a:	025b      	lsls	r3, r3, #9
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e18:	4b0f      	ldr	r3, [pc, #60]	@ (8001e58 <HAL_GPIO_Init+0x2f8>)
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	40da      	lsrs	r2, r3
 8001e2c:	1e13      	subs	r3, r2, #0
 8001e2e:	d000      	beq.n	8001e32 <HAL_GPIO_Init+0x2d2>
 8001e30:	e6a2      	b.n	8001b78 <HAL_GPIO_Init+0x18>
  }
}
 8001e32:	46c0      	nop			@ (mov r8, r8)
 8001e34:	46c0      	nop			@ (mov r8, r8)
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b006      	add	sp, #24
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40010000 	.word	0x40010000
 8001e44:	50000400 	.word	0x50000400
 8001e48:	50000800 	.word	0x50000800
 8001e4c:	50000c00 	.word	0x50000c00
 8001e50:	50001000 	.word	0x50001000
 8001e54:	50001c00 	.word	0x50001c00
 8001e58:	40010400 	.word	0x40010400

08001e5c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	000a      	movs	r2, r1
 8001e66:	1cbb      	adds	r3, r7, #2
 8001e68:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	1cba      	adds	r2, r7, #2
 8001e70:	8812      	ldrh	r2, [r2, #0]
 8001e72:	4013      	ands	r3, r2
 8001e74:	d004      	beq.n	8001e80 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001e76:	230f      	movs	r3, #15
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
 8001e7e:	e003      	b.n	8001e88 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e80:	230f      	movs	r3, #15
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001e88:	230f      	movs	r3, #15
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	781b      	ldrb	r3, [r3, #0]
}
 8001e8e:	0018      	movs	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b004      	add	sp, #16
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	0008      	movs	r0, r1
 8001ea0:	0011      	movs	r1, r2
 8001ea2:	1cbb      	adds	r3, r7, #2
 8001ea4:	1c02      	adds	r2, r0, #0
 8001ea6:	801a      	strh	r2, [r3, #0]
 8001ea8:	1c7b      	adds	r3, r7, #1
 8001eaa:	1c0a      	adds	r2, r1, #0
 8001eac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eae:	1c7b      	adds	r3, r7, #1
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d004      	beq.n	8001ec0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eb6:	1cbb      	adds	r3, r7, #2
 8001eb8:	881a      	ldrh	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001ebe:	e003      	b.n	8001ec8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001ec0:	1cbb      	adds	r3, r7, #2
 8001ec2:	881a      	ldrh	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ec8:	46c0      	nop			@ (mov r8, r8)
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b002      	add	sp, #8
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_RCC_DeInit>:
  *            - LSI, LSE and RTC clocks
  *            - HSI48 clock
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001ed0:	b5b0      	push	{r4, r5, r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
  uint32_t tickstart;
  uint32_t vl_mask;
  HAL_StatusTypeDef status;

  /* Set MSIClockRange, HSITRIM and MSITRIM bits to the reset values */
  MODIFY_REG(RCC->ICSCR, (RCC_ICSCR_MSITRIM | RCC_ICSCR_HSITRIM | RCC_ICSCR_MSIRANGE), \
 8001ed6:	4b4a      	ldr	r3, [pc, #296]	@ (8002000 <HAL_RCC_DeInit+0x130>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4a4a      	ldr	r2, [pc, #296]	@ (8002004 <HAL_RCC_DeInit+0x134>)
 8001edc:	401a      	ands	r2, r3
 8001ede:	4b48      	ldr	r3, [pc, #288]	@ (8002000 <HAL_RCC_DeInit+0x130>)
 8001ee0:	21b0      	movs	r1, #176	@ 0xb0
 8001ee2:	0209      	lsls	r1, r1, #8
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	605a      	str	r2, [r3, #4]
            ((RCC_MSICALIBRATION_DEFAULT << RCC_ICSCR_MSITRIM_Pos) | (RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos) | RCC_ICSCR_MSIRANGE_5));

  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001ee8:	4b45      	ldr	r3, [pc, #276]	@ (8002000 <HAL_RCC_DeInit+0x130>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b44      	ldr	r3, [pc, #272]	@ (8002000 <HAL_RCC_DeInit+0x130>)
 8001eee:	2180      	movs	r1, #128	@ 0x80
 8001ef0:	0049      	lsls	r1, r1, #1
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001ef6:	f7ff fa43 	bl	8001380 <HAL_GetTick>
 8001efa:	0003      	movs	r3, r0
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Wait till MSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_DeInit+0x42>
  {
    if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f00:	f7ff fa3e 	bl	8001380 <HAL_GetTick>
 8001f04:	0002      	movs	r2, r0
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_DeInit+0x42>
    {
      return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e071      	b.n	8001ff6 <HAL_RCC_DeInit+0x126>
  while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f12:	4b3b      	ldr	r3, [pc, #236]	@ (8002000 <HAL_RCC_DeInit+0x130>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	2380      	movs	r3, #128	@ 0x80
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_DeInit+0x30>
    }
  }

  /* Switch SYSCLK to MSI*/
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001f1e:	4b38      	ldr	r3, [pc, #224]	@ (8002000 <HAL_RCC_DeInit+0x130>)
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	4b37      	ldr	r3, [pc, #220]	@ (8002000 <HAL_RCC_DeInit+0x130>)
 8001f24:	2103      	movs	r1, #3
 8001f26:	438a      	bics	r2, r1
 8001f28:	60da      	str	r2, [r3, #12]

  /* Wait till MSI as SYSCLK status is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8001f2a:	e009      	b.n	8001f40 <HAL_RCC_DeInit+0x70>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2c:	f7ff fa28 	bl	8001380 <HAL_GetTick>
 8001f30:	0002      	movs	r2, r0
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	4a34      	ldr	r2, [pc, #208]	@ (8002008 <HAL_RCC_DeInit+0x138>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_DeInit+0x70>
    {
      return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e05a      	b.n	8001ff6 <HAL_RCC_DeInit+0x126>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8001f40:	4b2f      	ldr	r3, [pc, #188]	@ (8002000 <HAL_RCC_DeInit+0x130>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	220c      	movs	r2, #12
 8001f46:	4013      	ands	r3, r2
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_DeInit+0x5c>
    }
  }

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 8001f4a:	4b30      	ldr	r3, [pc, #192]	@ (800200c <HAL_RCC_DeInit+0x13c>)
 8001f4c:	4a30      	ldr	r2, [pc, #192]	@ (8002010 <HAL_RCC_DeInit+0x140>)
 8001f4e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  status = HAL_InitTick(uwTickPrio);
 8001f50:	4b30      	ldr	r3, [pc, #192]	@ (8002014 <HAL_RCC_DeInit+0x144>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	250b      	movs	r5, #11
 8001f56:	197c      	adds	r4, r7, r5
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f7ff f9cb 	bl	80012f4 <HAL_InitTick>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001f62:	197b      	adds	r3, r7, r5
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d002      	beq.n	8001f70 <HAL_RCC_DeInit+0xa0>
  {
    return status;
 8001f6a:	197b      	adds	r3, r7, r5
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	e042      	b.n	8001ff6 <HAL_RCC_DeInit+0x126>
  }

  /* Reset HSE, HSI, CSS, PLL */
#if defined(RCC_CR_CSSHSEON) && defined(RCC_CR_HSIOUTEN)
  CLEAR_BIT(RCC->CR, RCC_CR_HSION| RCC_CR_HSIKERON| RCC_CR_HSIDIVEN | RCC_CR_HSIOUTEN | \
 8001f70:	4b23      	ldr	r3, [pc, #140]	@ (8002000 <HAL_RCC_DeInit+0x130>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b22      	ldr	r3, [pc, #136]	@ (8002000 <HAL_RCC_DeInit+0x130>)
 8001f76:	4928      	ldr	r1, [pc, #160]	@ (8002018 <HAL_RCC_DeInit+0x148>)
 8001f78:	400a      	ands	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSION| RCC_CR_HSIKERON| RCC_CR_HSIDIVEN | \
                     RCC_CR_HSEON | RCC_CR_CSSHSEON | RCC_CR_PLLON);
#endif

  /* Delay after an RCC peripheral clock */ \
  tmpreg = READ_BIT(RCC->CR, RCC_CR_HSEON);      \
 8001f7c:	4b20      	ldr	r3, [pc, #128]	@ (8002000 <HAL_RCC_DeInit+0x130>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2380      	movs	r3, #128	@ 0x80
 8001f82:	025b      	lsls	r3, r3, #9
 8001f84:	4013      	ands	r3, r2
 8001f86:	603b      	str	r3, [r7, #0]
  UNUSED(tmpreg);
 8001f88:	683b      	ldr	r3, [r7, #0]

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002000 <HAL_RCC_DeInit+0x130>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002000 <HAL_RCC_DeInit+0x130>)
 8001f90:	4922      	ldr	r1, [pc, #136]	@ (800201c <HAL_RCC_DeInit+0x14c>)
 8001f92:	400a      	ands	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001f96:	f7ff f9f3 	bl	8001380 <HAL_GetTick>
 8001f9a:	0003      	movs	r3, r0
 8001f9c:	60fb      	str	r3, [r7, #12]

  /* Wait till PLL is not ready */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_DeInit+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa0:	f7ff f9ee 	bl	8001380 <HAL_GetTick>
 8001fa4:	0002      	movs	r2, r0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_DeInit+0xe2>
    {
      return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e021      	b.n	8001ff6 <HAL_RCC_DeInit+0x126>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb2:	4b13      	ldr	r3, [pc, #76]	@ (8002000 <HAL_RCC_DeInit+0x130>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	2380      	movs	r3, #128	@ 0x80
 8001fb8:	049b      	lsls	r3, r3, #18
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_DeInit+0xd0>
    }
  }

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001fbe:	4b10      	ldr	r3, [pc, #64]	@ (8002000 <HAL_RCC_DeInit+0x130>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <HAL_RCC_DeInit+0x130>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	611a      	str	r2, [r3, #16]

  /* Clear all flags */
  vl_mask = RCC_CICR_LSIRDYC | RCC_CICR_LSERDYC | RCC_CICR_HSIRDYC | RCC_CICR_HSERDYC | RCC_CICR_PLLRDYC | RCC_CICR_MSIRDYC | RCC_CICR_CSSLSEC;
 8001fca:	23bf      	movs	r3, #191	@ 0xbf
 8001fcc:	607b      	str	r3, [r7, #4]
#if defined(RCC_HSI48_SUPPORT)
  vl_mask |= RCC_CICR_HSI48RDYC;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2240      	movs	r2, #64	@ 0x40
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	607b      	str	r3, [r7, #4]
#endif
#if defined(RCC_HSECSS_SUPPORT)
  vl_mask |= RCC_CICR_CSSHSEC;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2280      	movs	r2, #128	@ 0x80
 8001fda:	0052      	lsls	r2, r2, #1
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	607b      	str	r3, [r7, #4]
#endif
  WRITE_REG(RCC->CICR, vl_mask);
 8001fe0:	4b07      	ldr	r3, [pc, #28]	@ (8002000 <HAL_RCC_DeInit+0x130>)
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	619a      	str	r2, [r3, #24]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_RCC_DeInit+0x130>)
 8001fe8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fea:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <HAL_RCC_DeInit+0x130>)
 8001fec:	2180      	movs	r1, #128	@ 0x80
 8001fee:	0409      	lsls	r1, r1, #16
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	651a      	str	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	b004      	add	sp, #16
 8001ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8001ffe:	46c0      	nop			@ (mov r8, r8)
 8002000:	40021000 	.word	0x40021000
 8002004:	00ff00ff 	.word	0x00ff00ff
 8002008:	00001388 	.word	0x00001388
 800200c:	20000000 	.word	0x20000000
 8002010:	001fff68 	.word	0x001fff68
 8002014:	20000004 	.word	0x20000004
 8002018:	fef6ffd4 	.word	0xfef6ffd4
 800201c:	fffbffff 	.word	0xfffbffff

08002020 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002020:	b5b0      	push	{r4, r5, r7, lr}
 8002022:	b08a      	sub	sp, #40	@ 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d102      	bne.n	8002034 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	f000 fbbf 	bl	80027b2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002034:	4bc9      	ldr	r3, [pc, #804]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	220c      	movs	r2, #12
 800203a:	4013      	ands	r3, r2
 800203c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800203e:	4bc7      	ldr	r3, [pc, #796]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	2380      	movs	r3, #128	@ 0x80
 8002044:	025b      	lsls	r3, r3, #9
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2201      	movs	r2, #1
 8002050:	4013      	ands	r3, r2
 8002052:	d100      	bne.n	8002056 <HAL_RCC_OscConfig+0x36>
 8002054:	e07e      	b.n	8002154 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	2b08      	cmp	r3, #8
 800205a:	d007      	beq.n	800206c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	2b0c      	cmp	r3, #12
 8002060:	d112      	bne.n	8002088 <HAL_RCC_OscConfig+0x68>
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	2380      	movs	r3, #128	@ 0x80
 8002066:	025b      	lsls	r3, r3, #9
 8002068:	429a      	cmp	r2, r3
 800206a:	d10d      	bne.n	8002088 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	4bbb      	ldr	r3, [pc, #748]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	2380      	movs	r3, #128	@ 0x80
 8002072:	029b      	lsls	r3, r3, #10
 8002074:	4013      	ands	r3, r2
 8002076:	d100      	bne.n	800207a <HAL_RCC_OscConfig+0x5a>
 8002078:	e06b      	b.n	8002152 <HAL_RCC_OscConfig+0x132>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d167      	bne.n	8002152 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	f000 fb95 	bl	80027b2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	2380      	movs	r3, #128	@ 0x80
 800208e:	025b      	lsls	r3, r3, #9
 8002090:	429a      	cmp	r2, r3
 8002092:	d107      	bne.n	80020a4 <HAL_RCC_OscConfig+0x84>
 8002094:	4bb1      	ldr	r3, [pc, #708]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4bb0      	ldr	r3, [pc, #704]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 800209a:	2180      	movs	r1, #128	@ 0x80
 800209c:	0249      	lsls	r1, r1, #9
 800209e:	430a      	orrs	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	e027      	b.n	80020f4 <HAL_RCC_OscConfig+0xd4>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	23a0      	movs	r3, #160	@ 0xa0
 80020aa:	02db      	lsls	r3, r3, #11
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d10e      	bne.n	80020ce <HAL_RCC_OscConfig+0xae>
 80020b0:	4baa      	ldr	r3, [pc, #680]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4ba9      	ldr	r3, [pc, #676]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 80020b6:	2180      	movs	r1, #128	@ 0x80
 80020b8:	02c9      	lsls	r1, r1, #11
 80020ba:	430a      	orrs	r2, r1
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	4ba7      	ldr	r3, [pc, #668]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	4ba6      	ldr	r3, [pc, #664]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 80020c4:	2180      	movs	r1, #128	@ 0x80
 80020c6:	0249      	lsls	r1, r1, #9
 80020c8:	430a      	orrs	r2, r1
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	e012      	b.n	80020f4 <HAL_RCC_OscConfig+0xd4>
 80020ce:	4ba3      	ldr	r3, [pc, #652]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4ba2      	ldr	r3, [pc, #648]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 80020d4:	49a2      	ldr	r1, [pc, #648]	@ (8002360 <HAL_RCC_OscConfig+0x340>)
 80020d6:	400a      	ands	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	4ba0      	ldr	r3, [pc, #640]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	2380      	movs	r3, #128	@ 0x80
 80020e0:	025b      	lsls	r3, r3, #9
 80020e2:	4013      	ands	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4b9c      	ldr	r3, [pc, #624]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b9b      	ldr	r3, [pc, #620]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 80020ee:	499d      	ldr	r1, [pc, #628]	@ (8002364 <HAL_RCC_OscConfig+0x344>)
 80020f0:	400a      	ands	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d015      	beq.n	8002128 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7ff f940 	bl	8001380 <HAL_GetTick>
 8002100:	0003      	movs	r3, r0
 8002102:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002104:	e009      	b.n	800211a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002106:	f7ff f93b 	bl	8001380 <HAL_GetTick>
 800210a:	0002      	movs	r2, r0
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b64      	cmp	r3, #100	@ 0x64
 8002112:	d902      	bls.n	800211a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	f000 fb4c 	bl	80027b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800211a:	4b90      	ldr	r3, [pc, #576]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	2380      	movs	r3, #128	@ 0x80
 8002120:	029b      	lsls	r3, r3, #10
 8002122:	4013      	ands	r3, r2
 8002124:	d0ef      	beq.n	8002106 <HAL_RCC_OscConfig+0xe6>
 8002126:	e015      	b.n	8002154 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7ff f92a 	bl	8001380 <HAL_GetTick>
 800212c:	0003      	movs	r3, r0
 800212e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002132:	f7ff f925 	bl	8001380 <HAL_GetTick>
 8002136:	0002      	movs	r2, r0
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b64      	cmp	r3, #100	@ 0x64
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e336      	b.n	80027b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002144:	4b85      	ldr	r3, [pc, #532]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	2380      	movs	r3, #128	@ 0x80
 800214a:	029b      	lsls	r3, r3, #10
 800214c:	4013      	ands	r3, r2
 800214e:	d1f0      	bne.n	8002132 <HAL_RCC_OscConfig+0x112>
 8002150:	e000      	b.n	8002154 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002152:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2202      	movs	r2, #2
 800215a:	4013      	ands	r3, r2
 800215c:	d100      	bne.n	8002160 <HAL_RCC_OscConfig+0x140>
 800215e:	e099      	b.n	8002294 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002168:	2220      	movs	r2, #32
 800216a:	4013      	ands	r3, r2
 800216c:	d009      	beq.n	8002182 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800216e:	4b7b      	ldr	r3, [pc, #492]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	4b7a      	ldr	r3, [pc, #488]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 8002174:	2120      	movs	r1, #32
 8002176:	430a      	orrs	r2, r1
 8002178:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	2220      	movs	r2, #32
 800217e:	4393      	bics	r3, r2
 8002180:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	2b04      	cmp	r3, #4
 8002186:	d005      	beq.n	8002194 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	2b0c      	cmp	r3, #12
 800218c:	d13e      	bne.n	800220c <HAL_RCC_OscConfig+0x1ec>
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d13b      	bne.n	800220c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002194:	4b71      	ldr	r3, [pc, #452]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2204      	movs	r2, #4
 800219a:	4013      	ands	r3, r2
 800219c:	d004      	beq.n	80021a8 <HAL_RCC_OscConfig+0x188>
 800219e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e304      	b.n	80027b2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a8:	4b6c      	ldr	r3, [pc, #432]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	4a6e      	ldr	r2, [pc, #440]	@ (8002368 <HAL_RCC_OscConfig+0x348>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	0019      	movs	r1, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	021a      	lsls	r2, r3, #8
 80021b8:	4b68      	ldr	r3, [pc, #416]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 80021ba:	430a      	orrs	r2, r1
 80021bc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80021be:	4b67      	ldr	r3, [pc, #412]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2209      	movs	r2, #9
 80021c4:	4393      	bics	r3, r2
 80021c6:	0019      	movs	r1, r3
 80021c8:	4b64      	ldr	r3, [pc, #400]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 80021ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021cc:	430a      	orrs	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021d0:	f000 fc42 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 80021d4:	0001      	movs	r1, r0
 80021d6:	4b61      	ldr	r3, [pc, #388]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	091b      	lsrs	r3, r3, #4
 80021dc:	220f      	movs	r2, #15
 80021de:	4013      	ands	r3, r2
 80021e0:	4a62      	ldr	r2, [pc, #392]	@ (800236c <HAL_RCC_OscConfig+0x34c>)
 80021e2:	5cd3      	ldrb	r3, [r2, r3]
 80021e4:	000a      	movs	r2, r1
 80021e6:	40da      	lsrs	r2, r3
 80021e8:	4b61      	ldr	r3, [pc, #388]	@ (8002370 <HAL_RCC_OscConfig+0x350>)
 80021ea:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80021ec:	4b61      	ldr	r3, [pc, #388]	@ (8002374 <HAL_RCC_OscConfig+0x354>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2513      	movs	r5, #19
 80021f2:	197c      	adds	r4, r7, r5
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7ff f87d 	bl	80012f4 <HAL_InitTick>
 80021fa:	0003      	movs	r3, r0
 80021fc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80021fe:	197b      	adds	r3, r7, r5
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d046      	beq.n	8002294 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002206:	197b      	adds	r3, r7, r5
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	e2d2      	b.n	80027b2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220e:	2b00      	cmp	r3, #0
 8002210:	d027      	beq.n	8002262 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002212:	4b52      	ldr	r3, [pc, #328]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2209      	movs	r2, #9
 8002218:	4393      	bics	r3, r2
 800221a:	0019      	movs	r1, r3
 800221c:	4b4f      	ldr	r3, [pc, #316]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 800221e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002220:	430a      	orrs	r2, r1
 8002222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7ff f8ac 	bl	8001380 <HAL_GetTick>
 8002228:	0003      	movs	r3, r0
 800222a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800222e:	f7ff f8a7 	bl	8001380 <HAL_GetTick>
 8002232:	0002      	movs	r2, r0
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e2b8      	b.n	80027b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002240:	4b46      	ldr	r3, [pc, #280]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2204      	movs	r2, #4
 8002246:	4013      	ands	r3, r2
 8002248:	d0f1      	beq.n	800222e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224a:	4b44      	ldr	r3, [pc, #272]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	4a46      	ldr	r2, [pc, #280]	@ (8002368 <HAL_RCC_OscConfig+0x348>)
 8002250:	4013      	ands	r3, r2
 8002252:	0019      	movs	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	021a      	lsls	r2, r3, #8
 800225a:	4b40      	ldr	r3, [pc, #256]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 800225c:	430a      	orrs	r2, r1
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	e018      	b.n	8002294 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002262:	4b3e      	ldr	r3, [pc, #248]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	4b3d      	ldr	r3, [pc, #244]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 8002268:	2101      	movs	r1, #1
 800226a:	438a      	bics	r2, r1
 800226c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226e:	f7ff f887 	bl	8001380 <HAL_GetTick>
 8002272:	0003      	movs	r3, r0
 8002274:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002278:	f7ff f882 	bl	8001380 <HAL_GetTick>
 800227c:	0002      	movs	r2, r0
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e293      	b.n	80027b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800228a:	4b34      	ldr	r3, [pc, #208]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2204      	movs	r2, #4
 8002290:	4013      	ands	r3, r2
 8002292:	d1f1      	bne.n	8002278 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2210      	movs	r2, #16
 800229a:	4013      	ands	r3, r2
 800229c:	d100      	bne.n	80022a0 <HAL_RCC_OscConfig+0x280>
 800229e:	e0a2      	b.n	80023e6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d140      	bne.n	8002328 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022a6:	4b2d      	ldr	r3, [pc, #180]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	2380      	movs	r3, #128	@ 0x80
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4013      	ands	r3, r2
 80022b0:	d005      	beq.n	80022be <HAL_RCC_OscConfig+0x29e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e279      	b.n	80027b2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022be:	4b27      	ldr	r3, [pc, #156]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002378 <HAL_RCC_OscConfig+0x358>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	0019      	movs	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022cc:	4b23      	ldr	r3, [pc, #140]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 80022ce:	430a      	orrs	r2, r1
 80022d0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022d2:	4b22      	ldr	r3, [pc, #136]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	0a19      	lsrs	r1, r3, #8
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	061a      	lsls	r2, r3, #24
 80022e0:	4b1e      	ldr	r3, [pc, #120]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 80022e2:	430a      	orrs	r2, r1
 80022e4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ea:	0b5b      	lsrs	r3, r3, #13
 80022ec:	3301      	adds	r3, #1
 80022ee:	2280      	movs	r2, #128	@ 0x80
 80022f0:	0212      	lsls	r2, r2, #8
 80022f2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80022f4:	4b19      	ldr	r3, [pc, #100]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	210f      	movs	r1, #15
 80022fc:	400b      	ands	r3, r1
 80022fe:	491b      	ldr	r1, [pc, #108]	@ (800236c <HAL_RCC_OscConfig+0x34c>)
 8002300:	5ccb      	ldrb	r3, [r1, r3]
 8002302:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002304:	4b1a      	ldr	r3, [pc, #104]	@ (8002370 <HAL_RCC_OscConfig+0x350>)
 8002306:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002308:	4b1a      	ldr	r3, [pc, #104]	@ (8002374 <HAL_RCC_OscConfig+0x354>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2513      	movs	r5, #19
 800230e:	197c      	adds	r4, r7, r5
 8002310:	0018      	movs	r0, r3
 8002312:	f7fe ffef 	bl	80012f4 <HAL_InitTick>
 8002316:	0003      	movs	r3, r0
 8002318:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800231a:	197b      	adds	r3, r7, r5
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d061      	beq.n	80023e6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002322:	197b      	adds	r3, r7, r5
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	e244      	b.n	80027b2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d040      	beq.n	80023b2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002330:	4b0a      	ldr	r3, [pc, #40]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b09      	ldr	r3, [pc, #36]	@ (800235c <HAL_RCC_OscConfig+0x33c>)
 8002336:	2180      	movs	r1, #128	@ 0x80
 8002338:	0049      	lsls	r1, r1, #1
 800233a:	430a      	orrs	r2, r1
 800233c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7ff f81f 	bl	8001380 <HAL_GetTick>
 8002342:	0003      	movs	r3, r0
 8002344:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002346:	e019      	b.n	800237c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002348:	f7ff f81a 	bl	8001380 <HAL_GetTick>
 800234c:	0002      	movs	r2, r0
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d912      	bls.n	800237c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e22b      	b.n	80027b2 <HAL_RCC_OscConfig+0x792>
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	40021000 	.word	0x40021000
 8002360:	fffeffff 	.word	0xfffeffff
 8002364:	fffbffff 	.word	0xfffbffff
 8002368:	ffffe0ff 	.word	0xffffe0ff
 800236c:	08005484 	.word	0x08005484
 8002370:	20000000 	.word	0x20000000
 8002374:	20000004 	.word	0x20000004
 8002378:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800237c:	4bca      	ldr	r3, [pc, #808]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	2380      	movs	r3, #128	@ 0x80
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4013      	ands	r3, r2
 8002386:	d0df      	beq.n	8002348 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002388:	4bc7      	ldr	r3, [pc, #796]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4ac7      	ldr	r2, [pc, #796]	@ (80026ac <HAL_RCC_OscConfig+0x68c>)
 800238e:	4013      	ands	r3, r2
 8002390:	0019      	movs	r1, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002396:	4bc4      	ldr	r3, [pc, #784]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 8002398:	430a      	orrs	r2, r1
 800239a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800239c:	4bc2      	ldr	r3, [pc, #776]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	021b      	lsls	r3, r3, #8
 80023a2:	0a19      	lsrs	r1, r3, #8
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	061a      	lsls	r2, r3, #24
 80023aa:	4bbf      	ldr	r3, [pc, #764]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 80023ac:	430a      	orrs	r2, r1
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	e019      	b.n	80023e6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023b2:	4bbd      	ldr	r3, [pc, #756]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	4bbc      	ldr	r3, [pc, #752]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 80023b8:	49bd      	ldr	r1, [pc, #756]	@ (80026b0 <HAL_RCC_OscConfig+0x690>)
 80023ba:	400a      	ands	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7fe ffdf 	bl	8001380 <HAL_GetTick>
 80023c2:	0003      	movs	r3, r0
 80023c4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023c8:	f7fe ffda 	bl	8001380 <HAL_GetTick>
 80023cc:	0002      	movs	r2, r0
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e1eb      	b.n	80027b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80023da:	4bb3      	ldr	r3, [pc, #716]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	2380      	movs	r3, #128	@ 0x80
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4013      	ands	r3, r2
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2208      	movs	r2, #8
 80023ec:	4013      	ands	r3, r2
 80023ee:	d036      	beq.n	800245e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d019      	beq.n	800242c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f8:	4bab      	ldr	r3, [pc, #684]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 80023fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023fc:	4baa      	ldr	r3, [pc, #680]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 80023fe:	2101      	movs	r1, #1
 8002400:	430a      	orrs	r2, r1
 8002402:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002404:	f7fe ffbc 	bl	8001380 <HAL_GetTick>
 8002408:	0003      	movs	r3, r0
 800240a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800240e:	f7fe ffb7 	bl	8001380 <HAL_GetTick>
 8002412:	0002      	movs	r2, r0
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e1c8      	b.n	80027b2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002420:	4ba1      	ldr	r3, [pc, #644]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 8002422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002424:	2202      	movs	r2, #2
 8002426:	4013      	ands	r3, r2
 8002428:	d0f1      	beq.n	800240e <HAL_RCC_OscConfig+0x3ee>
 800242a:	e018      	b.n	800245e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800242c:	4b9e      	ldr	r3, [pc, #632]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 800242e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002430:	4b9d      	ldr	r3, [pc, #628]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 8002432:	2101      	movs	r1, #1
 8002434:	438a      	bics	r2, r1
 8002436:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002438:	f7fe ffa2 	bl	8001380 <HAL_GetTick>
 800243c:	0003      	movs	r3, r0
 800243e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002442:	f7fe ff9d 	bl	8001380 <HAL_GetTick>
 8002446:	0002      	movs	r2, r0
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e1ae      	b.n	80027b2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002454:	4b94      	ldr	r3, [pc, #592]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 8002456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002458:	2202      	movs	r2, #2
 800245a:	4013      	ands	r3, r2
 800245c:	d1f1      	bne.n	8002442 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2204      	movs	r2, #4
 8002464:	4013      	ands	r3, r2
 8002466:	d100      	bne.n	800246a <HAL_RCC_OscConfig+0x44a>
 8002468:	e0ae      	b.n	80025c8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246a:	2023      	movs	r0, #35	@ 0x23
 800246c:	183b      	adds	r3, r7, r0
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002472:	4b8d      	ldr	r3, [pc, #564]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 8002474:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002476:	2380      	movs	r3, #128	@ 0x80
 8002478:	055b      	lsls	r3, r3, #21
 800247a:	4013      	ands	r3, r2
 800247c:	d109      	bne.n	8002492 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247e:	4b8a      	ldr	r3, [pc, #552]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 8002480:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002482:	4b89      	ldr	r3, [pc, #548]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 8002484:	2180      	movs	r1, #128	@ 0x80
 8002486:	0549      	lsls	r1, r1, #21
 8002488:	430a      	orrs	r2, r1
 800248a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800248c:	183b      	adds	r3, r7, r0
 800248e:	2201      	movs	r2, #1
 8002490:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002492:	4b88      	ldr	r3, [pc, #544]	@ (80026b4 <HAL_RCC_OscConfig+0x694>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	2380      	movs	r3, #128	@ 0x80
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4013      	ands	r3, r2
 800249c:	d11a      	bne.n	80024d4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800249e:	4b85      	ldr	r3, [pc, #532]	@ (80026b4 <HAL_RCC_OscConfig+0x694>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	4b84      	ldr	r3, [pc, #528]	@ (80026b4 <HAL_RCC_OscConfig+0x694>)
 80024a4:	2180      	movs	r1, #128	@ 0x80
 80024a6:	0049      	lsls	r1, r1, #1
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ac:	f7fe ff68 	bl	8001380 <HAL_GetTick>
 80024b0:	0003      	movs	r3, r0
 80024b2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b6:	f7fe ff63 	bl	8001380 <HAL_GetTick>
 80024ba:	0002      	movs	r2, r0
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b64      	cmp	r3, #100	@ 0x64
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e174      	b.n	80027b2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c8:	4b7a      	ldr	r3, [pc, #488]	@ (80026b4 <HAL_RCC_OscConfig+0x694>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	2380      	movs	r3, #128	@ 0x80
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4013      	ands	r3, r2
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	2380      	movs	r3, #128	@ 0x80
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	429a      	cmp	r2, r3
 80024de:	d107      	bne.n	80024f0 <HAL_RCC_OscConfig+0x4d0>
 80024e0:	4b71      	ldr	r3, [pc, #452]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 80024e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024e4:	4b70      	ldr	r3, [pc, #448]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 80024e6:	2180      	movs	r1, #128	@ 0x80
 80024e8:	0049      	lsls	r1, r1, #1
 80024ea:	430a      	orrs	r2, r1
 80024ec:	651a      	str	r2, [r3, #80]	@ 0x50
 80024ee:	e031      	b.n	8002554 <HAL_RCC_OscConfig+0x534>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10c      	bne.n	8002512 <HAL_RCC_OscConfig+0x4f2>
 80024f8:	4b6b      	ldr	r3, [pc, #428]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 80024fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024fc:	4b6a      	ldr	r3, [pc, #424]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 80024fe:	496c      	ldr	r1, [pc, #432]	@ (80026b0 <HAL_RCC_OscConfig+0x690>)
 8002500:	400a      	ands	r2, r1
 8002502:	651a      	str	r2, [r3, #80]	@ 0x50
 8002504:	4b68      	ldr	r3, [pc, #416]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 8002506:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002508:	4b67      	ldr	r3, [pc, #412]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 800250a:	496b      	ldr	r1, [pc, #428]	@ (80026b8 <HAL_RCC_OscConfig+0x698>)
 800250c:	400a      	ands	r2, r1
 800250e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002510:	e020      	b.n	8002554 <HAL_RCC_OscConfig+0x534>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	23a0      	movs	r3, #160	@ 0xa0
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	429a      	cmp	r2, r3
 800251c:	d10e      	bne.n	800253c <HAL_RCC_OscConfig+0x51c>
 800251e:	4b62      	ldr	r3, [pc, #392]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 8002520:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002522:	4b61      	ldr	r3, [pc, #388]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 8002524:	2180      	movs	r1, #128	@ 0x80
 8002526:	00c9      	lsls	r1, r1, #3
 8002528:	430a      	orrs	r2, r1
 800252a:	651a      	str	r2, [r3, #80]	@ 0x50
 800252c:	4b5e      	ldr	r3, [pc, #376]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 800252e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002530:	4b5d      	ldr	r3, [pc, #372]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 8002532:	2180      	movs	r1, #128	@ 0x80
 8002534:	0049      	lsls	r1, r1, #1
 8002536:	430a      	orrs	r2, r1
 8002538:	651a      	str	r2, [r3, #80]	@ 0x50
 800253a:	e00b      	b.n	8002554 <HAL_RCC_OscConfig+0x534>
 800253c:	4b5a      	ldr	r3, [pc, #360]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 800253e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002540:	4b59      	ldr	r3, [pc, #356]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 8002542:	495b      	ldr	r1, [pc, #364]	@ (80026b0 <HAL_RCC_OscConfig+0x690>)
 8002544:	400a      	ands	r2, r1
 8002546:	651a      	str	r2, [r3, #80]	@ 0x50
 8002548:	4b57      	ldr	r3, [pc, #348]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 800254a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800254c:	4b56      	ldr	r3, [pc, #344]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 800254e:	495a      	ldr	r1, [pc, #360]	@ (80026b8 <HAL_RCC_OscConfig+0x698>)
 8002550:	400a      	ands	r2, r1
 8002552:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d015      	beq.n	8002588 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255c:	f7fe ff10 	bl	8001380 <HAL_GetTick>
 8002560:	0003      	movs	r3, r0
 8002562:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002564:	e009      	b.n	800257a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fe ff0b 	bl	8001380 <HAL_GetTick>
 800256a:	0002      	movs	r2, r0
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	4a52      	ldr	r2, [pc, #328]	@ (80026bc <HAL_RCC_OscConfig+0x69c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e11b      	b.n	80027b2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800257a:	4b4b      	ldr	r3, [pc, #300]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 800257c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800257e:	2380      	movs	r3, #128	@ 0x80
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4013      	ands	r3, r2
 8002584:	d0ef      	beq.n	8002566 <HAL_RCC_OscConfig+0x546>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002588:	f7fe fefa 	bl	8001380 <HAL_GetTick>
 800258c:	0003      	movs	r3, r0
 800258e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002590:	e009      	b.n	80025a6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe fef5 	bl	8001380 <HAL_GetTick>
 8002596:	0002      	movs	r2, r0
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	4a47      	ldr	r2, [pc, #284]	@ (80026bc <HAL_RCC_OscConfig+0x69c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e105      	b.n	80027b2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025a6:	4b40      	ldr	r3, [pc, #256]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 80025a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80025aa:	2380      	movs	r3, #128	@ 0x80
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4013      	ands	r3, r2
 80025b0:	d1ef      	bne.n	8002592 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025b2:	2323      	movs	r3, #35	@ 0x23
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d105      	bne.n	80025c8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025bc:	4b3a      	ldr	r3, [pc, #232]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 80025be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025c0:	4b39      	ldr	r3, [pc, #228]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 80025c2:	493f      	ldr	r1, [pc, #252]	@ (80026c0 <HAL_RCC_OscConfig+0x6a0>)
 80025c4:	400a      	ands	r2, r1
 80025c6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2220      	movs	r2, #32
 80025ce:	4013      	ands	r3, r2
 80025d0:	d049      	beq.n	8002666 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d026      	beq.n	8002628 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80025da:	4b33      	ldr	r3, [pc, #204]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	4b32      	ldr	r3, [pc, #200]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 80025e0:	2101      	movs	r1, #1
 80025e2:	430a      	orrs	r2, r1
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	4b30      	ldr	r3, [pc, #192]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 80025e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025ea:	4b2f      	ldr	r3, [pc, #188]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 80025ec:	2101      	movs	r1, #1
 80025ee:	430a      	orrs	r2, r1
 80025f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80025f2:	4b34      	ldr	r3, [pc, #208]	@ (80026c4 <HAL_RCC_OscConfig+0x6a4>)
 80025f4:	6a1a      	ldr	r2, [r3, #32]
 80025f6:	4b33      	ldr	r3, [pc, #204]	@ (80026c4 <HAL_RCC_OscConfig+0x6a4>)
 80025f8:	2180      	movs	r1, #128	@ 0x80
 80025fa:	0189      	lsls	r1, r1, #6
 80025fc:	430a      	orrs	r2, r1
 80025fe:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7fe febe 	bl	8001380 <HAL_GetTick>
 8002604:	0003      	movs	r3, r0
 8002606:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800260a:	f7fe feb9 	bl	8001380 <HAL_GetTick>
 800260e:	0002      	movs	r2, r0
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e0ca      	b.n	80027b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800261c:	4b22      	ldr	r3, [pc, #136]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2202      	movs	r2, #2
 8002622:	4013      	ands	r3, r2
 8002624:	d0f1      	beq.n	800260a <HAL_RCC_OscConfig+0x5ea>
 8002626:	e01e      	b.n	8002666 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002628:	4b1f      	ldr	r3, [pc, #124]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	4b1e      	ldr	r3, [pc, #120]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 800262e:	2101      	movs	r1, #1
 8002630:	438a      	bics	r2, r1
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	4b23      	ldr	r3, [pc, #140]	@ (80026c4 <HAL_RCC_OscConfig+0x6a4>)
 8002636:	6a1a      	ldr	r2, [r3, #32]
 8002638:	4b22      	ldr	r3, [pc, #136]	@ (80026c4 <HAL_RCC_OscConfig+0x6a4>)
 800263a:	4923      	ldr	r1, [pc, #140]	@ (80026c8 <HAL_RCC_OscConfig+0x6a8>)
 800263c:	400a      	ands	r2, r1
 800263e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7fe fe9e 	bl	8001380 <HAL_GetTick>
 8002644:	0003      	movs	r3, r0
 8002646:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800264a:	f7fe fe99 	bl	8001380 <HAL_GetTick>
 800264e:	0002      	movs	r2, r0
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e0aa      	b.n	80027b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800265c:	4b12      	ldr	r3, [pc, #72]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2202      	movs	r2, #2
 8002662:	4013      	ands	r3, r2
 8002664:	d1f1      	bne.n	800264a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266a:	2b00      	cmp	r3, #0
 800266c:	d100      	bne.n	8002670 <HAL_RCC_OscConfig+0x650>
 800266e:	e09f      	b.n	80027b0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	2b0c      	cmp	r3, #12
 8002674:	d100      	bne.n	8002678 <HAL_RCC_OscConfig+0x658>
 8002676:	e078      	b.n	800276a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267c:	2b02      	cmp	r3, #2
 800267e:	d159      	bne.n	8002734 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002680:	4b09      	ldr	r3, [pc, #36]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b08      	ldr	r3, [pc, #32]	@ (80026a8 <HAL_RCC_OscConfig+0x688>)
 8002686:	4911      	ldr	r1, [pc, #68]	@ (80026cc <HAL_RCC_OscConfig+0x6ac>)
 8002688:	400a      	ands	r2, r1
 800268a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7fe fe78 	bl	8001380 <HAL_GetTick>
 8002690:	0003      	movs	r3, r0
 8002692:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002694:	e01c      	b.n	80026d0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002696:	f7fe fe73 	bl	8001380 <HAL_GetTick>
 800269a:	0002      	movs	r2, r0
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d915      	bls.n	80026d0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e084      	b.n	80027b2 <HAL_RCC_OscConfig+0x792>
 80026a8:	40021000 	.word	0x40021000
 80026ac:	ffff1fff 	.word	0xffff1fff
 80026b0:	fffffeff 	.word	0xfffffeff
 80026b4:	40007000 	.word	0x40007000
 80026b8:	fffffbff 	.word	0xfffffbff
 80026bc:	00001388 	.word	0x00001388
 80026c0:	efffffff 	.word	0xefffffff
 80026c4:	40010000 	.word	0x40010000
 80026c8:	ffffdfff 	.word	0xffffdfff
 80026cc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80026d0:	4b3a      	ldr	r3, [pc, #232]	@ (80027bc <HAL_RCC_OscConfig+0x79c>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	2380      	movs	r3, #128	@ 0x80
 80026d6:	049b      	lsls	r3, r3, #18
 80026d8:	4013      	ands	r3, r2
 80026da:	d1dc      	bne.n	8002696 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026dc:	4b37      	ldr	r3, [pc, #220]	@ (80027bc <HAL_RCC_OscConfig+0x79c>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a37      	ldr	r2, [pc, #220]	@ (80027c0 <HAL_RCC_OscConfig+0x7a0>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	0019      	movs	r1, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026f4:	431a      	orrs	r2, r3
 80026f6:	4b31      	ldr	r3, [pc, #196]	@ (80027bc <HAL_RCC_OscConfig+0x79c>)
 80026f8:	430a      	orrs	r2, r1
 80026fa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026fc:	4b2f      	ldr	r3, [pc, #188]	@ (80027bc <HAL_RCC_OscConfig+0x79c>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b2e      	ldr	r3, [pc, #184]	@ (80027bc <HAL_RCC_OscConfig+0x79c>)
 8002702:	2180      	movs	r1, #128	@ 0x80
 8002704:	0449      	lsls	r1, r1, #17
 8002706:	430a      	orrs	r2, r1
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7fe fe39 	bl	8001380 <HAL_GetTick>
 800270e:	0003      	movs	r3, r0
 8002710:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002714:	f7fe fe34 	bl	8001380 <HAL_GetTick>
 8002718:	0002      	movs	r2, r0
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e045      	b.n	80027b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002726:	4b25      	ldr	r3, [pc, #148]	@ (80027bc <HAL_RCC_OscConfig+0x79c>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	2380      	movs	r3, #128	@ 0x80
 800272c:	049b      	lsls	r3, r3, #18
 800272e:	4013      	ands	r3, r2
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x6f4>
 8002732:	e03d      	b.n	80027b0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002734:	4b21      	ldr	r3, [pc, #132]	@ (80027bc <HAL_RCC_OscConfig+0x79c>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4b20      	ldr	r3, [pc, #128]	@ (80027bc <HAL_RCC_OscConfig+0x79c>)
 800273a:	4922      	ldr	r1, [pc, #136]	@ (80027c4 <HAL_RCC_OscConfig+0x7a4>)
 800273c:	400a      	ands	r2, r1
 800273e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7fe fe1e 	bl	8001380 <HAL_GetTick>
 8002744:	0003      	movs	r3, r0
 8002746:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800274a:	f7fe fe19 	bl	8001380 <HAL_GetTick>
 800274e:	0002      	movs	r2, r0
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e02a      	b.n	80027b2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800275c:	4b17      	ldr	r3, [pc, #92]	@ (80027bc <HAL_RCC_OscConfig+0x79c>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	2380      	movs	r3, #128	@ 0x80
 8002762:	049b      	lsls	r3, r3, #18
 8002764:	4013      	ands	r3, r2
 8002766:	d1f0      	bne.n	800274a <HAL_RCC_OscConfig+0x72a>
 8002768:	e022      	b.n	80027b0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e01d      	b.n	80027b2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002776:	4b11      	ldr	r3, [pc, #68]	@ (80027bc <HAL_RCC_OscConfig+0x79c>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	2380      	movs	r3, #128	@ 0x80
 8002780:	025b      	lsls	r3, r3, #9
 8002782:	401a      	ands	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002788:	429a      	cmp	r2, r3
 800278a:	d10f      	bne.n	80027ac <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	23f0      	movs	r3, #240	@ 0xf0
 8002790:	039b      	lsls	r3, r3, #14
 8002792:	401a      	ands	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002798:	429a      	cmp	r2, r3
 800279a:	d107      	bne.n	80027ac <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	23c0      	movs	r3, #192	@ 0xc0
 80027a0:	041b      	lsls	r3, r3, #16
 80027a2:	401a      	ands	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	0018      	movs	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	b00a      	add	sp, #40	@ 0x28
 80027b8:	bdb0      	pop	{r4, r5, r7, pc}
 80027ba:	46c0      	nop			@ (mov r8, r8)
 80027bc:	40021000 	.word	0x40021000
 80027c0:	ff02ffff 	.word	0xff02ffff
 80027c4:	feffffff 	.word	0xfeffffff

080027c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c8:	b5b0      	push	{r4, r5, r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e128      	b.n	8002a2e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027dc:	4b96      	ldr	r3, [pc, #600]	@ (8002a38 <HAL_RCC_ClockConfig+0x270>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2201      	movs	r2, #1
 80027e2:	4013      	ands	r3, r2
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d91e      	bls.n	8002828 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b93      	ldr	r3, [pc, #588]	@ (8002a38 <HAL_RCC_ClockConfig+0x270>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2201      	movs	r2, #1
 80027f0:	4393      	bics	r3, r2
 80027f2:	0019      	movs	r1, r3
 80027f4:	4b90      	ldr	r3, [pc, #576]	@ (8002a38 <HAL_RCC_ClockConfig+0x270>)
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027fc:	f7fe fdc0 	bl	8001380 <HAL_GetTick>
 8002800:	0003      	movs	r3, r0
 8002802:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002804:	e009      	b.n	800281a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002806:	f7fe fdbb 	bl	8001380 <HAL_GetTick>
 800280a:	0002      	movs	r2, r0
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	4a8a      	ldr	r2, [pc, #552]	@ (8002a3c <HAL_RCC_ClockConfig+0x274>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e109      	b.n	8002a2e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b87      	ldr	r3, [pc, #540]	@ (8002a38 <HAL_RCC_ClockConfig+0x270>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2201      	movs	r2, #1
 8002820:	4013      	ands	r3, r2
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d1ee      	bne.n	8002806 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2202      	movs	r2, #2
 800282e:	4013      	ands	r3, r2
 8002830:	d009      	beq.n	8002846 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002832:	4b83      	ldr	r3, [pc, #524]	@ (8002a40 <HAL_RCC_ClockConfig+0x278>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	22f0      	movs	r2, #240	@ 0xf0
 8002838:	4393      	bics	r3, r2
 800283a:	0019      	movs	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	4b7f      	ldr	r3, [pc, #508]	@ (8002a40 <HAL_RCC_ClockConfig+0x278>)
 8002842:	430a      	orrs	r2, r1
 8002844:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2201      	movs	r2, #1
 800284c:	4013      	ands	r3, r2
 800284e:	d100      	bne.n	8002852 <HAL_RCC_ClockConfig+0x8a>
 8002850:	e089      	b.n	8002966 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800285a:	4b79      	ldr	r3, [pc, #484]	@ (8002a40 <HAL_RCC_ClockConfig+0x278>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	2380      	movs	r3, #128	@ 0x80
 8002860:	029b      	lsls	r3, r3, #10
 8002862:	4013      	ands	r3, r2
 8002864:	d120      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e0e1      	b.n	8002a2e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b03      	cmp	r3, #3
 8002870:	d107      	bne.n	8002882 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002872:	4b73      	ldr	r3, [pc, #460]	@ (8002a40 <HAL_RCC_ClockConfig+0x278>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	2380      	movs	r3, #128	@ 0x80
 8002878:	049b      	lsls	r3, r3, #18
 800287a:	4013      	ands	r3, r2
 800287c:	d114      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e0d5      	b.n	8002a2e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d106      	bne.n	8002898 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800288a:	4b6d      	ldr	r3, [pc, #436]	@ (8002a40 <HAL_RCC_ClockConfig+0x278>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2204      	movs	r2, #4
 8002890:	4013      	ands	r3, r2
 8002892:	d109      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0ca      	b.n	8002a2e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002898:	4b69      	ldr	r3, [pc, #420]	@ (8002a40 <HAL_RCC_ClockConfig+0x278>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	2380      	movs	r3, #128	@ 0x80
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4013      	ands	r3, r2
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0c2      	b.n	8002a2e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028a8:	4b65      	ldr	r3, [pc, #404]	@ (8002a40 <HAL_RCC_ClockConfig+0x278>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2203      	movs	r2, #3
 80028ae:	4393      	bics	r3, r2
 80028b0:	0019      	movs	r1, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	4b62      	ldr	r3, [pc, #392]	@ (8002a40 <HAL_RCC_ClockConfig+0x278>)
 80028b8:	430a      	orrs	r2, r1
 80028ba:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028bc:	f7fe fd60 	bl	8001380 <HAL_GetTick>
 80028c0:	0003      	movs	r3, r0
 80028c2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d111      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028cc:	e009      	b.n	80028e2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ce:	f7fe fd57 	bl	8001380 <HAL_GetTick>
 80028d2:	0002      	movs	r2, r0
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	4a58      	ldr	r2, [pc, #352]	@ (8002a3c <HAL_RCC_ClockConfig+0x274>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e0a5      	b.n	8002a2e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028e2:	4b57      	ldr	r3, [pc, #348]	@ (8002a40 <HAL_RCC_ClockConfig+0x278>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	220c      	movs	r2, #12
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d1ef      	bne.n	80028ce <HAL_RCC_ClockConfig+0x106>
 80028ee:	e03a      	b.n	8002966 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d111      	bne.n	800291c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028f8:	e009      	b.n	800290e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028fa:	f7fe fd41 	bl	8001380 <HAL_GetTick>
 80028fe:	0002      	movs	r2, r0
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	4a4d      	ldr	r2, [pc, #308]	@ (8002a3c <HAL_RCC_ClockConfig+0x274>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e08f      	b.n	8002a2e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800290e:	4b4c      	ldr	r3, [pc, #304]	@ (8002a40 <HAL_RCC_ClockConfig+0x278>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	220c      	movs	r2, #12
 8002914:	4013      	ands	r3, r2
 8002916:	2b0c      	cmp	r3, #12
 8002918:	d1ef      	bne.n	80028fa <HAL_RCC_ClockConfig+0x132>
 800291a:	e024      	b.n	8002966 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d11b      	bne.n	800295c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002924:	e009      	b.n	800293a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002926:	f7fe fd2b 	bl	8001380 <HAL_GetTick>
 800292a:	0002      	movs	r2, r0
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	4a42      	ldr	r2, [pc, #264]	@ (8002a3c <HAL_RCC_ClockConfig+0x274>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e079      	b.n	8002a2e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800293a:	4b41      	ldr	r3, [pc, #260]	@ (8002a40 <HAL_RCC_ClockConfig+0x278>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	220c      	movs	r2, #12
 8002940:	4013      	ands	r3, r2
 8002942:	2b04      	cmp	r3, #4
 8002944:	d1ef      	bne.n	8002926 <HAL_RCC_ClockConfig+0x15e>
 8002946:	e00e      	b.n	8002966 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002948:	f7fe fd1a 	bl	8001380 <HAL_GetTick>
 800294c:	0002      	movs	r2, r0
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	4a3a      	ldr	r2, [pc, #232]	@ (8002a3c <HAL_RCC_ClockConfig+0x274>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d901      	bls.n	800295c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e068      	b.n	8002a2e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800295c:	4b38      	ldr	r3, [pc, #224]	@ (8002a40 <HAL_RCC_ClockConfig+0x278>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	220c      	movs	r2, #12
 8002962:	4013      	ands	r3, r2
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002966:	4b34      	ldr	r3, [pc, #208]	@ (8002a38 <HAL_RCC_ClockConfig+0x270>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2201      	movs	r2, #1
 800296c:	4013      	ands	r3, r2
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d21e      	bcs.n	80029b2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002974:	4b30      	ldr	r3, [pc, #192]	@ (8002a38 <HAL_RCC_ClockConfig+0x270>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2201      	movs	r2, #1
 800297a:	4393      	bics	r3, r2
 800297c:	0019      	movs	r1, r3
 800297e:	4b2e      	ldr	r3, [pc, #184]	@ (8002a38 <HAL_RCC_ClockConfig+0x270>)
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002986:	f7fe fcfb 	bl	8001380 <HAL_GetTick>
 800298a:	0003      	movs	r3, r0
 800298c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	e009      	b.n	80029a4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002990:	f7fe fcf6 	bl	8001380 <HAL_GetTick>
 8002994:	0002      	movs	r2, r0
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	4a28      	ldr	r2, [pc, #160]	@ (8002a3c <HAL_RCC_ClockConfig+0x274>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e044      	b.n	8002a2e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a4:	4b24      	ldr	r3, [pc, #144]	@ (8002a38 <HAL_RCC_ClockConfig+0x270>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2201      	movs	r2, #1
 80029aa:	4013      	ands	r3, r2
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d1ee      	bne.n	8002990 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2204      	movs	r2, #4
 80029b8:	4013      	ands	r3, r2
 80029ba:	d009      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029bc:	4b20      	ldr	r3, [pc, #128]	@ (8002a40 <HAL_RCC_ClockConfig+0x278>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4a20      	ldr	r2, [pc, #128]	@ (8002a44 <HAL_RCC_ClockConfig+0x27c>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	0019      	movs	r1, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002a40 <HAL_RCC_ClockConfig+0x278>)
 80029cc:	430a      	orrs	r2, r1
 80029ce:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2208      	movs	r2, #8
 80029d6:	4013      	ands	r3, r2
 80029d8:	d00a      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029da:	4b19      	ldr	r3, [pc, #100]	@ (8002a40 <HAL_RCC_ClockConfig+0x278>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	4a1a      	ldr	r2, [pc, #104]	@ (8002a48 <HAL_RCC_ClockConfig+0x280>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	0019      	movs	r1, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	00da      	lsls	r2, r3, #3
 80029ea:	4b15      	ldr	r3, [pc, #84]	@ (8002a40 <HAL_RCC_ClockConfig+0x278>)
 80029ec:	430a      	orrs	r2, r1
 80029ee:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029f0:	f000 f832 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 80029f4:	0001      	movs	r1, r0
 80029f6:	4b12      	ldr	r3, [pc, #72]	@ (8002a40 <HAL_RCC_ClockConfig+0x278>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	091b      	lsrs	r3, r3, #4
 80029fc:	220f      	movs	r2, #15
 80029fe:	4013      	ands	r3, r2
 8002a00:	4a12      	ldr	r2, [pc, #72]	@ (8002a4c <HAL_RCC_ClockConfig+0x284>)
 8002a02:	5cd3      	ldrb	r3, [r2, r3]
 8002a04:	000a      	movs	r2, r1
 8002a06:	40da      	lsrs	r2, r3
 8002a08:	4b11      	ldr	r3, [pc, #68]	@ (8002a50 <HAL_RCC_ClockConfig+0x288>)
 8002a0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a0c:	4b11      	ldr	r3, [pc, #68]	@ (8002a54 <HAL_RCC_ClockConfig+0x28c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	250b      	movs	r5, #11
 8002a12:	197c      	adds	r4, r7, r5
 8002a14:	0018      	movs	r0, r3
 8002a16:	f7fe fc6d 	bl	80012f4 <HAL_InitTick>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002a1e:	197b      	adds	r3, r7, r5
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002a26:	197b      	adds	r3, r7, r5
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	e000      	b.n	8002a2e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	0018      	movs	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	b004      	add	sp, #16
 8002a34:	bdb0      	pop	{r4, r5, r7, pc}
 8002a36:	46c0      	nop			@ (mov r8, r8)
 8002a38:	40022000 	.word	0x40022000
 8002a3c:	00001388 	.word	0x00001388
 8002a40:	40021000 	.word	0x40021000
 8002a44:	fffff8ff 	.word	0xfffff8ff
 8002a48:	ffffc7ff 	.word	0xffffc7ff
 8002a4c:	08005484 	.word	0x08005484
 8002a50:	20000000 	.word	0x20000000
 8002a54:	20000004 	.word	0x20000004

08002a58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002a5e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	220c      	movs	r2, #12
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b0c      	cmp	r3, #12
 8002a6c:	d013      	beq.n	8002a96 <HAL_RCC_GetSysClockFreq+0x3e>
 8002a6e:	d85c      	bhi.n	8002b2a <HAL_RCC_GetSysClockFreq+0xd2>
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d002      	beq.n	8002a7a <HAL_RCC_GetSysClockFreq+0x22>
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d00b      	beq.n	8002a90 <HAL_RCC_GetSysClockFreq+0x38>
 8002a78:	e057      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002a7a:	4b35      	ldr	r3, [pc, #212]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2210      	movs	r2, #16
 8002a80:	4013      	ands	r3, r2
 8002a82:	d002      	beq.n	8002a8a <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002a84:	4b33      	ldr	r3, [pc, #204]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a86:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002a88:	e05d      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8002a8a:	4b33      	ldr	r3, [pc, #204]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a8c:	613b      	str	r3, [r7, #16]
      break;
 8002a8e:	e05a      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a90:	4b32      	ldr	r3, [pc, #200]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x104>)
 8002a92:	613b      	str	r3, [r7, #16]
      break;
 8002a94:	e057      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	0c9b      	lsrs	r3, r3, #18
 8002a9a:	220f      	movs	r2, #15
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	4a30      	ldr	r2, [pc, #192]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aa0:	5cd3      	ldrb	r3, [r2, r3]
 8002aa2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	0d9b      	lsrs	r3, r3, #22
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	4013      	ands	r3, r2
 8002aac:	3301      	adds	r3, #1
 8002aae:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ab0:	4b27      	ldr	r3, [pc, #156]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	2380      	movs	r3, #128	@ 0x80
 8002ab6:	025b      	lsls	r3, r3, #9
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d00f      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	000a      	movs	r2, r1
 8002ac0:	0152      	lsls	r2, r2, #5
 8002ac2:	1a52      	subs	r2, r2, r1
 8002ac4:	0193      	lsls	r3, r2, #6
 8002ac6:	1a9b      	subs	r3, r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	185b      	adds	r3, r3, r1
 8002acc:	025b      	lsls	r3, r3, #9
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f7fd fb23 	bl	800011c <__udivsi3>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	e023      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002adc:	4b1c      	ldr	r3, [pc, #112]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2210      	movs	r2, #16
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d00f      	beq.n	8002b06 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	000a      	movs	r2, r1
 8002aea:	0152      	lsls	r2, r2, #5
 8002aec:	1a52      	subs	r2, r2, r1
 8002aee:	0193      	lsls	r3, r2, #6
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	185b      	adds	r3, r3, r1
 8002af6:	021b      	lsls	r3, r3, #8
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	0018      	movs	r0, r3
 8002afc:	f7fd fb0e 	bl	800011c <__udivsi3>
 8002b00:	0003      	movs	r3, r0
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	e00e      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8002b06:	68b9      	ldr	r1, [r7, #8]
 8002b08:	000a      	movs	r2, r1
 8002b0a:	0152      	lsls	r2, r2, #5
 8002b0c:	1a52      	subs	r2, r2, r1
 8002b0e:	0193      	lsls	r3, r2, #6
 8002b10:	1a9b      	subs	r3, r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	185b      	adds	r3, r3, r1
 8002b16:	029b      	lsls	r3, r3, #10
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f7fd fafe 	bl	800011c <__udivsi3>
 8002b20:	0003      	movs	r3, r0
 8002b22:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	613b      	str	r3, [r7, #16]
      break;
 8002b28:	e00d      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002b2a:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	0b5b      	lsrs	r3, r3, #13
 8002b30:	2207      	movs	r2, #7
 8002b32:	4013      	ands	r3, r2
 8002b34:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	2280      	movs	r2, #128	@ 0x80
 8002b3c:	0212      	lsls	r2, r2, #8
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	0013      	movs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
      break;
 8002b44:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b46:	693b      	ldr	r3, [r7, #16]
}
 8002b48:	0018      	movs	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b006      	add	sp, #24
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021000 	.word	0x40021000
 8002b54:	003d0900 	.word	0x003d0900
 8002b58:	00f42400 	.word	0x00f42400
 8002b5c:	007a1200 	.word	0x007a1200
 8002b60:	0800549c 	.word	0x0800549c

08002b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b68:	4b02      	ldr	r3, [pc, #8]	@ (8002b74 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
}
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	46c0      	nop			@ (mov r8, r8)
 8002b74:	20000000 	.word	0x20000000

08002b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b7c:	f7ff fff2 	bl	8002b64 <HAL_RCC_GetHCLKFreq>
 8002b80:	0001      	movs	r1, r0
 8002b82:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	0a1b      	lsrs	r3, r3, #8
 8002b88:	2207      	movs	r2, #7
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	4a04      	ldr	r2, [pc, #16]	@ (8002ba0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b8e:	5cd3      	ldrb	r3, [r2, r3]
 8002b90:	40d9      	lsrs	r1, r3
 8002b92:	000b      	movs	r3, r1
}
 8002b94:	0018      	movs	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	46c0      	nop			@ (mov r8, r8)
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	08005494 	.word	0x08005494

08002ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ba8:	f7ff ffdc 	bl	8002b64 <HAL_RCC_GetHCLKFreq>
 8002bac:	0001      	movs	r1, r0
 8002bae:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	0adb      	lsrs	r3, r3, #11
 8002bb4:	2207      	movs	r2, #7
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	4a04      	ldr	r2, [pc, #16]	@ (8002bcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bba:	5cd3      	ldrb	r3, [r2, r3]
 8002bbc:	40d9      	lsrs	r1, r3
 8002bbe:	000b      	movs	r3, r1
}
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	46c0      	nop			@ (mov r8, r8)
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	08005494 	.word	0x08005494

08002bd0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002bd8:	2317      	movs	r3, #23
 8002bda:	18fb      	adds	r3, r7, r3
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2220      	movs	r2, #32
 8002be6:	4013      	ands	r3, r2
 8002be8:	d106      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	2380      	movs	r3, #128	@ 0x80
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d100      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002bf6:	e104      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf8:	4bb9      	ldr	r3, [pc, #740]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002bfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bfc:	2380      	movs	r3, #128	@ 0x80
 8002bfe:	055b      	lsls	r3, r3, #21
 8002c00:	4013      	ands	r3, r2
 8002c02:	d10a      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c04:	4bb6      	ldr	r3, [pc, #728]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c08:	4bb5      	ldr	r3, [pc, #724]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c0a:	2180      	movs	r1, #128	@ 0x80
 8002c0c:	0549      	lsls	r1, r1, #21
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002c12:	2317      	movs	r3, #23
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	2201      	movs	r2, #1
 8002c18:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1a:	4bb2      	ldr	r3, [pc, #712]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	2380      	movs	r3, #128	@ 0x80
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4013      	ands	r3, r2
 8002c24:	d11a      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c26:	4baf      	ldr	r3, [pc, #700]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	4bae      	ldr	r3, [pc, #696]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002c2c:	2180      	movs	r1, #128	@ 0x80
 8002c2e:	0049      	lsls	r1, r1, #1
 8002c30:	430a      	orrs	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c34:	f7fe fba4 	bl	8001380 <HAL_GetTick>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3c:	e008      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3e:	f7fe fb9f 	bl	8001380 <HAL_GetTick>
 8002c42:	0002      	movs	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b64      	cmp	r3, #100	@ 0x64
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e143      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c50:	4ba4      	ldr	r3, [pc, #656]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	2380      	movs	r3, #128	@ 0x80
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002c5c:	4ba0      	ldr	r3, [pc, #640]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	23c0      	movs	r3, #192	@ 0xc0
 8002c62:	039b      	lsls	r3, r3, #14
 8002c64:	4013      	ands	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	23c0      	movs	r3, #192	@ 0xc0
 8002c6e:	039b      	lsls	r3, r3, #14
 8002c70:	4013      	ands	r3, r2
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d107      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	23c0      	movs	r3, #192	@ 0xc0
 8002c7e:	039b      	lsls	r3, r3, #14
 8002c80:	4013      	ands	r3, r2
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d013      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	23c0      	movs	r3, #192	@ 0xc0
 8002c8e:	029b      	lsls	r3, r3, #10
 8002c90:	401a      	ands	r2, r3
 8002c92:	23c0      	movs	r3, #192	@ 0xc0
 8002c94:	029b      	lsls	r3, r3, #10
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d10a      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002c9a:	4b91      	ldr	r3, [pc, #580]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	2380      	movs	r3, #128	@ 0x80
 8002ca0:	029b      	lsls	r3, r3, #10
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	2380      	movs	r3, #128	@ 0x80
 8002ca6:	029b      	lsls	r3, r3, #10
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d101      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e113      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002cb0:	4b8b      	ldr	r3, [pc, #556]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cb4:	23c0      	movs	r3, #192	@ 0xc0
 8002cb6:	029b      	lsls	r3, r3, #10
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d049      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	23c0      	movs	r3, #192	@ 0xc0
 8002cc8:	029b      	lsls	r3, r3, #10
 8002cca:	4013      	ands	r3, r2
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d004      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d10d      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	23c0      	movs	r3, #192	@ 0xc0
 8002ce2:	029b      	lsls	r3, r3, #10
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d034      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	2380      	movs	r3, #128	@ 0x80
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d02e      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002cf8:	4b79      	ldr	r3, [pc, #484]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cfc:	4a7a      	ldr	r2, [pc, #488]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d02:	4b77      	ldr	r3, [pc, #476]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d06:	4b76      	ldr	r3, [pc, #472]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d08:	2180      	movs	r1, #128	@ 0x80
 8002d0a:	0309      	lsls	r1, r1, #12
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d10:	4b73      	ldr	r3, [pc, #460]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d14:	4b72      	ldr	r3, [pc, #456]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d16:	4975      	ldr	r1, [pc, #468]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002d18:	400a      	ands	r2, r1
 8002d1a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002d1c:	4b70      	ldr	r3, [pc, #448]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	2380      	movs	r3, #128	@ 0x80
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d014      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fe fb28 	bl	8001380 <HAL_GetTick>
 8002d30:	0003      	movs	r3, r0
 8002d32:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d34:	e009      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d36:	f7fe fb23 	bl	8001380 <HAL_GetTick>
 8002d3a:	0002      	movs	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	4a6b      	ldr	r2, [pc, #428]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e0c6      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d4a:	4b65      	ldr	r3, [pc, #404]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d4e:	2380      	movs	r3, #128	@ 0x80
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4013      	ands	r3, r2
 8002d54:	d0ef      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	2380      	movs	r3, #128	@ 0x80
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d01f      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	23c0      	movs	r3, #192	@ 0xc0
 8002d68:	029b      	lsls	r3, r3, #10
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	23c0      	movs	r3, #192	@ 0xc0
 8002d6e:	029b      	lsls	r3, r3, #10
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d10c      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002d74:	4b5a      	ldr	r3, [pc, #360]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a5e      	ldr	r2, [pc, #376]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	0019      	movs	r1, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	23c0      	movs	r3, #192	@ 0xc0
 8002d84:	039b      	lsls	r3, r3, #14
 8002d86:	401a      	ands	r2, r3
 8002d88:	4b55      	ldr	r3, [pc, #340]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	4b54      	ldr	r3, [pc, #336]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d90:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	23c0      	movs	r3, #192	@ 0xc0
 8002d98:	029b      	lsls	r3, r3, #10
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	4b50      	ldr	r3, [pc, #320]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2220      	movs	r2, #32
 8002da8:	4013      	ands	r3, r2
 8002daa:	d01f      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	23c0      	movs	r3, #192	@ 0xc0
 8002db2:	029b      	lsls	r3, r3, #10
 8002db4:	401a      	ands	r2, r3
 8002db6:	23c0      	movs	r3, #192	@ 0xc0
 8002db8:	029b      	lsls	r3, r3, #10
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002dbe:	4b48      	ldr	r3, [pc, #288]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a4c      	ldr	r2, [pc, #304]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	23c0      	movs	r3, #192	@ 0xc0
 8002dce:	039b      	lsls	r3, r3, #14
 8002dd0:	401a      	ands	r2, r3
 8002dd2:	4b43      	ldr	r3, [pc, #268]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	4b41      	ldr	r3, [pc, #260]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002dda:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	23c0      	movs	r3, #192	@ 0xc0
 8002de2:	029b      	lsls	r3, r3, #10
 8002de4:	401a      	ands	r2, r3
 8002de6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002de8:	430a      	orrs	r2, r1
 8002dea:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dec:	2317      	movs	r3, #23
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d105      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df6:	4b3a      	ldr	r3, [pc, #232]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002df8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dfa:	4b39      	ldr	r3, [pc, #228]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002dfc:	493e      	ldr	r1, [pc, #248]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8002dfe:	400a      	ands	r2, r1
 8002e00:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2201      	movs	r2, #1
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d009      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e0c:	4b34      	ldr	r3, [pc, #208]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e10:	2203      	movs	r2, #3
 8002e12:	4393      	bics	r3, r2
 8002e14:	0019      	movs	r1, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	4b31      	ldr	r3, [pc, #196]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2202      	movs	r2, #2
 8002e26:	4013      	ands	r3, r2
 8002e28:	d009      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2e:	220c      	movs	r2, #12
 8002e30:	4393      	bics	r3, r2
 8002e32:	0019      	movs	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	4b29      	ldr	r3, [pc, #164]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2204      	movs	r2, #4
 8002e44:	4013      	ands	r3, r2
 8002e46:	d009      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e48:	4b25      	ldr	r3, [pc, #148]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e4c:	4a2b      	ldr	r2, [pc, #172]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	0019      	movs	r1, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	4b22      	ldr	r3, [pc, #136]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2208      	movs	r2, #8
 8002e62:	4013      	ands	r3, r2
 8002e64:	d009      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e66:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e6a:	4a25      	ldr	r2, [pc, #148]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	0019      	movs	r1, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699a      	ldr	r2, [r3, #24]
 8002e74:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e76:	430a      	orrs	r2, r1
 8002e78:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	2380      	movs	r3, #128	@ 0x80
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	4013      	ands	r3, r2
 8002e84:	d009      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e86:	4b16      	ldr	r3, [pc, #88]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e8a:	4a17      	ldr	r2, [pc, #92]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	0019      	movs	r1, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	4b12      	ldr	r3, [pc, #72]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002e96:	430a      	orrs	r2, r1
 8002e98:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2240      	movs	r2, #64	@ 0x40
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d009      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea8:	4a16      	ldr	r2, [pc, #88]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	0019      	movs	r1, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2280      	movs	r2, #128	@ 0x80
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d009      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002ec2:	4b07      	ldr	r3, [pc, #28]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec6:	4a10      	ldr	r2, [pc, #64]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	0019      	movs	r1, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1a      	ldr	r2, [r3, #32]
 8002ed0:	4b03      	ldr	r3, [pc, #12]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	0018      	movs	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b006      	add	sp, #24
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40007000 	.word	0x40007000
 8002ee8:	fffcffff 	.word	0xfffcffff
 8002eec:	fff7ffff 	.word	0xfff7ffff
 8002ef0:	00001388 	.word	0x00001388
 8002ef4:	ffcfffff 	.word	0xffcfffff
 8002ef8:	efffffff 	.word	0xefffffff
 8002efc:	fffff3ff 	.word	0xfffff3ff
 8002f00:	ffffcfff 	.word	0xffffcfff
 8002f04:	fbffffff 	.word	0xfbffffff
 8002f08:	fff3ffff 	.word	0xfff3ffff

08002f0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e044      	b.n	8002fa8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d107      	bne.n	8002f36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2278      	movs	r2, #120	@ 0x78
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	0018      	movs	r0, r3
 8002f32:	f7fe f839 	bl	8000fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2224      	movs	r2, #36	@ 0x24
 8002f3a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2101      	movs	r1, #1
 8002f48:	438a      	bics	r2, r1
 8002f4a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	0018      	movs	r0, r3
 8002f58:	f000 fc50 	bl	80037fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f000 f9ae 	bl	80032c0 <UART_SetConfig>
 8002f64:	0003      	movs	r3, r0
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e01c      	b.n	8002fa8 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	490d      	ldr	r1, [pc, #52]	@ (8002fb0 <HAL_UART_Init+0xa4>)
 8002f7a:	400a      	ands	r2, r1
 8002f7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	212a      	movs	r1, #42	@ 0x2a
 8002f8a:	438a      	bics	r2, r1
 8002f8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2101      	movs	r1, #1
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f000 fcdf 	bl	8003964 <UART_CheckIdleState>
 8002fa6:	0003      	movs	r3, r0
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b002      	add	sp, #8
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	ffffb7ff 	.word	0xffffb7ff

08002fb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08a      	sub	sp, #40	@ 0x28
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	603b      	str	r3, [r7, #0]
 8002fc0:	1dbb      	adds	r3, r7, #6
 8002fc2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d000      	beq.n	8002fce <HAL_UART_Transmit+0x1a>
 8002fcc:	e08c      	b.n	80030e8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_UART_Transmit+0x28>
 8002fd4:	1dbb      	adds	r3, r7, #6
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e084      	b.n	80030ea <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	2380      	movs	r3, #128	@ 0x80
 8002fe6:	015b      	lsls	r3, r3, #5
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d109      	bne.n	8003000 <HAL_UART_Transmit+0x4c>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d105      	bne.n	8003000 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d001      	beq.n	8003000 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e074      	b.n	80030ea <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2284      	movs	r2, #132	@ 0x84
 8003004:	2100      	movs	r1, #0
 8003006:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2221      	movs	r2, #33	@ 0x21
 800300c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800300e:	f7fe f9b7 	bl	8001380 <HAL_GetTick>
 8003012:	0003      	movs	r3, r0
 8003014:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1dba      	adds	r2, r7, #6
 800301a:	2150      	movs	r1, #80	@ 0x50
 800301c:	8812      	ldrh	r2, [r2, #0]
 800301e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	1dba      	adds	r2, r7, #6
 8003024:	2152      	movs	r1, #82	@ 0x52
 8003026:	8812      	ldrh	r2, [r2, #0]
 8003028:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	2380      	movs	r3, #128	@ 0x80
 8003030:	015b      	lsls	r3, r3, #5
 8003032:	429a      	cmp	r2, r3
 8003034:	d108      	bne.n	8003048 <HAL_UART_Transmit+0x94>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d104      	bne.n	8003048 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	61bb      	str	r3, [r7, #24]
 8003046:	e003      	b.n	8003050 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800304c:	2300      	movs	r3, #0
 800304e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003050:	e02f      	b.n	80030b2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	0013      	movs	r3, r2
 800305c:	2200      	movs	r2, #0
 800305e:	2180      	movs	r1, #128	@ 0x80
 8003060:	f000 fd28 	bl	8003ab4 <UART_WaitOnFlagUntilTimeout>
 8003064:	1e03      	subs	r3, r0, #0
 8003066:	d004      	beq.n	8003072 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e03b      	b.n	80030ea <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10b      	bne.n	8003090 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	001a      	movs	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	05d2      	lsls	r2, r2, #23
 8003084:	0dd2      	lsrs	r2, r2, #23
 8003086:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	3302      	adds	r3, #2
 800308c:	61bb      	str	r3, [r7, #24]
 800308e:	e007      	b.n	80030a0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	781a      	ldrb	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3301      	adds	r3, #1
 800309e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2252      	movs	r2, #82	@ 0x52
 80030a4:	5a9b      	ldrh	r3, [r3, r2]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b299      	uxth	r1, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2252      	movs	r2, #82	@ 0x52
 80030b0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2252      	movs	r2, #82	@ 0x52
 80030b6:	5a9b      	ldrh	r3, [r3, r2]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1c9      	bne.n	8003052 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	0013      	movs	r3, r2
 80030c8:	2200      	movs	r2, #0
 80030ca:	2140      	movs	r1, #64	@ 0x40
 80030cc:	f000 fcf2 	bl	8003ab4 <UART_WaitOnFlagUntilTimeout>
 80030d0:	1e03      	subs	r3, r0, #0
 80030d2:	d004      	beq.n	80030de <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e005      	b.n	80030ea <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2220      	movs	r2, #32
 80030e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	e000      	b.n	80030ea <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80030e8:	2302      	movs	r3, #2
  }
}
 80030ea:	0018      	movs	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	b008      	add	sp, #32
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	@ 0x28
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	603b      	str	r3, [r7, #0]
 8003100:	1dbb      	adds	r3, r7, #6
 8003102:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2280      	movs	r2, #128	@ 0x80
 8003108:	589b      	ldr	r3, [r3, r2]
 800310a:	2b20      	cmp	r3, #32
 800310c:	d000      	beq.n	8003110 <HAL_UART_Receive+0x1c>
 800310e:	e0d0      	b.n	80032b2 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_UART_Receive+0x2a>
 8003116:	1dbb      	adds	r3, r7, #6
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e0c8      	b.n	80032b4 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	2380      	movs	r3, #128	@ 0x80
 8003128:	015b      	lsls	r3, r3, #5
 800312a:	429a      	cmp	r2, r3
 800312c:	d109      	bne.n	8003142 <HAL_UART_Receive+0x4e>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d105      	bne.n	8003142 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2201      	movs	r2, #1
 800313a:	4013      	ands	r3, r2
 800313c:	d001      	beq.n	8003142 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e0b8      	b.n	80032b4 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2284      	movs	r2, #132	@ 0x84
 8003146:	2100      	movs	r1, #0
 8003148:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2280      	movs	r2, #128	@ 0x80
 800314e:	2122      	movs	r1, #34	@ 0x22
 8003150:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003158:	f7fe f912 	bl	8001380 <HAL_GetTick>
 800315c:	0003      	movs	r3, r0
 800315e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	1dba      	adds	r2, r7, #6
 8003164:	2158      	movs	r1, #88	@ 0x58
 8003166:	8812      	ldrh	r2, [r2, #0]
 8003168:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1dba      	adds	r2, r7, #6
 800316e:	215a      	movs	r1, #90	@ 0x5a
 8003170:	8812      	ldrh	r2, [r2, #0]
 8003172:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	2380      	movs	r3, #128	@ 0x80
 800317a:	015b      	lsls	r3, r3, #5
 800317c:	429a      	cmp	r2, r3
 800317e:	d10d      	bne.n	800319c <HAL_UART_Receive+0xa8>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d104      	bne.n	8003192 <HAL_UART_Receive+0x9e>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	225c      	movs	r2, #92	@ 0x5c
 800318c:	494b      	ldr	r1, [pc, #300]	@ (80032bc <HAL_UART_Receive+0x1c8>)
 800318e:	5299      	strh	r1, [r3, r2]
 8003190:	e02e      	b.n	80031f0 <HAL_UART_Receive+0xfc>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	225c      	movs	r2, #92	@ 0x5c
 8003196:	21ff      	movs	r1, #255	@ 0xff
 8003198:	5299      	strh	r1, [r3, r2]
 800319a:	e029      	b.n	80031f0 <HAL_UART_Receive+0xfc>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10d      	bne.n	80031c0 <HAL_UART_Receive+0xcc>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d104      	bne.n	80031b6 <HAL_UART_Receive+0xc2>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	225c      	movs	r2, #92	@ 0x5c
 80031b0:	21ff      	movs	r1, #255	@ 0xff
 80031b2:	5299      	strh	r1, [r3, r2]
 80031b4:	e01c      	b.n	80031f0 <HAL_UART_Receive+0xfc>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	225c      	movs	r2, #92	@ 0x5c
 80031ba:	217f      	movs	r1, #127	@ 0x7f
 80031bc:	5299      	strh	r1, [r3, r2]
 80031be:	e017      	b.n	80031f0 <HAL_UART_Receive+0xfc>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	2380      	movs	r3, #128	@ 0x80
 80031c6:	055b      	lsls	r3, r3, #21
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d10d      	bne.n	80031e8 <HAL_UART_Receive+0xf4>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d104      	bne.n	80031de <HAL_UART_Receive+0xea>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	225c      	movs	r2, #92	@ 0x5c
 80031d8:	217f      	movs	r1, #127	@ 0x7f
 80031da:	5299      	strh	r1, [r3, r2]
 80031dc:	e008      	b.n	80031f0 <HAL_UART_Receive+0xfc>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	225c      	movs	r2, #92	@ 0x5c
 80031e2:	213f      	movs	r1, #63	@ 0x3f
 80031e4:	5299      	strh	r1, [r3, r2]
 80031e6:	e003      	b.n	80031f0 <HAL_UART_Receive+0xfc>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	225c      	movs	r2, #92	@ 0x5c
 80031ec:	2100      	movs	r1, #0
 80031ee:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80031f0:	2312      	movs	r3, #18
 80031f2:	18fb      	adds	r3, r7, r3
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	215c      	movs	r1, #92	@ 0x5c
 80031f8:	5a52      	ldrh	r2, [r2, r1]
 80031fa:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	2380      	movs	r3, #128	@ 0x80
 8003202:	015b      	lsls	r3, r3, #5
 8003204:	429a      	cmp	r2, r3
 8003206:	d108      	bne.n	800321a <HAL_UART_Receive+0x126>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d104      	bne.n	800321a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8003210:	2300      	movs	r3, #0
 8003212:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	61bb      	str	r3, [r7, #24]
 8003218:	e003      	b.n	8003222 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800321e:	2300      	movs	r3, #0
 8003220:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003222:	e03a      	b.n	800329a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	0013      	movs	r3, r2
 800322e:	2200      	movs	r2, #0
 8003230:	2120      	movs	r1, #32
 8003232:	f000 fc3f 	bl	8003ab4 <UART_WaitOnFlagUntilTimeout>
 8003236:	1e03      	subs	r3, r0, #0
 8003238:	d005      	beq.n	8003246 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2280      	movs	r2, #128	@ 0x80
 800323e:	2120      	movs	r1, #32
 8003240:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e036      	b.n	80032b4 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10e      	bne.n	800326a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003252:	b29b      	uxth	r3, r3
 8003254:	2212      	movs	r2, #18
 8003256:	18ba      	adds	r2, r7, r2
 8003258:	8812      	ldrh	r2, [r2, #0]
 800325a:	4013      	ands	r3, r2
 800325c:	b29a      	uxth	r2, r3
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	3302      	adds	r3, #2
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	e00e      	b.n	8003288 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2212      	movs	r2, #18
 8003274:	18ba      	adds	r2, r7, r2
 8003276:	8812      	ldrh	r2, [r2, #0]
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	4013      	ands	r3, r2
 800327c:	b2da      	uxtb	r2, r3
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3301      	adds	r3, #1
 8003286:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	225a      	movs	r2, #90	@ 0x5a
 800328c:	5a9b      	ldrh	r3, [r3, r2]
 800328e:	b29b      	uxth	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	b299      	uxth	r1, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	225a      	movs	r2, #90	@ 0x5a
 8003298:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	225a      	movs	r2, #90	@ 0x5a
 800329e:	5a9b      	ldrh	r3, [r3, r2]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1be      	bne.n	8003224 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2280      	movs	r2, #128	@ 0x80
 80032aa:	2120      	movs	r1, #32
 80032ac:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	e000      	b.n	80032b4 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 80032b2:	2302      	movs	r3, #2
  }
}
 80032b4:	0018      	movs	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b008      	add	sp, #32
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	000001ff 	.word	0x000001ff

080032c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032c0:	b5b0      	push	{r4, r5, r7, lr}
 80032c2:	b08e      	sub	sp, #56	@ 0x38
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032c8:	231a      	movs	r3, #26
 80032ca:	2218      	movs	r2, #24
 80032cc:	189b      	adds	r3, r3, r2
 80032ce:	19db      	adds	r3, r3, r7
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	431a      	orrs	r2, r3
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4ac3      	ldr	r2, [pc, #780]	@ (8003600 <UART_SetConfig+0x340>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	0019      	movs	r1, r3
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032fe:	430a      	orrs	r2, r1
 8003300:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4abe      	ldr	r2, [pc, #760]	@ (8003604 <UART_SetConfig+0x344>)
 800330a:	4013      	ands	r3, r2
 800330c:	0019      	movs	r1, r3
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4ab8      	ldr	r2, [pc, #736]	@ (8003608 <UART_SetConfig+0x348>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d004      	beq.n	8003334 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003330:	4313      	orrs	r3, r2
 8003332:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	4ab4      	ldr	r2, [pc, #720]	@ (800360c <UART_SetConfig+0x34c>)
 800333c:	4013      	ands	r3, r2
 800333e:	0019      	movs	r1, r3
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003346:	430a      	orrs	r2, r1
 8003348:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4ab0      	ldr	r2, [pc, #704]	@ (8003610 <UART_SetConfig+0x350>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d131      	bne.n	80033b8 <UART_SetConfig+0xf8>
 8003354:	4baf      	ldr	r3, [pc, #700]	@ (8003614 <UART_SetConfig+0x354>)
 8003356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003358:	2203      	movs	r2, #3
 800335a:	4013      	ands	r3, r2
 800335c:	2b03      	cmp	r3, #3
 800335e:	d01d      	beq.n	800339c <UART_SetConfig+0xdc>
 8003360:	d823      	bhi.n	80033aa <UART_SetConfig+0xea>
 8003362:	2b02      	cmp	r3, #2
 8003364:	d00c      	beq.n	8003380 <UART_SetConfig+0xc0>
 8003366:	d820      	bhi.n	80033aa <UART_SetConfig+0xea>
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <UART_SetConfig+0xb2>
 800336c:	2b01      	cmp	r3, #1
 800336e:	d00e      	beq.n	800338e <UART_SetConfig+0xce>
 8003370:	e01b      	b.n	80033aa <UART_SetConfig+0xea>
 8003372:	231b      	movs	r3, #27
 8003374:	2218      	movs	r2, #24
 8003376:	189b      	adds	r3, r3, r2
 8003378:	19db      	adds	r3, r3, r7
 800337a:	2201      	movs	r2, #1
 800337c:	701a      	strb	r2, [r3, #0]
 800337e:	e0b4      	b.n	80034ea <UART_SetConfig+0x22a>
 8003380:	231b      	movs	r3, #27
 8003382:	2218      	movs	r2, #24
 8003384:	189b      	adds	r3, r3, r2
 8003386:	19db      	adds	r3, r3, r7
 8003388:	2202      	movs	r2, #2
 800338a:	701a      	strb	r2, [r3, #0]
 800338c:	e0ad      	b.n	80034ea <UART_SetConfig+0x22a>
 800338e:	231b      	movs	r3, #27
 8003390:	2218      	movs	r2, #24
 8003392:	189b      	adds	r3, r3, r2
 8003394:	19db      	adds	r3, r3, r7
 8003396:	2204      	movs	r2, #4
 8003398:	701a      	strb	r2, [r3, #0]
 800339a:	e0a6      	b.n	80034ea <UART_SetConfig+0x22a>
 800339c:	231b      	movs	r3, #27
 800339e:	2218      	movs	r2, #24
 80033a0:	189b      	adds	r3, r3, r2
 80033a2:	19db      	adds	r3, r3, r7
 80033a4:	2208      	movs	r2, #8
 80033a6:	701a      	strb	r2, [r3, #0]
 80033a8:	e09f      	b.n	80034ea <UART_SetConfig+0x22a>
 80033aa:	231b      	movs	r3, #27
 80033ac:	2218      	movs	r2, #24
 80033ae:	189b      	adds	r3, r3, r2
 80033b0:	19db      	adds	r3, r3, r7
 80033b2:	2210      	movs	r2, #16
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	e098      	b.n	80034ea <UART_SetConfig+0x22a>
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a96      	ldr	r2, [pc, #600]	@ (8003618 <UART_SetConfig+0x358>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d131      	bne.n	8003426 <UART_SetConfig+0x166>
 80033c2:	4b94      	ldr	r3, [pc, #592]	@ (8003614 <UART_SetConfig+0x354>)
 80033c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c6:	220c      	movs	r2, #12
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b0c      	cmp	r3, #12
 80033cc:	d01d      	beq.n	800340a <UART_SetConfig+0x14a>
 80033ce:	d823      	bhi.n	8003418 <UART_SetConfig+0x158>
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d00c      	beq.n	80033ee <UART_SetConfig+0x12e>
 80033d4:	d820      	bhi.n	8003418 <UART_SetConfig+0x158>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <UART_SetConfig+0x120>
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d00e      	beq.n	80033fc <UART_SetConfig+0x13c>
 80033de:	e01b      	b.n	8003418 <UART_SetConfig+0x158>
 80033e0:	231b      	movs	r3, #27
 80033e2:	2218      	movs	r2, #24
 80033e4:	189b      	adds	r3, r3, r2
 80033e6:	19db      	adds	r3, r3, r7
 80033e8:	2200      	movs	r2, #0
 80033ea:	701a      	strb	r2, [r3, #0]
 80033ec:	e07d      	b.n	80034ea <UART_SetConfig+0x22a>
 80033ee:	231b      	movs	r3, #27
 80033f0:	2218      	movs	r2, #24
 80033f2:	189b      	adds	r3, r3, r2
 80033f4:	19db      	adds	r3, r3, r7
 80033f6:	2202      	movs	r2, #2
 80033f8:	701a      	strb	r2, [r3, #0]
 80033fa:	e076      	b.n	80034ea <UART_SetConfig+0x22a>
 80033fc:	231b      	movs	r3, #27
 80033fe:	2218      	movs	r2, #24
 8003400:	189b      	adds	r3, r3, r2
 8003402:	19db      	adds	r3, r3, r7
 8003404:	2204      	movs	r2, #4
 8003406:	701a      	strb	r2, [r3, #0]
 8003408:	e06f      	b.n	80034ea <UART_SetConfig+0x22a>
 800340a:	231b      	movs	r3, #27
 800340c:	2218      	movs	r2, #24
 800340e:	189b      	adds	r3, r3, r2
 8003410:	19db      	adds	r3, r3, r7
 8003412:	2208      	movs	r2, #8
 8003414:	701a      	strb	r2, [r3, #0]
 8003416:	e068      	b.n	80034ea <UART_SetConfig+0x22a>
 8003418:	231b      	movs	r3, #27
 800341a:	2218      	movs	r2, #24
 800341c:	189b      	adds	r3, r3, r2
 800341e:	19db      	adds	r3, r3, r7
 8003420:	2210      	movs	r2, #16
 8003422:	701a      	strb	r2, [r3, #0]
 8003424:	e061      	b.n	80034ea <UART_SetConfig+0x22a>
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a7c      	ldr	r2, [pc, #496]	@ (800361c <UART_SetConfig+0x35c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d106      	bne.n	800343e <UART_SetConfig+0x17e>
 8003430:	231b      	movs	r3, #27
 8003432:	2218      	movs	r2, #24
 8003434:	189b      	adds	r3, r3, r2
 8003436:	19db      	adds	r3, r3, r7
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
 800343c:	e055      	b.n	80034ea <UART_SetConfig+0x22a>
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a77      	ldr	r2, [pc, #476]	@ (8003620 <UART_SetConfig+0x360>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d106      	bne.n	8003456 <UART_SetConfig+0x196>
 8003448:	231b      	movs	r3, #27
 800344a:	2218      	movs	r2, #24
 800344c:	189b      	adds	r3, r3, r2
 800344e:	19db      	adds	r3, r3, r7
 8003450:	2200      	movs	r2, #0
 8003452:	701a      	strb	r2, [r3, #0]
 8003454:	e049      	b.n	80034ea <UART_SetConfig+0x22a>
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a6b      	ldr	r2, [pc, #428]	@ (8003608 <UART_SetConfig+0x348>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d13e      	bne.n	80034de <UART_SetConfig+0x21e>
 8003460:	4b6c      	ldr	r3, [pc, #432]	@ (8003614 <UART_SetConfig+0x354>)
 8003462:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003464:	23c0      	movs	r3, #192	@ 0xc0
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	4013      	ands	r3, r2
 800346a:	22c0      	movs	r2, #192	@ 0xc0
 800346c:	0112      	lsls	r2, r2, #4
 800346e:	4293      	cmp	r3, r2
 8003470:	d027      	beq.n	80034c2 <UART_SetConfig+0x202>
 8003472:	22c0      	movs	r2, #192	@ 0xc0
 8003474:	0112      	lsls	r2, r2, #4
 8003476:	4293      	cmp	r3, r2
 8003478:	d82a      	bhi.n	80034d0 <UART_SetConfig+0x210>
 800347a:	2280      	movs	r2, #128	@ 0x80
 800347c:	0112      	lsls	r2, r2, #4
 800347e:	4293      	cmp	r3, r2
 8003480:	d011      	beq.n	80034a6 <UART_SetConfig+0x1e6>
 8003482:	2280      	movs	r2, #128	@ 0x80
 8003484:	0112      	lsls	r2, r2, #4
 8003486:	4293      	cmp	r3, r2
 8003488:	d822      	bhi.n	80034d0 <UART_SetConfig+0x210>
 800348a:	2b00      	cmp	r3, #0
 800348c:	d004      	beq.n	8003498 <UART_SetConfig+0x1d8>
 800348e:	2280      	movs	r2, #128	@ 0x80
 8003490:	00d2      	lsls	r2, r2, #3
 8003492:	4293      	cmp	r3, r2
 8003494:	d00e      	beq.n	80034b4 <UART_SetConfig+0x1f4>
 8003496:	e01b      	b.n	80034d0 <UART_SetConfig+0x210>
 8003498:	231b      	movs	r3, #27
 800349a:	2218      	movs	r2, #24
 800349c:	189b      	adds	r3, r3, r2
 800349e:	19db      	adds	r3, r3, r7
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
 80034a4:	e021      	b.n	80034ea <UART_SetConfig+0x22a>
 80034a6:	231b      	movs	r3, #27
 80034a8:	2218      	movs	r2, #24
 80034aa:	189b      	adds	r3, r3, r2
 80034ac:	19db      	adds	r3, r3, r7
 80034ae:	2202      	movs	r2, #2
 80034b0:	701a      	strb	r2, [r3, #0]
 80034b2:	e01a      	b.n	80034ea <UART_SetConfig+0x22a>
 80034b4:	231b      	movs	r3, #27
 80034b6:	2218      	movs	r2, #24
 80034b8:	189b      	adds	r3, r3, r2
 80034ba:	19db      	adds	r3, r3, r7
 80034bc:	2204      	movs	r2, #4
 80034be:	701a      	strb	r2, [r3, #0]
 80034c0:	e013      	b.n	80034ea <UART_SetConfig+0x22a>
 80034c2:	231b      	movs	r3, #27
 80034c4:	2218      	movs	r2, #24
 80034c6:	189b      	adds	r3, r3, r2
 80034c8:	19db      	adds	r3, r3, r7
 80034ca:	2208      	movs	r2, #8
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	e00c      	b.n	80034ea <UART_SetConfig+0x22a>
 80034d0:	231b      	movs	r3, #27
 80034d2:	2218      	movs	r2, #24
 80034d4:	189b      	adds	r3, r3, r2
 80034d6:	19db      	adds	r3, r3, r7
 80034d8:	2210      	movs	r2, #16
 80034da:	701a      	strb	r2, [r3, #0]
 80034dc:	e005      	b.n	80034ea <UART_SetConfig+0x22a>
 80034de:	231b      	movs	r3, #27
 80034e0:	2218      	movs	r2, #24
 80034e2:	189b      	adds	r3, r3, r2
 80034e4:	19db      	adds	r3, r3, r7
 80034e6:	2210      	movs	r2, #16
 80034e8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a46      	ldr	r2, [pc, #280]	@ (8003608 <UART_SetConfig+0x348>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d000      	beq.n	80034f6 <UART_SetConfig+0x236>
 80034f4:	e09a      	b.n	800362c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034f6:	231b      	movs	r3, #27
 80034f8:	2218      	movs	r2, #24
 80034fa:	189b      	adds	r3, r3, r2
 80034fc:	19db      	adds	r3, r3, r7
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b08      	cmp	r3, #8
 8003502:	d01d      	beq.n	8003540 <UART_SetConfig+0x280>
 8003504:	dc20      	bgt.n	8003548 <UART_SetConfig+0x288>
 8003506:	2b04      	cmp	r3, #4
 8003508:	d015      	beq.n	8003536 <UART_SetConfig+0x276>
 800350a:	dc1d      	bgt.n	8003548 <UART_SetConfig+0x288>
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <UART_SetConfig+0x256>
 8003510:	2b02      	cmp	r3, #2
 8003512:	d005      	beq.n	8003520 <UART_SetConfig+0x260>
 8003514:	e018      	b.n	8003548 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003516:	f7ff fb2f 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 800351a:	0003      	movs	r3, r0
 800351c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800351e:	e01c      	b.n	800355a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003520:	4b3c      	ldr	r3, [pc, #240]	@ (8003614 <UART_SetConfig+0x354>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2210      	movs	r2, #16
 8003526:	4013      	ands	r3, r2
 8003528:	d002      	beq.n	8003530 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800352a:	4b3e      	ldr	r3, [pc, #248]	@ (8003624 <UART_SetConfig+0x364>)
 800352c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800352e:	e014      	b.n	800355a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003530:	4b3d      	ldr	r3, [pc, #244]	@ (8003628 <UART_SetConfig+0x368>)
 8003532:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003534:	e011      	b.n	800355a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003536:	f7ff fa8f 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 800353a:	0003      	movs	r3, r0
 800353c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800353e:	e00c      	b.n	800355a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003540:	2380      	movs	r3, #128	@ 0x80
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003546:	e008      	b.n	800355a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800354c:	231a      	movs	r3, #26
 800354e:	2218      	movs	r2, #24
 8003550:	189b      	adds	r3, r3, r2
 8003552:	19db      	adds	r3, r3, r7
 8003554:	2201      	movs	r2, #1
 8003556:	701a      	strb	r2, [r3, #0]
        break;
 8003558:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800355a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355c:	2b00      	cmp	r3, #0
 800355e:	d100      	bne.n	8003562 <UART_SetConfig+0x2a2>
 8003560:	e133      	b.n	80037ca <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	0013      	movs	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	189b      	adds	r3, r3, r2
 800356c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800356e:	429a      	cmp	r2, r3
 8003570:	d305      	bcc.n	800357e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003578:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800357a:	429a      	cmp	r2, r3
 800357c:	d906      	bls.n	800358c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800357e:	231a      	movs	r3, #26
 8003580:	2218      	movs	r2, #24
 8003582:	189b      	adds	r3, r3, r2
 8003584:	19db      	adds	r3, r3, r7
 8003586:	2201      	movs	r2, #1
 8003588:	701a      	strb	r2, [r3, #0]
 800358a:	e11e      	b.n	80037ca <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800358c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	6939      	ldr	r1, [r7, #16]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	000b      	movs	r3, r1
 800359a:	0e1b      	lsrs	r3, r3, #24
 800359c:	0010      	movs	r0, r2
 800359e:	0205      	lsls	r5, r0, #8
 80035a0:	431d      	orrs	r5, r3
 80035a2:	000b      	movs	r3, r1
 80035a4:	021c      	lsls	r4, r3, #8
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	085b      	lsrs	r3, r3, #1
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	68b8      	ldr	r0, [r7, #8]
 80035b4:	68f9      	ldr	r1, [r7, #12]
 80035b6:	1900      	adds	r0, r0, r4
 80035b8:	4169      	adcs	r1, r5
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	2300      	movs	r3, #0
 80035c2:	607b      	str	r3, [r7, #4]
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f7fc fe34 	bl	8000234 <__aeabi_uldivmod>
 80035cc:	0002      	movs	r2, r0
 80035ce:	000b      	movs	r3, r1
 80035d0:	0013      	movs	r3, r2
 80035d2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035d6:	23c0      	movs	r3, #192	@ 0xc0
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	429a      	cmp	r2, r3
 80035dc:	d309      	bcc.n	80035f2 <UART_SetConfig+0x332>
 80035de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035e0:	2380      	movs	r3, #128	@ 0x80
 80035e2:	035b      	lsls	r3, r3, #13
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d204      	bcs.n	80035f2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035ee:	60da      	str	r2, [r3, #12]
 80035f0:	e0eb      	b.n	80037ca <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80035f2:	231a      	movs	r3, #26
 80035f4:	2218      	movs	r2, #24
 80035f6:	189b      	adds	r3, r3, r2
 80035f8:	19db      	adds	r3, r3, r7
 80035fa:	2201      	movs	r2, #1
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	e0e4      	b.n	80037ca <UART_SetConfig+0x50a>
 8003600:	efff69f3 	.word	0xefff69f3
 8003604:	ffffcfff 	.word	0xffffcfff
 8003608:	40004800 	.word	0x40004800
 800360c:	fffff4ff 	.word	0xfffff4ff
 8003610:	40013800 	.word	0x40013800
 8003614:	40021000 	.word	0x40021000
 8003618:	40004400 	.word	0x40004400
 800361c:	40004c00 	.word	0x40004c00
 8003620:	40005000 	.word	0x40005000
 8003624:	003d0900 	.word	0x003d0900
 8003628:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	69da      	ldr	r2, [r3, #28]
 8003630:	2380      	movs	r3, #128	@ 0x80
 8003632:	021b      	lsls	r3, r3, #8
 8003634:	429a      	cmp	r2, r3
 8003636:	d000      	beq.n	800363a <UART_SetConfig+0x37a>
 8003638:	e070      	b.n	800371c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800363a:	231b      	movs	r3, #27
 800363c:	2218      	movs	r2, #24
 800363e:	189b      	adds	r3, r3, r2
 8003640:	19db      	adds	r3, r3, r7
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b08      	cmp	r3, #8
 8003646:	d822      	bhi.n	800368e <UART_SetConfig+0x3ce>
 8003648:	009a      	lsls	r2, r3, #2
 800364a:	4b67      	ldr	r3, [pc, #412]	@ (80037e8 <UART_SetConfig+0x528>)
 800364c:	18d3      	adds	r3, r2, r3
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003652:	f7ff fa91 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 8003656:	0003      	movs	r3, r0
 8003658:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800365a:	e021      	b.n	80036a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800365c:	f7ff faa2 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 8003660:	0003      	movs	r3, r0
 8003662:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003664:	e01c      	b.n	80036a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003666:	4b61      	ldr	r3, [pc, #388]	@ (80037ec <UART_SetConfig+0x52c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2210      	movs	r2, #16
 800366c:	4013      	ands	r3, r2
 800366e:	d002      	beq.n	8003676 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003670:	4b5f      	ldr	r3, [pc, #380]	@ (80037f0 <UART_SetConfig+0x530>)
 8003672:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003674:	e014      	b.n	80036a0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8003676:	4b5f      	ldr	r3, [pc, #380]	@ (80037f4 <UART_SetConfig+0x534>)
 8003678:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800367a:	e011      	b.n	80036a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800367c:	f7ff f9ec 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8003680:	0003      	movs	r3, r0
 8003682:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003684:	e00c      	b.n	80036a0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003686:	2380      	movs	r3, #128	@ 0x80
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800368c:	e008      	b.n	80036a0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003692:	231a      	movs	r3, #26
 8003694:	2218      	movs	r2, #24
 8003696:	189b      	adds	r3, r3, r2
 8003698:	19db      	adds	r3, r3, r7
 800369a:	2201      	movs	r2, #1
 800369c:	701a      	strb	r2, [r3, #0]
        break;
 800369e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d100      	bne.n	80036a8 <UART_SetConfig+0x3e8>
 80036a6:	e090      	b.n	80037ca <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036aa:	005a      	lsls	r2, r3, #1
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	085b      	lsrs	r3, r3, #1
 80036b2:	18d2      	adds	r2, r2, r3
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	0019      	movs	r1, r3
 80036ba:	0010      	movs	r0, r2
 80036bc:	f7fc fd2e 	bl	800011c <__udivsi3>
 80036c0:	0003      	movs	r3, r0
 80036c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c6:	2b0f      	cmp	r3, #15
 80036c8:	d921      	bls.n	800370e <UART_SetConfig+0x44e>
 80036ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036cc:	2380      	movs	r3, #128	@ 0x80
 80036ce:	025b      	lsls	r3, r3, #9
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d21c      	bcs.n	800370e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	200e      	movs	r0, #14
 80036da:	2418      	movs	r4, #24
 80036dc:	1903      	adds	r3, r0, r4
 80036de:	19db      	adds	r3, r3, r7
 80036e0:	210f      	movs	r1, #15
 80036e2:	438a      	bics	r2, r1
 80036e4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2207      	movs	r2, #7
 80036ee:	4013      	ands	r3, r2
 80036f0:	b299      	uxth	r1, r3
 80036f2:	1903      	adds	r3, r0, r4
 80036f4:	19db      	adds	r3, r3, r7
 80036f6:	1902      	adds	r2, r0, r4
 80036f8:	19d2      	adds	r2, r2, r7
 80036fa:	8812      	ldrh	r2, [r2, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	1902      	adds	r2, r0, r4
 8003706:	19d2      	adds	r2, r2, r7
 8003708:	8812      	ldrh	r2, [r2, #0]
 800370a:	60da      	str	r2, [r3, #12]
 800370c:	e05d      	b.n	80037ca <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800370e:	231a      	movs	r3, #26
 8003710:	2218      	movs	r2, #24
 8003712:	189b      	adds	r3, r3, r2
 8003714:	19db      	adds	r3, r3, r7
 8003716:	2201      	movs	r2, #1
 8003718:	701a      	strb	r2, [r3, #0]
 800371a:	e056      	b.n	80037ca <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800371c:	231b      	movs	r3, #27
 800371e:	2218      	movs	r2, #24
 8003720:	189b      	adds	r3, r3, r2
 8003722:	19db      	adds	r3, r3, r7
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b08      	cmp	r3, #8
 8003728:	d822      	bhi.n	8003770 <UART_SetConfig+0x4b0>
 800372a:	009a      	lsls	r2, r3, #2
 800372c:	4b32      	ldr	r3, [pc, #200]	@ (80037f8 <UART_SetConfig+0x538>)
 800372e:	18d3      	adds	r3, r2, r3
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003734:	f7ff fa20 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 8003738:	0003      	movs	r3, r0
 800373a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800373c:	e021      	b.n	8003782 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800373e:	f7ff fa31 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 8003742:	0003      	movs	r3, r0
 8003744:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003746:	e01c      	b.n	8003782 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003748:	4b28      	ldr	r3, [pc, #160]	@ (80037ec <UART_SetConfig+0x52c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2210      	movs	r2, #16
 800374e:	4013      	ands	r3, r2
 8003750:	d002      	beq.n	8003758 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003752:	4b27      	ldr	r3, [pc, #156]	@ (80037f0 <UART_SetConfig+0x530>)
 8003754:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003756:	e014      	b.n	8003782 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8003758:	4b26      	ldr	r3, [pc, #152]	@ (80037f4 <UART_SetConfig+0x534>)
 800375a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800375c:	e011      	b.n	8003782 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800375e:	f7ff f97b 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8003762:	0003      	movs	r3, r0
 8003764:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003766:	e00c      	b.n	8003782 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003768:	2380      	movs	r3, #128	@ 0x80
 800376a:	021b      	lsls	r3, r3, #8
 800376c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800376e:	e008      	b.n	8003782 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003774:	231a      	movs	r3, #26
 8003776:	2218      	movs	r2, #24
 8003778:	189b      	adds	r3, r3, r2
 800377a:	19db      	adds	r3, r3, r7
 800377c:	2201      	movs	r2, #1
 800377e:	701a      	strb	r2, [r3, #0]
        break;
 8003780:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003784:	2b00      	cmp	r3, #0
 8003786:	d020      	beq.n	80037ca <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	085a      	lsrs	r2, r3, #1
 800378e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003790:	18d2      	adds	r2, r2, r3
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	0019      	movs	r1, r3
 8003798:	0010      	movs	r0, r2
 800379a:	f7fc fcbf 	bl	800011c <__udivsi3>
 800379e:	0003      	movs	r3, r0
 80037a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a4:	2b0f      	cmp	r3, #15
 80037a6:	d90a      	bls.n	80037be <UART_SetConfig+0x4fe>
 80037a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037aa:	2380      	movs	r3, #128	@ 0x80
 80037ac:	025b      	lsls	r3, r3, #9
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d205      	bcs.n	80037be <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	60da      	str	r2, [r3, #12]
 80037bc:	e005      	b.n	80037ca <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80037be:	231a      	movs	r3, #26
 80037c0:	2218      	movs	r2, #24
 80037c2:	189b      	adds	r3, r3, r2
 80037c4:	19db      	adds	r3, r3, r7
 80037c6:	2201      	movs	r2, #1
 80037c8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	2200      	movs	r2, #0
 80037ce:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	2200      	movs	r2, #0
 80037d4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80037d6:	231a      	movs	r3, #26
 80037d8:	2218      	movs	r2, #24
 80037da:	189b      	adds	r3, r3, r2
 80037dc:	19db      	adds	r3, r3, r7
 80037de:	781b      	ldrb	r3, [r3, #0]
}
 80037e0:	0018      	movs	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b00e      	add	sp, #56	@ 0x38
 80037e6:	bdb0      	pop	{r4, r5, r7, pc}
 80037e8:	080054a8 	.word	0x080054a8
 80037ec:	40021000 	.word	0x40021000
 80037f0:	003d0900 	.word	0x003d0900
 80037f4:	00f42400 	.word	0x00f42400
 80037f8:	080054cc 	.word	0x080054cc

080037fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	2208      	movs	r2, #8
 800380a:	4013      	ands	r3, r2
 800380c:	d00b      	beq.n	8003826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4a4a      	ldr	r2, [pc, #296]	@ (8003940 <UART_AdvFeatureConfig+0x144>)
 8003816:	4013      	ands	r3, r2
 8003818:	0019      	movs	r1, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382a:	2201      	movs	r2, #1
 800382c:	4013      	ands	r3, r2
 800382e:	d00b      	beq.n	8003848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4a43      	ldr	r2, [pc, #268]	@ (8003944 <UART_AdvFeatureConfig+0x148>)
 8003838:	4013      	ands	r3, r2
 800383a:	0019      	movs	r1, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	2202      	movs	r2, #2
 800384e:	4013      	ands	r3, r2
 8003850:	d00b      	beq.n	800386a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	4a3b      	ldr	r2, [pc, #236]	@ (8003948 <UART_AdvFeatureConfig+0x14c>)
 800385a:	4013      	ands	r3, r2
 800385c:	0019      	movs	r1, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386e:	2204      	movs	r2, #4
 8003870:	4013      	ands	r3, r2
 8003872:	d00b      	beq.n	800388c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	4a34      	ldr	r2, [pc, #208]	@ (800394c <UART_AdvFeatureConfig+0x150>)
 800387c:	4013      	ands	r3, r2
 800387e:	0019      	movs	r1, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	2210      	movs	r2, #16
 8003892:	4013      	ands	r3, r2
 8003894:	d00b      	beq.n	80038ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	4a2c      	ldr	r2, [pc, #176]	@ (8003950 <UART_AdvFeatureConfig+0x154>)
 800389e:	4013      	ands	r3, r2
 80038a0:	0019      	movs	r1, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b2:	2220      	movs	r2, #32
 80038b4:	4013      	ands	r3, r2
 80038b6:	d00b      	beq.n	80038d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	4a25      	ldr	r2, [pc, #148]	@ (8003954 <UART_AdvFeatureConfig+0x158>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	0019      	movs	r1, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d4:	2240      	movs	r2, #64	@ 0x40
 80038d6:	4013      	ands	r3, r2
 80038d8:	d01d      	beq.n	8003916 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003958 <UART_AdvFeatureConfig+0x15c>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	0019      	movs	r1, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038f6:	2380      	movs	r3, #128	@ 0x80
 80038f8:	035b      	lsls	r3, r3, #13
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d10b      	bne.n	8003916 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	4a15      	ldr	r2, [pc, #84]	@ (800395c <UART_AdvFeatureConfig+0x160>)
 8003906:	4013      	ands	r3, r2
 8003908:	0019      	movs	r1, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391a:	2280      	movs	r2, #128	@ 0x80
 800391c:	4013      	ands	r3, r2
 800391e:	d00b      	beq.n	8003938 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	4a0e      	ldr	r2, [pc, #56]	@ (8003960 <UART_AdvFeatureConfig+0x164>)
 8003928:	4013      	ands	r3, r2
 800392a:	0019      	movs	r1, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	605a      	str	r2, [r3, #4]
  }
}
 8003938:	46c0      	nop			@ (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b002      	add	sp, #8
 800393e:	bd80      	pop	{r7, pc}
 8003940:	ffff7fff 	.word	0xffff7fff
 8003944:	fffdffff 	.word	0xfffdffff
 8003948:	fffeffff 	.word	0xfffeffff
 800394c:	fffbffff 	.word	0xfffbffff
 8003950:	ffffefff 	.word	0xffffefff
 8003954:	ffffdfff 	.word	0xffffdfff
 8003958:	ffefffff 	.word	0xffefffff
 800395c:	ff9fffff 	.word	0xff9fffff
 8003960:	fff7ffff 	.word	0xfff7ffff

08003964 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b092      	sub	sp, #72	@ 0x48
 8003968:	af02      	add	r7, sp, #8
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2284      	movs	r2, #132	@ 0x84
 8003970:	2100      	movs	r1, #0
 8003972:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003974:	f7fd fd04 	bl	8001380 <HAL_GetTick>
 8003978:	0003      	movs	r3, r0
 800397a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2208      	movs	r2, #8
 8003984:	4013      	ands	r3, r2
 8003986:	2b08      	cmp	r3, #8
 8003988:	d12c      	bne.n	80039e4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800398a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800398c:	2280      	movs	r2, #128	@ 0x80
 800398e:	0391      	lsls	r1, r2, #14
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	4a46      	ldr	r2, [pc, #280]	@ (8003aac <UART_CheckIdleState+0x148>)
 8003994:	9200      	str	r2, [sp, #0]
 8003996:	2200      	movs	r2, #0
 8003998:	f000 f88c 	bl	8003ab4 <UART_WaitOnFlagUntilTimeout>
 800399c:	1e03      	subs	r3, r0, #0
 800399e:	d021      	beq.n	80039e4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a0:	f3ef 8310 	mrs	r3, PRIMASK
 80039a4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039aa:	2301      	movs	r3, #1
 80039ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b0:	f383 8810 	msr	PRIMASK, r3
}
 80039b4:	46c0      	nop			@ (mov r8, r8)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2180      	movs	r1, #128	@ 0x80
 80039c2:	438a      	bics	r2, r1
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039cc:	f383 8810 	msr	PRIMASK, r3
}
 80039d0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2220      	movs	r2, #32
 80039d6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2278      	movs	r2, #120	@ 0x78
 80039dc:	2100      	movs	r1, #0
 80039de:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e05f      	b.n	8003aa4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2204      	movs	r2, #4
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d146      	bne.n	8003a80 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039f4:	2280      	movs	r2, #128	@ 0x80
 80039f6:	03d1      	lsls	r1, r2, #15
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	4a2c      	ldr	r2, [pc, #176]	@ (8003aac <UART_CheckIdleState+0x148>)
 80039fc:	9200      	str	r2, [sp, #0]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f000 f858 	bl	8003ab4 <UART_WaitOnFlagUntilTimeout>
 8003a04:	1e03      	subs	r3, r0, #0
 8003a06:	d03b      	beq.n	8003a80 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a08:	f3ef 8310 	mrs	r3, PRIMASK
 8003a0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a12:	2301      	movs	r3, #1
 8003a14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f383 8810 	msr	PRIMASK, r3
}
 8003a1c:	46c0      	nop			@ (mov r8, r8)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4921      	ldr	r1, [pc, #132]	@ (8003ab0 <UART_CheckIdleState+0x14c>)
 8003a2a:	400a      	ands	r2, r1
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f383 8810 	msr	PRIMASK, r3
}
 8003a38:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a3e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a40:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a42:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a44:	2301      	movs	r3, #1
 8003a46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f383 8810 	msr	PRIMASK, r3
}
 8003a4e:	46c0      	nop			@ (mov r8, r8)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	438a      	bics	r2, r1
 8003a5e:	609a      	str	r2, [r3, #8]
 8003a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a62:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	f383 8810 	msr	PRIMASK, r3
}
 8003a6a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2280      	movs	r2, #128	@ 0x80
 8003a70:	2120      	movs	r1, #32
 8003a72:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2278      	movs	r2, #120	@ 0x78
 8003a78:	2100      	movs	r1, #0
 8003a7a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e011      	b.n	8003aa4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2220      	movs	r2, #32
 8003a84:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2280      	movs	r2, #128	@ 0x80
 8003a8a:	2120      	movs	r1, #32
 8003a8c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2278      	movs	r2, #120	@ 0x78
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b010      	add	sp, #64	@ 0x40
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	01ffffff 	.word	0x01ffffff
 8003ab0:	fffffedf 	.word	0xfffffedf

08003ab4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	1dfb      	adds	r3, r7, #7
 8003ac2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac4:	e051      	b.n	8003b6a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	d04e      	beq.n	8003b6a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003acc:	f7fd fc58 	bl	8001380 <HAL_GetTick>
 8003ad0:	0002      	movs	r2, r0
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d302      	bcc.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e051      	b.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2204      	movs	r2, #4
 8003aee:	4013      	ands	r3, r2
 8003af0:	d03b      	beq.n	8003b6a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b80      	cmp	r3, #128	@ 0x80
 8003af6:	d038      	beq.n	8003b6a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2b40      	cmp	r3, #64	@ 0x40
 8003afc:	d035      	beq.n	8003b6a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	2208      	movs	r2, #8
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d111      	bne.n	8003b30 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2208      	movs	r2, #8
 8003b12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	0018      	movs	r0, r3
 8003b18:	f000 f83c 	bl	8003b94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2284      	movs	r2, #132	@ 0x84
 8003b20:	2108      	movs	r1, #8
 8003b22:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2278      	movs	r2, #120	@ 0x78
 8003b28:	2100      	movs	r1, #0
 8003b2a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e02c      	b.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69da      	ldr	r2, [r3, #28]
 8003b36:	2380      	movs	r3, #128	@ 0x80
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	401a      	ands	r2, r3
 8003b3c:	2380      	movs	r3, #128	@ 0x80
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d112      	bne.n	8003b6a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2280      	movs	r2, #128	@ 0x80
 8003b4a:	0112      	lsls	r2, r2, #4
 8003b4c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	0018      	movs	r0, r3
 8003b52:	f000 f81f 	bl	8003b94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2284      	movs	r2, #132	@ 0x84
 8003b5a:	2120      	movs	r1, #32
 8003b5c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2278      	movs	r2, #120	@ 0x78
 8003b62:	2100      	movs	r1, #0
 8003b64:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e00f      	b.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	4013      	ands	r3, r2
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	425a      	negs	r2, r3
 8003b7a:	4153      	adcs	r3, r2
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	001a      	movs	r2, r3
 8003b80:	1dfb      	adds	r3, r7, #7
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d09e      	beq.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b004      	add	sp, #16
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08e      	sub	sp, #56	@ 0x38
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8003ba0:	617b      	str	r3, [r7, #20]
  return(result);
 8003ba2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	f383 8810 	msr	PRIMASK, r3
}
 8003bb0:	46c0      	nop			@ (mov r8, r8)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4926      	ldr	r1, [pc, #152]	@ (8003c58 <UART_EndRxTransfer+0xc4>)
 8003bbe:	400a      	ands	r2, r1
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	f383 8810 	msr	PRIMASK, r3
}
 8003bcc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bce:	f3ef 8310 	mrs	r3, PRIMASK
 8003bd2:	623b      	str	r3, [r7, #32]
  return(result);
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bd8:	2301      	movs	r3, #1
 8003bda:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bde:	f383 8810 	msr	PRIMASK, r3
}
 8003be2:	46c0      	nop			@ (mov r8, r8)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2101      	movs	r1, #1
 8003bf0:	438a      	bics	r2, r1
 8003bf2:	609a      	str	r2, [r3, #8]
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfa:	f383 8810 	msr	PRIMASK, r3
}
 8003bfe:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d118      	bne.n	8003c3a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c08:	f3ef 8310 	mrs	r3, PRIMASK
 8003c0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c0e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c12:	2301      	movs	r3, #1
 8003c14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f383 8810 	msr	PRIMASK, r3
}
 8003c1c:	46c0      	nop			@ (mov r8, r8)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2110      	movs	r1, #16
 8003c2a:	438a      	bics	r2, r1
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f383 8810 	msr	PRIMASK, r3
}
 8003c38:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2280      	movs	r2, #128	@ 0x80
 8003c3e:	2120      	movs	r1, #32
 8003c40:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003c4e:	46c0      	nop			@ (mov r8, r8)
 8003c50:	46bd      	mov	sp, r7
 8003c52:	b00e      	add	sp, #56	@ 0x38
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	46c0      	nop			@ (mov r8, r8)
 8003c58:	fffffedf 	.word	0xfffffedf

08003c5c <std>:
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	b510      	push	{r4, lr}
 8003c60:	0004      	movs	r4, r0
 8003c62:	6003      	str	r3, [r0, #0]
 8003c64:	6043      	str	r3, [r0, #4]
 8003c66:	6083      	str	r3, [r0, #8]
 8003c68:	8181      	strh	r1, [r0, #12]
 8003c6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c6c:	81c2      	strh	r2, [r0, #14]
 8003c6e:	6103      	str	r3, [r0, #16]
 8003c70:	6143      	str	r3, [r0, #20]
 8003c72:	6183      	str	r3, [r0, #24]
 8003c74:	0019      	movs	r1, r3
 8003c76:	2208      	movs	r2, #8
 8003c78:	305c      	adds	r0, #92	@ 0x5c
 8003c7a:	f000 fa4f 	bl	800411c <memset>
 8003c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003cac <std+0x50>)
 8003c80:	6224      	str	r4, [r4, #32]
 8003c82:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c84:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb0 <std+0x54>)
 8003c86:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c88:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb4 <std+0x58>)
 8003c8a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb8 <std+0x5c>)
 8003c8e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c90:	4b0a      	ldr	r3, [pc, #40]	@ (8003cbc <std+0x60>)
 8003c92:	429c      	cmp	r4, r3
 8003c94:	d005      	beq.n	8003ca2 <std+0x46>
 8003c96:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc0 <std+0x64>)
 8003c98:	429c      	cmp	r4, r3
 8003c9a:	d002      	beq.n	8003ca2 <std+0x46>
 8003c9c:	4b09      	ldr	r3, [pc, #36]	@ (8003cc4 <std+0x68>)
 8003c9e:	429c      	cmp	r4, r3
 8003ca0:	d103      	bne.n	8003caa <std+0x4e>
 8003ca2:	0020      	movs	r0, r4
 8003ca4:	3058      	adds	r0, #88	@ 0x58
 8003ca6:	f000 fab9 	bl	800421c <__retarget_lock_init_recursive>
 8003caa:	bd10      	pop	{r4, pc}
 8003cac:	08003f45 	.word	0x08003f45
 8003cb0:	08003f6d 	.word	0x08003f6d
 8003cb4:	08003fa5 	.word	0x08003fa5
 8003cb8:	08003fd1 	.word	0x08003fd1
 8003cbc:	200002a4 	.word	0x200002a4
 8003cc0:	2000030c 	.word	0x2000030c
 8003cc4:	20000374 	.word	0x20000374

08003cc8 <stdio_exit_handler>:
 8003cc8:	b510      	push	{r4, lr}
 8003cca:	4a03      	ldr	r2, [pc, #12]	@ (8003cd8 <stdio_exit_handler+0x10>)
 8003ccc:	4903      	ldr	r1, [pc, #12]	@ (8003cdc <stdio_exit_handler+0x14>)
 8003cce:	4804      	ldr	r0, [pc, #16]	@ (8003ce0 <stdio_exit_handler+0x18>)
 8003cd0:	f000 f86c 	bl	8003dac <_fwalk_sglue>
 8003cd4:	bd10      	pop	{r4, pc}
 8003cd6:	46c0      	nop			@ (mov r8, r8)
 8003cd8:	2000000c 	.word	0x2000000c
 8003cdc:	08004d75 	.word	0x08004d75
 8003ce0:	2000001c 	.word	0x2000001c

08003ce4 <cleanup_stdio>:
 8003ce4:	6841      	ldr	r1, [r0, #4]
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <cleanup_stdio+0x30>)
 8003ce8:	b510      	push	{r4, lr}
 8003cea:	0004      	movs	r4, r0
 8003cec:	4299      	cmp	r1, r3
 8003cee:	d001      	beq.n	8003cf4 <cleanup_stdio+0x10>
 8003cf0:	f001 f840 	bl	8004d74 <_fflush_r>
 8003cf4:	68a1      	ldr	r1, [r4, #8]
 8003cf6:	4b08      	ldr	r3, [pc, #32]	@ (8003d18 <cleanup_stdio+0x34>)
 8003cf8:	4299      	cmp	r1, r3
 8003cfa:	d002      	beq.n	8003d02 <cleanup_stdio+0x1e>
 8003cfc:	0020      	movs	r0, r4
 8003cfe:	f001 f839 	bl	8004d74 <_fflush_r>
 8003d02:	68e1      	ldr	r1, [r4, #12]
 8003d04:	4b05      	ldr	r3, [pc, #20]	@ (8003d1c <cleanup_stdio+0x38>)
 8003d06:	4299      	cmp	r1, r3
 8003d08:	d002      	beq.n	8003d10 <cleanup_stdio+0x2c>
 8003d0a:	0020      	movs	r0, r4
 8003d0c:	f001 f832 	bl	8004d74 <_fflush_r>
 8003d10:	bd10      	pop	{r4, pc}
 8003d12:	46c0      	nop			@ (mov r8, r8)
 8003d14:	200002a4 	.word	0x200002a4
 8003d18:	2000030c 	.word	0x2000030c
 8003d1c:	20000374 	.word	0x20000374

08003d20 <global_stdio_init.part.0>:
 8003d20:	b510      	push	{r4, lr}
 8003d22:	4b09      	ldr	r3, [pc, #36]	@ (8003d48 <global_stdio_init.part.0+0x28>)
 8003d24:	4a09      	ldr	r2, [pc, #36]	@ (8003d4c <global_stdio_init.part.0+0x2c>)
 8003d26:	2104      	movs	r1, #4
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	4809      	ldr	r0, [pc, #36]	@ (8003d50 <global_stdio_init.part.0+0x30>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f7ff ff95 	bl	8003c5c <std>
 8003d32:	2201      	movs	r2, #1
 8003d34:	2109      	movs	r1, #9
 8003d36:	4807      	ldr	r0, [pc, #28]	@ (8003d54 <global_stdio_init.part.0+0x34>)
 8003d38:	f7ff ff90 	bl	8003c5c <std>
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	2112      	movs	r1, #18
 8003d40:	4805      	ldr	r0, [pc, #20]	@ (8003d58 <global_stdio_init.part.0+0x38>)
 8003d42:	f7ff ff8b 	bl	8003c5c <std>
 8003d46:	bd10      	pop	{r4, pc}
 8003d48:	200003dc 	.word	0x200003dc
 8003d4c:	08003cc9 	.word	0x08003cc9
 8003d50:	200002a4 	.word	0x200002a4
 8003d54:	2000030c 	.word	0x2000030c
 8003d58:	20000374 	.word	0x20000374

08003d5c <__sfp_lock_acquire>:
 8003d5c:	b510      	push	{r4, lr}
 8003d5e:	4802      	ldr	r0, [pc, #8]	@ (8003d68 <__sfp_lock_acquire+0xc>)
 8003d60:	f000 fa5d 	bl	800421e <__retarget_lock_acquire_recursive>
 8003d64:	bd10      	pop	{r4, pc}
 8003d66:	46c0      	nop			@ (mov r8, r8)
 8003d68:	200003e5 	.word	0x200003e5

08003d6c <__sfp_lock_release>:
 8003d6c:	b510      	push	{r4, lr}
 8003d6e:	4802      	ldr	r0, [pc, #8]	@ (8003d78 <__sfp_lock_release+0xc>)
 8003d70:	f000 fa56 	bl	8004220 <__retarget_lock_release_recursive>
 8003d74:	bd10      	pop	{r4, pc}
 8003d76:	46c0      	nop			@ (mov r8, r8)
 8003d78:	200003e5 	.word	0x200003e5

08003d7c <__sinit>:
 8003d7c:	b510      	push	{r4, lr}
 8003d7e:	0004      	movs	r4, r0
 8003d80:	f7ff ffec 	bl	8003d5c <__sfp_lock_acquire>
 8003d84:	6a23      	ldr	r3, [r4, #32]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <__sinit+0x14>
 8003d8a:	f7ff ffef 	bl	8003d6c <__sfp_lock_release>
 8003d8e:	bd10      	pop	{r4, pc}
 8003d90:	4b04      	ldr	r3, [pc, #16]	@ (8003da4 <__sinit+0x28>)
 8003d92:	6223      	str	r3, [r4, #32]
 8003d94:	4b04      	ldr	r3, [pc, #16]	@ (8003da8 <__sinit+0x2c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f6      	bne.n	8003d8a <__sinit+0xe>
 8003d9c:	f7ff ffc0 	bl	8003d20 <global_stdio_init.part.0>
 8003da0:	e7f3      	b.n	8003d8a <__sinit+0xe>
 8003da2:	46c0      	nop			@ (mov r8, r8)
 8003da4:	08003ce5 	.word	0x08003ce5
 8003da8:	200003dc 	.word	0x200003dc

08003dac <_fwalk_sglue>:
 8003dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dae:	0014      	movs	r4, r2
 8003db0:	2600      	movs	r6, #0
 8003db2:	9000      	str	r0, [sp, #0]
 8003db4:	9101      	str	r1, [sp, #4]
 8003db6:	68a5      	ldr	r5, [r4, #8]
 8003db8:	6867      	ldr	r7, [r4, #4]
 8003dba:	3f01      	subs	r7, #1
 8003dbc:	d504      	bpl.n	8003dc8 <_fwalk_sglue+0x1c>
 8003dbe:	6824      	ldr	r4, [r4, #0]
 8003dc0:	2c00      	cmp	r4, #0
 8003dc2:	d1f8      	bne.n	8003db6 <_fwalk_sglue+0xa>
 8003dc4:	0030      	movs	r0, r6
 8003dc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003dc8:	89ab      	ldrh	r3, [r5, #12]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d908      	bls.n	8003de0 <_fwalk_sglue+0x34>
 8003dce:	220e      	movs	r2, #14
 8003dd0:	5eab      	ldrsh	r3, [r5, r2]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	d004      	beq.n	8003de0 <_fwalk_sglue+0x34>
 8003dd6:	0029      	movs	r1, r5
 8003dd8:	9800      	ldr	r0, [sp, #0]
 8003dda:	9b01      	ldr	r3, [sp, #4]
 8003ddc:	4798      	blx	r3
 8003dde:	4306      	orrs	r6, r0
 8003de0:	3568      	adds	r5, #104	@ 0x68
 8003de2:	e7ea      	b.n	8003dba <_fwalk_sglue+0xe>

08003de4 <iprintf>:
 8003de4:	b40f      	push	{r0, r1, r2, r3}
 8003de6:	b507      	push	{r0, r1, r2, lr}
 8003de8:	4905      	ldr	r1, [pc, #20]	@ (8003e00 <iprintf+0x1c>)
 8003dea:	ab04      	add	r3, sp, #16
 8003dec:	6808      	ldr	r0, [r1, #0]
 8003dee:	cb04      	ldmia	r3!, {r2}
 8003df0:	6881      	ldr	r1, [r0, #8]
 8003df2:	9301      	str	r3, [sp, #4]
 8003df4:	f000 fca0 	bl	8004738 <_vfiprintf_r>
 8003df8:	b003      	add	sp, #12
 8003dfa:	bc08      	pop	{r3}
 8003dfc:	b004      	add	sp, #16
 8003dfe:	4718      	bx	r3
 8003e00:	20000018 	.word	0x20000018

08003e04 <putchar>:
 8003e04:	b510      	push	{r4, lr}
 8003e06:	4b03      	ldr	r3, [pc, #12]	@ (8003e14 <putchar+0x10>)
 8003e08:	0001      	movs	r1, r0
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	6882      	ldr	r2, [r0, #8]
 8003e0e:	f001 f848 	bl	8004ea2 <_putc_r>
 8003e12:	bd10      	pop	{r4, pc}
 8003e14:	20000018 	.word	0x20000018

08003e18 <_puts_r>:
 8003e18:	6a03      	ldr	r3, [r0, #32]
 8003e1a:	b570      	push	{r4, r5, r6, lr}
 8003e1c:	0005      	movs	r5, r0
 8003e1e:	000e      	movs	r6, r1
 8003e20:	6884      	ldr	r4, [r0, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <_puts_r+0x12>
 8003e26:	f7ff ffa9 	bl	8003d7c <__sinit>
 8003e2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e2c:	07db      	lsls	r3, r3, #31
 8003e2e:	d405      	bmi.n	8003e3c <_puts_r+0x24>
 8003e30:	89a3      	ldrh	r3, [r4, #12]
 8003e32:	059b      	lsls	r3, r3, #22
 8003e34:	d402      	bmi.n	8003e3c <_puts_r+0x24>
 8003e36:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e38:	f000 f9f1 	bl	800421e <__retarget_lock_acquire_recursive>
 8003e3c:	89a3      	ldrh	r3, [r4, #12]
 8003e3e:	071b      	lsls	r3, r3, #28
 8003e40:	d502      	bpl.n	8003e48 <_puts_r+0x30>
 8003e42:	6923      	ldr	r3, [r4, #16]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d11f      	bne.n	8003e88 <_puts_r+0x70>
 8003e48:	0021      	movs	r1, r4
 8003e4a:	0028      	movs	r0, r5
 8003e4c:	f000 f908 	bl	8004060 <__swsetup_r>
 8003e50:	2800      	cmp	r0, #0
 8003e52:	d019      	beq.n	8003e88 <_puts_r+0x70>
 8003e54:	2501      	movs	r5, #1
 8003e56:	426d      	negs	r5, r5
 8003e58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e5a:	07db      	lsls	r3, r3, #31
 8003e5c:	d405      	bmi.n	8003e6a <_puts_r+0x52>
 8003e5e:	89a3      	ldrh	r3, [r4, #12]
 8003e60:	059b      	lsls	r3, r3, #22
 8003e62:	d402      	bmi.n	8003e6a <_puts_r+0x52>
 8003e64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e66:	f000 f9db 	bl	8004220 <__retarget_lock_release_recursive>
 8003e6a:	0028      	movs	r0, r5
 8003e6c:	bd70      	pop	{r4, r5, r6, pc}
 8003e6e:	3601      	adds	r6, #1
 8003e70:	60a3      	str	r3, [r4, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	da04      	bge.n	8003e80 <_puts_r+0x68>
 8003e76:	69a2      	ldr	r2, [r4, #24]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	dc16      	bgt.n	8003eaa <_puts_r+0x92>
 8003e7c:	290a      	cmp	r1, #10
 8003e7e:	d014      	beq.n	8003eaa <_puts_r+0x92>
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	6022      	str	r2, [r4, #0]
 8003e86:	7019      	strb	r1, [r3, #0]
 8003e88:	68a3      	ldr	r3, [r4, #8]
 8003e8a:	7831      	ldrb	r1, [r6, #0]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	2900      	cmp	r1, #0
 8003e90:	d1ed      	bne.n	8003e6e <_puts_r+0x56>
 8003e92:	60a3      	str	r3, [r4, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	da0f      	bge.n	8003eb8 <_puts_r+0xa0>
 8003e98:	0022      	movs	r2, r4
 8003e9a:	0028      	movs	r0, r5
 8003e9c:	310a      	adds	r1, #10
 8003e9e:	f000 f89d 	bl	8003fdc <__swbuf_r>
 8003ea2:	3001      	adds	r0, #1
 8003ea4:	d0d6      	beq.n	8003e54 <_puts_r+0x3c>
 8003ea6:	250a      	movs	r5, #10
 8003ea8:	e7d6      	b.n	8003e58 <_puts_r+0x40>
 8003eaa:	0022      	movs	r2, r4
 8003eac:	0028      	movs	r0, r5
 8003eae:	f000 f895 	bl	8003fdc <__swbuf_r>
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	d1e8      	bne.n	8003e88 <_puts_r+0x70>
 8003eb6:	e7cd      	b.n	8003e54 <_puts_r+0x3c>
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	6022      	str	r2, [r4, #0]
 8003ebe:	220a      	movs	r2, #10
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	e7f0      	b.n	8003ea6 <_puts_r+0x8e>

08003ec4 <puts>:
 8003ec4:	b510      	push	{r4, lr}
 8003ec6:	4b03      	ldr	r3, [pc, #12]	@ (8003ed4 <puts+0x10>)
 8003ec8:	0001      	movs	r1, r0
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	f7ff ffa4 	bl	8003e18 <_puts_r>
 8003ed0:	bd10      	pop	{r4, pc}
 8003ed2:	46c0      	nop			@ (mov r8, r8)
 8003ed4:	20000018 	.word	0x20000018

08003ed8 <sniprintf>:
 8003ed8:	b40c      	push	{r2, r3}
 8003eda:	b530      	push	{r4, r5, lr}
 8003edc:	4b18      	ldr	r3, [pc, #96]	@ (8003f40 <sniprintf+0x68>)
 8003ede:	000c      	movs	r4, r1
 8003ee0:	681d      	ldr	r5, [r3, #0]
 8003ee2:	b09d      	sub	sp, #116	@ 0x74
 8003ee4:	2900      	cmp	r1, #0
 8003ee6:	da08      	bge.n	8003efa <sniprintf+0x22>
 8003ee8:	238b      	movs	r3, #139	@ 0x8b
 8003eea:	2001      	movs	r0, #1
 8003eec:	602b      	str	r3, [r5, #0]
 8003eee:	4240      	negs	r0, r0
 8003ef0:	b01d      	add	sp, #116	@ 0x74
 8003ef2:	bc30      	pop	{r4, r5}
 8003ef4:	bc08      	pop	{r3}
 8003ef6:	b002      	add	sp, #8
 8003ef8:	4718      	bx	r3
 8003efa:	2382      	movs	r3, #130	@ 0x82
 8003efc:	466a      	mov	r2, sp
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	8293      	strh	r3, [r2, #20]
 8003f02:	2300      	movs	r3, #0
 8003f04:	9002      	str	r0, [sp, #8]
 8003f06:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003f08:	9006      	str	r0, [sp, #24]
 8003f0a:	4299      	cmp	r1, r3
 8003f0c:	d000      	beq.n	8003f10 <sniprintf+0x38>
 8003f0e:	1e4b      	subs	r3, r1, #1
 8003f10:	9304      	str	r3, [sp, #16]
 8003f12:	9307      	str	r3, [sp, #28]
 8003f14:	2301      	movs	r3, #1
 8003f16:	466a      	mov	r2, sp
 8003f18:	425b      	negs	r3, r3
 8003f1a:	82d3      	strh	r3, [r2, #22]
 8003f1c:	0028      	movs	r0, r5
 8003f1e:	ab21      	add	r3, sp, #132	@ 0x84
 8003f20:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003f22:	a902      	add	r1, sp, #8
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	f000 fae1 	bl	80044ec <_svfiprintf_r>
 8003f2a:	1c43      	adds	r3, r0, #1
 8003f2c:	da01      	bge.n	8003f32 <sniprintf+0x5a>
 8003f2e:	238b      	movs	r3, #139	@ 0x8b
 8003f30:	602b      	str	r3, [r5, #0]
 8003f32:	2c00      	cmp	r4, #0
 8003f34:	d0dc      	beq.n	8003ef0 <sniprintf+0x18>
 8003f36:	2200      	movs	r2, #0
 8003f38:	9b02      	ldr	r3, [sp, #8]
 8003f3a:	701a      	strb	r2, [r3, #0]
 8003f3c:	e7d8      	b.n	8003ef0 <sniprintf+0x18>
 8003f3e:	46c0      	nop			@ (mov r8, r8)
 8003f40:	20000018 	.word	0x20000018

08003f44 <__sread>:
 8003f44:	b570      	push	{r4, r5, r6, lr}
 8003f46:	000c      	movs	r4, r1
 8003f48:	250e      	movs	r5, #14
 8003f4a:	5f49      	ldrsh	r1, [r1, r5]
 8003f4c:	f000 f914 	bl	8004178 <_read_r>
 8003f50:	2800      	cmp	r0, #0
 8003f52:	db03      	blt.n	8003f5c <__sread+0x18>
 8003f54:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003f56:	181b      	adds	r3, r3, r0
 8003f58:	6563      	str	r3, [r4, #84]	@ 0x54
 8003f5a:	bd70      	pop	{r4, r5, r6, pc}
 8003f5c:	89a3      	ldrh	r3, [r4, #12]
 8003f5e:	4a02      	ldr	r2, [pc, #8]	@ (8003f68 <__sread+0x24>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	81a3      	strh	r3, [r4, #12]
 8003f64:	e7f9      	b.n	8003f5a <__sread+0x16>
 8003f66:	46c0      	nop			@ (mov r8, r8)
 8003f68:	ffffefff 	.word	0xffffefff

08003f6c <__swrite>:
 8003f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6e:	001f      	movs	r7, r3
 8003f70:	898b      	ldrh	r3, [r1, #12]
 8003f72:	0005      	movs	r5, r0
 8003f74:	000c      	movs	r4, r1
 8003f76:	0016      	movs	r6, r2
 8003f78:	05db      	lsls	r3, r3, #23
 8003f7a:	d505      	bpl.n	8003f88 <__swrite+0x1c>
 8003f7c:	230e      	movs	r3, #14
 8003f7e:	5ec9      	ldrsh	r1, [r1, r3]
 8003f80:	2200      	movs	r2, #0
 8003f82:	2302      	movs	r3, #2
 8003f84:	f000 f8e4 	bl	8004150 <_lseek_r>
 8003f88:	89a3      	ldrh	r3, [r4, #12]
 8003f8a:	4a05      	ldr	r2, [pc, #20]	@ (8003fa0 <__swrite+0x34>)
 8003f8c:	0028      	movs	r0, r5
 8003f8e:	4013      	ands	r3, r2
 8003f90:	81a3      	strh	r3, [r4, #12]
 8003f92:	0032      	movs	r2, r6
 8003f94:	230e      	movs	r3, #14
 8003f96:	5ee1      	ldrsh	r1, [r4, r3]
 8003f98:	003b      	movs	r3, r7
 8003f9a:	f000 f901 	bl	80041a0 <_write_r>
 8003f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fa0:	ffffefff 	.word	0xffffefff

08003fa4 <__sseek>:
 8003fa4:	b570      	push	{r4, r5, r6, lr}
 8003fa6:	000c      	movs	r4, r1
 8003fa8:	250e      	movs	r5, #14
 8003faa:	5f49      	ldrsh	r1, [r1, r5]
 8003fac:	f000 f8d0 	bl	8004150 <_lseek_r>
 8003fb0:	89a3      	ldrh	r3, [r4, #12]
 8003fb2:	1c42      	adds	r2, r0, #1
 8003fb4:	d103      	bne.n	8003fbe <__sseek+0x1a>
 8003fb6:	4a05      	ldr	r2, [pc, #20]	@ (8003fcc <__sseek+0x28>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	81a3      	strh	r3, [r4, #12]
 8003fbc:	bd70      	pop	{r4, r5, r6, pc}
 8003fbe:	2280      	movs	r2, #128	@ 0x80
 8003fc0:	0152      	lsls	r2, r2, #5
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	81a3      	strh	r3, [r4, #12]
 8003fc6:	6560      	str	r0, [r4, #84]	@ 0x54
 8003fc8:	e7f8      	b.n	8003fbc <__sseek+0x18>
 8003fca:	46c0      	nop			@ (mov r8, r8)
 8003fcc:	ffffefff 	.word	0xffffefff

08003fd0 <__sclose>:
 8003fd0:	b510      	push	{r4, lr}
 8003fd2:	230e      	movs	r3, #14
 8003fd4:	5ec9      	ldrsh	r1, [r1, r3]
 8003fd6:	f000 f8a9 	bl	800412c <_close_r>
 8003fda:	bd10      	pop	{r4, pc}

08003fdc <__swbuf_r>:
 8003fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fde:	0006      	movs	r6, r0
 8003fe0:	000d      	movs	r5, r1
 8003fe2:	0014      	movs	r4, r2
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	d004      	beq.n	8003ff2 <__swbuf_r+0x16>
 8003fe8:	6a03      	ldr	r3, [r0, #32]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <__swbuf_r+0x16>
 8003fee:	f7ff fec5 	bl	8003d7c <__sinit>
 8003ff2:	69a3      	ldr	r3, [r4, #24]
 8003ff4:	60a3      	str	r3, [r4, #8]
 8003ff6:	89a3      	ldrh	r3, [r4, #12]
 8003ff8:	071b      	lsls	r3, r3, #28
 8003ffa:	d502      	bpl.n	8004002 <__swbuf_r+0x26>
 8003ffc:	6923      	ldr	r3, [r4, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d109      	bne.n	8004016 <__swbuf_r+0x3a>
 8004002:	0021      	movs	r1, r4
 8004004:	0030      	movs	r0, r6
 8004006:	f000 f82b 	bl	8004060 <__swsetup_r>
 800400a:	2800      	cmp	r0, #0
 800400c:	d003      	beq.n	8004016 <__swbuf_r+0x3a>
 800400e:	2501      	movs	r5, #1
 8004010:	426d      	negs	r5, r5
 8004012:	0028      	movs	r0, r5
 8004014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004016:	6923      	ldr	r3, [r4, #16]
 8004018:	6820      	ldr	r0, [r4, #0]
 800401a:	b2ef      	uxtb	r7, r5
 800401c:	1ac0      	subs	r0, r0, r3
 800401e:	6963      	ldr	r3, [r4, #20]
 8004020:	b2ed      	uxtb	r5, r5
 8004022:	4283      	cmp	r3, r0
 8004024:	dc05      	bgt.n	8004032 <__swbuf_r+0x56>
 8004026:	0021      	movs	r1, r4
 8004028:	0030      	movs	r0, r6
 800402a:	f000 fea3 	bl	8004d74 <_fflush_r>
 800402e:	2800      	cmp	r0, #0
 8004030:	d1ed      	bne.n	800400e <__swbuf_r+0x32>
 8004032:	68a3      	ldr	r3, [r4, #8]
 8004034:	3001      	adds	r0, #1
 8004036:	3b01      	subs	r3, #1
 8004038:	60a3      	str	r3, [r4, #8]
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	6022      	str	r2, [r4, #0]
 8004040:	701f      	strb	r7, [r3, #0]
 8004042:	6963      	ldr	r3, [r4, #20]
 8004044:	4283      	cmp	r3, r0
 8004046:	d004      	beq.n	8004052 <__swbuf_r+0x76>
 8004048:	89a3      	ldrh	r3, [r4, #12]
 800404a:	07db      	lsls	r3, r3, #31
 800404c:	d5e1      	bpl.n	8004012 <__swbuf_r+0x36>
 800404e:	2d0a      	cmp	r5, #10
 8004050:	d1df      	bne.n	8004012 <__swbuf_r+0x36>
 8004052:	0021      	movs	r1, r4
 8004054:	0030      	movs	r0, r6
 8004056:	f000 fe8d 	bl	8004d74 <_fflush_r>
 800405a:	2800      	cmp	r0, #0
 800405c:	d0d9      	beq.n	8004012 <__swbuf_r+0x36>
 800405e:	e7d6      	b.n	800400e <__swbuf_r+0x32>

08004060 <__swsetup_r>:
 8004060:	4b2d      	ldr	r3, [pc, #180]	@ (8004118 <__swsetup_r+0xb8>)
 8004062:	b570      	push	{r4, r5, r6, lr}
 8004064:	0005      	movs	r5, r0
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	000c      	movs	r4, r1
 800406a:	2800      	cmp	r0, #0
 800406c:	d004      	beq.n	8004078 <__swsetup_r+0x18>
 800406e:	6a03      	ldr	r3, [r0, #32]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <__swsetup_r+0x18>
 8004074:	f7ff fe82 	bl	8003d7c <__sinit>
 8004078:	220c      	movs	r2, #12
 800407a:	5ea3      	ldrsh	r3, [r4, r2]
 800407c:	071a      	lsls	r2, r3, #28
 800407e:	d423      	bmi.n	80040c8 <__swsetup_r+0x68>
 8004080:	06da      	lsls	r2, r3, #27
 8004082:	d407      	bmi.n	8004094 <__swsetup_r+0x34>
 8004084:	2209      	movs	r2, #9
 8004086:	602a      	str	r2, [r5, #0]
 8004088:	2240      	movs	r2, #64	@ 0x40
 800408a:	2001      	movs	r0, #1
 800408c:	4313      	orrs	r3, r2
 800408e:	81a3      	strh	r3, [r4, #12]
 8004090:	4240      	negs	r0, r0
 8004092:	e03a      	b.n	800410a <__swsetup_r+0xaa>
 8004094:	075b      	lsls	r3, r3, #29
 8004096:	d513      	bpl.n	80040c0 <__swsetup_r+0x60>
 8004098:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800409a:	2900      	cmp	r1, #0
 800409c:	d008      	beq.n	80040b0 <__swsetup_r+0x50>
 800409e:	0023      	movs	r3, r4
 80040a0:	3344      	adds	r3, #68	@ 0x44
 80040a2:	4299      	cmp	r1, r3
 80040a4:	d002      	beq.n	80040ac <__swsetup_r+0x4c>
 80040a6:	0028      	movs	r0, r5
 80040a8:	f000 f8c4 	bl	8004234 <_free_r>
 80040ac:	2300      	movs	r3, #0
 80040ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80040b0:	2224      	movs	r2, #36	@ 0x24
 80040b2:	89a3      	ldrh	r3, [r4, #12]
 80040b4:	4393      	bics	r3, r2
 80040b6:	81a3      	strh	r3, [r4, #12]
 80040b8:	2300      	movs	r3, #0
 80040ba:	6063      	str	r3, [r4, #4]
 80040bc:	6923      	ldr	r3, [r4, #16]
 80040be:	6023      	str	r3, [r4, #0]
 80040c0:	2308      	movs	r3, #8
 80040c2:	89a2      	ldrh	r2, [r4, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	81a3      	strh	r3, [r4, #12]
 80040c8:	6923      	ldr	r3, [r4, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10b      	bne.n	80040e6 <__swsetup_r+0x86>
 80040ce:	21a0      	movs	r1, #160	@ 0xa0
 80040d0:	2280      	movs	r2, #128	@ 0x80
 80040d2:	89a3      	ldrh	r3, [r4, #12]
 80040d4:	0089      	lsls	r1, r1, #2
 80040d6:	0092      	lsls	r2, r2, #2
 80040d8:	400b      	ands	r3, r1
 80040da:	4293      	cmp	r3, r2
 80040dc:	d003      	beq.n	80040e6 <__swsetup_r+0x86>
 80040de:	0021      	movs	r1, r4
 80040e0:	0028      	movs	r0, r5
 80040e2:	f000 fe9d 	bl	8004e20 <__smakebuf_r>
 80040e6:	220c      	movs	r2, #12
 80040e8:	5ea3      	ldrsh	r3, [r4, r2]
 80040ea:	2101      	movs	r1, #1
 80040ec:	001a      	movs	r2, r3
 80040ee:	400a      	ands	r2, r1
 80040f0:	420b      	tst	r3, r1
 80040f2:	d00b      	beq.n	800410c <__swsetup_r+0xac>
 80040f4:	2200      	movs	r2, #0
 80040f6:	60a2      	str	r2, [r4, #8]
 80040f8:	6962      	ldr	r2, [r4, #20]
 80040fa:	4252      	negs	r2, r2
 80040fc:	61a2      	str	r2, [r4, #24]
 80040fe:	2000      	movs	r0, #0
 8004100:	6922      	ldr	r2, [r4, #16]
 8004102:	4282      	cmp	r2, r0
 8004104:	d101      	bne.n	800410a <__swsetup_r+0xaa>
 8004106:	061a      	lsls	r2, r3, #24
 8004108:	d4be      	bmi.n	8004088 <__swsetup_r+0x28>
 800410a:	bd70      	pop	{r4, r5, r6, pc}
 800410c:	0799      	lsls	r1, r3, #30
 800410e:	d400      	bmi.n	8004112 <__swsetup_r+0xb2>
 8004110:	6962      	ldr	r2, [r4, #20]
 8004112:	60a2      	str	r2, [r4, #8]
 8004114:	e7f3      	b.n	80040fe <__swsetup_r+0x9e>
 8004116:	46c0      	nop			@ (mov r8, r8)
 8004118:	20000018 	.word	0x20000018

0800411c <memset>:
 800411c:	0003      	movs	r3, r0
 800411e:	1882      	adds	r2, r0, r2
 8004120:	4293      	cmp	r3, r2
 8004122:	d100      	bne.n	8004126 <memset+0xa>
 8004124:	4770      	bx	lr
 8004126:	7019      	strb	r1, [r3, #0]
 8004128:	3301      	adds	r3, #1
 800412a:	e7f9      	b.n	8004120 <memset+0x4>

0800412c <_close_r>:
 800412c:	2300      	movs	r3, #0
 800412e:	b570      	push	{r4, r5, r6, lr}
 8004130:	4d06      	ldr	r5, [pc, #24]	@ (800414c <_close_r+0x20>)
 8004132:	0004      	movs	r4, r0
 8004134:	0008      	movs	r0, r1
 8004136:	602b      	str	r3, [r5, #0]
 8004138:	f7fc fffe 	bl	8001138 <_close>
 800413c:	1c43      	adds	r3, r0, #1
 800413e:	d103      	bne.n	8004148 <_close_r+0x1c>
 8004140:	682b      	ldr	r3, [r5, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d000      	beq.n	8004148 <_close_r+0x1c>
 8004146:	6023      	str	r3, [r4, #0]
 8004148:	bd70      	pop	{r4, r5, r6, pc}
 800414a:	46c0      	nop			@ (mov r8, r8)
 800414c:	200003e0 	.word	0x200003e0

08004150 <_lseek_r>:
 8004150:	b570      	push	{r4, r5, r6, lr}
 8004152:	0004      	movs	r4, r0
 8004154:	0008      	movs	r0, r1
 8004156:	0011      	movs	r1, r2
 8004158:	001a      	movs	r2, r3
 800415a:	2300      	movs	r3, #0
 800415c:	4d05      	ldr	r5, [pc, #20]	@ (8004174 <_lseek_r+0x24>)
 800415e:	602b      	str	r3, [r5, #0]
 8004160:	f7fd f80b 	bl	800117a <_lseek>
 8004164:	1c43      	adds	r3, r0, #1
 8004166:	d103      	bne.n	8004170 <_lseek_r+0x20>
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d000      	beq.n	8004170 <_lseek_r+0x20>
 800416e:	6023      	str	r3, [r4, #0]
 8004170:	bd70      	pop	{r4, r5, r6, pc}
 8004172:	46c0      	nop			@ (mov r8, r8)
 8004174:	200003e0 	.word	0x200003e0

08004178 <_read_r>:
 8004178:	b570      	push	{r4, r5, r6, lr}
 800417a:	0004      	movs	r4, r0
 800417c:	0008      	movs	r0, r1
 800417e:	0011      	movs	r1, r2
 8004180:	001a      	movs	r2, r3
 8004182:	2300      	movs	r3, #0
 8004184:	4d05      	ldr	r5, [pc, #20]	@ (800419c <_read_r+0x24>)
 8004186:	602b      	str	r3, [r5, #0]
 8004188:	f7fc ff9d 	bl	80010c6 <_read>
 800418c:	1c43      	adds	r3, r0, #1
 800418e:	d103      	bne.n	8004198 <_read_r+0x20>
 8004190:	682b      	ldr	r3, [r5, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d000      	beq.n	8004198 <_read_r+0x20>
 8004196:	6023      	str	r3, [r4, #0]
 8004198:	bd70      	pop	{r4, r5, r6, pc}
 800419a:	46c0      	nop			@ (mov r8, r8)
 800419c:	200003e0 	.word	0x200003e0

080041a0 <_write_r>:
 80041a0:	b570      	push	{r4, r5, r6, lr}
 80041a2:	0004      	movs	r4, r0
 80041a4:	0008      	movs	r0, r1
 80041a6:	0011      	movs	r1, r2
 80041a8:	001a      	movs	r2, r3
 80041aa:	2300      	movs	r3, #0
 80041ac:	4d05      	ldr	r5, [pc, #20]	@ (80041c4 <_write_r+0x24>)
 80041ae:	602b      	str	r3, [r5, #0]
 80041b0:	f7fc ffa6 	bl	8001100 <_write>
 80041b4:	1c43      	adds	r3, r0, #1
 80041b6:	d103      	bne.n	80041c0 <_write_r+0x20>
 80041b8:	682b      	ldr	r3, [r5, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d000      	beq.n	80041c0 <_write_r+0x20>
 80041be:	6023      	str	r3, [r4, #0]
 80041c0:	bd70      	pop	{r4, r5, r6, pc}
 80041c2:	46c0      	nop			@ (mov r8, r8)
 80041c4:	200003e0 	.word	0x200003e0

080041c8 <__errno>:
 80041c8:	4b01      	ldr	r3, [pc, #4]	@ (80041d0 <__errno+0x8>)
 80041ca:	6818      	ldr	r0, [r3, #0]
 80041cc:	4770      	bx	lr
 80041ce:	46c0      	nop			@ (mov r8, r8)
 80041d0:	20000018 	.word	0x20000018

080041d4 <__libc_init_array>:
 80041d4:	b570      	push	{r4, r5, r6, lr}
 80041d6:	2600      	movs	r6, #0
 80041d8:	4c0c      	ldr	r4, [pc, #48]	@ (800420c <__libc_init_array+0x38>)
 80041da:	4d0d      	ldr	r5, [pc, #52]	@ (8004210 <__libc_init_array+0x3c>)
 80041dc:	1b64      	subs	r4, r4, r5
 80041de:	10a4      	asrs	r4, r4, #2
 80041e0:	42a6      	cmp	r6, r4
 80041e2:	d109      	bne.n	80041f8 <__libc_init_array+0x24>
 80041e4:	2600      	movs	r6, #0
 80041e6:	f000 ff1f 	bl	8005028 <_init>
 80041ea:	4c0a      	ldr	r4, [pc, #40]	@ (8004214 <__libc_init_array+0x40>)
 80041ec:	4d0a      	ldr	r5, [pc, #40]	@ (8004218 <__libc_init_array+0x44>)
 80041ee:	1b64      	subs	r4, r4, r5
 80041f0:	10a4      	asrs	r4, r4, #2
 80041f2:	42a6      	cmp	r6, r4
 80041f4:	d105      	bne.n	8004202 <__libc_init_array+0x2e>
 80041f6:	bd70      	pop	{r4, r5, r6, pc}
 80041f8:	00b3      	lsls	r3, r6, #2
 80041fa:	58eb      	ldr	r3, [r5, r3]
 80041fc:	4798      	blx	r3
 80041fe:	3601      	adds	r6, #1
 8004200:	e7ee      	b.n	80041e0 <__libc_init_array+0xc>
 8004202:	00b3      	lsls	r3, r6, #2
 8004204:	58eb      	ldr	r3, [r5, r3]
 8004206:	4798      	blx	r3
 8004208:	3601      	adds	r6, #1
 800420a:	e7f2      	b.n	80041f2 <__libc_init_array+0x1e>
 800420c:	0800552c 	.word	0x0800552c
 8004210:	0800552c 	.word	0x0800552c
 8004214:	08005530 	.word	0x08005530
 8004218:	0800552c 	.word	0x0800552c

0800421c <__retarget_lock_init_recursive>:
 800421c:	4770      	bx	lr

0800421e <__retarget_lock_acquire_recursive>:
 800421e:	4770      	bx	lr

08004220 <__retarget_lock_release_recursive>:
 8004220:	4770      	bx	lr

08004222 <memcpy>:
 8004222:	2300      	movs	r3, #0
 8004224:	b510      	push	{r4, lr}
 8004226:	429a      	cmp	r2, r3
 8004228:	d100      	bne.n	800422c <memcpy+0xa>
 800422a:	bd10      	pop	{r4, pc}
 800422c:	5ccc      	ldrb	r4, [r1, r3]
 800422e:	54c4      	strb	r4, [r0, r3]
 8004230:	3301      	adds	r3, #1
 8004232:	e7f8      	b.n	8004226 <memcpy+0x4>

08004234 <_free_r>:
 8004234:	b570      	push	{r4, r5, r6, lr}
 8004236:	0005      	movs	r5, r0
 8004238:	1e0c      	subs	r4, r1, #0
 800423a:	d010      	beq.n	800425e <_free_r+0x2a>
 800423c:	3c04      	subs	r4, #4
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	da00      	bge.n	8004246 <_free_r+0x12>
 8004244:	18e4      	adds	r4, r4, r3
 8004246:	0028      	movs	r0, r5
 8004248:	f000 f8e0 	bl	800440c <__malloc_lock>
 800424c:	4a1d      	ldr	r2, [pc, #116]	@ (80042c4 <_free_r+0x90>)
 800424e:	6813      	ldr	r3, [r2, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d105      	bne.n	8004260 <_free_r+0x2c>
 8004254:	6063      	str	r3, [r4, #4]
 8004256:	6014      	str	r4, [r2, #0]
 8004258:	0028      	movs	r0, r5
 800425a:	f000 f8df 	bl	800441c <__malloc_unlock>
 800425e:	bd70      	pop	{r4, r5, r6, pc}
 8004260:	42a3      	cmp	r3, r4
 8004262:	d908      	bls.n	8004276 <_free_r+0x42>
 8004264:	6820      	ldr	r0, [r4, #0]
 8004266:	1821      	adds	r1, r4, r0
 8004268:	428b      	cmp	r3, r1
 800426a:	d1f3      	bne.n	8004254 <_free_r+0x20>
 800426c:	6819      	ldr	r1, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	1809      	adds	r1, r1, r0
 8004272:	6021      	str	r1, [r4, #0]
 8004274:	e7ee      	b.n	8004254 <_free_r+0x20>
 8004276:	001a      	movs	r2, r3
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <_free_r+0x4e>
 800427e:	42a3      	cmp	r3, r4
 8004280:	d9f9      	bls.n	8004276 <_free_r+0x42>
 8004282:	6811      	ldr	r1, [r2, #0]
 8004284:	1850      	adds	r0, r2, r1
 8004286:	42a0      	cmp	r0, r4
 8004288:	d10b      	bne.n	80042a2 <_free_r+0x6e>
 800428a:	6820      	ldr	r0, [r4, #0]
 800428c:	1809      	adds	r1, r1, r0
 800428e:	1850      	adds	r0, r2, r1
 8004290:	6011      	str	r1, [r2, #0]
 8004292:	4283      	cmp	r3, r0
 8004294:	d1e0      	bne.n	8004258 <_free_r+0x24>
 8004296:	6818      	ldr	r0, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	1841      	adds	r1, r0, r1
 800429c:	6011      	str	r1, [r2, #0]
 800429e:	6053      	str	r3, [r2, #4]
 80042a0:	e7da      	b.n	8004258 <_free_r+0x24>
 80042a2:	42a0      	cmp	r0, r4
 80042a4:	d902      	bls.n	80042ac <_free_r+0x78>
 80042a6:	230c      	movs	r3, #12
 80042a8:	602b      	str	r3, [r5, #0]
 80042aa:	e7d5      	b.n	8004258 <_free_r+0x24>
 80042ac:	6820      	ldr	r0, [r4, #0]
 80042ae:	1821      	adds	r1, r4, r0
 80042b0:	428b      	cmp	r3, r1
 80042b2:	d103      	bne.n	80042bc <_free_r+0x88>
 80042b4:	6819      	ldr	r1, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	1809      	adds	r1, r1, r0
 80042ba:	6021      	str	r1, [r4, #0]
 80042bc:	6063      	str	r3, [r4, #4]
 80042be:	6054      	str	r4, [r2, #4]
 80042c0:	e7ca      	b.n	8004258 <_free_r+0x24>
 80042c2:	46c0      	nop			@ (mov r8, r8)
 80042c4:	200003ec 	.word	0x200003ec

080042c8 <sbrk_aligned>:
 80042c8:	b570      	push	{r4, r5, r6, lr}
 80042ca:	4e0f      	ldr	r6, [pc, #60]	@ (8004308 <sbrk_aligned+0x40>)
 80042cc:	000d      	movs	r5, r1
 80042ce:	6831      	ldr	r1, [r6, #0]
 80042d0:	0004      	movs	r4, r0
 80042d2:	2900      	cmp	r1, #0
 80042d4:	d102      	bne.n	80042dc <sbrk_aligned+0x14>
 80042d6:	f000 fe51 	bl	8004f7c <_sbrk_r>
 80042da:	6030      	str	r0, [r6, #0]
 80042dc:	0029      	movs	r1, r5
 80042de:	0020      	movs	r0, r4
 80042e0:	f000 fe4c 	bl	8004f7c <_sbrk_r>
 80042e4:	1c43      	adds	r3, r0, #1
 80042e6:	d103      	bne.n	80042f0 <sbrk_aligned+0x28>
 80042e8:	2501      	movs	r5, #1
 80042ea:	426d      	negs	r5, r5
 80042ec:	0028      	movs	r0, r5
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
 80042f0:	2303      	movs	r3, #3
 80042f2:	1cc5      	adds	r5, r0, #3
 80042f4:	439d      	bics	r5, r3
 80042f6:	42a8      	cmp	r0, r5
 80042f8:	d0f8      	beq.n	80042ec <sbrk_aligned+0x24>
 80042fa:	1a29      	subs	r1, r5, r0
 80042fc:	0020      	movs	r0, r4
 80042fe:	f000 fe3d 	bl	8004f7c <_sbrk_r>
 8004302:	3001      	adds	r0, #1
 8004304:	d1f2      	bne.n	80042ec <sbrk_aligned+0x24>
 8004306:	e7ef      	b.n	80042e8 <sbrk_aligned+0x20>
 8004308:	200003e8 	.word	0x200003e8

0800430c <_malloc_r>:
 800430c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800430e:	2203      	movs	r2, #3
 8004310:	1ccb      	adds	r3, r1, #3
 8004312:	4393      	bics	r3, r2
 8004314:	3308      	adds	r3, #8
 8004316:	0005      	movs	r5, r0
 8004318:	001f      	movs	r7, r3
 800431a:	2b0c      	cmp	r3, #12
 800431c:	d234      	bcs.n	8004388 <_malloc_r+0x7c>
 800431e:	270c      	movs	r7, #12
 8004320:	42b9      	cmp	r1, r7
 8004322:	d833      	bhi.n	800438c <_malloc_r+0x80>
 8004324:	0028      	movs	r0, r5
 8004326:	f000 f871 	bl	800440c <__malloc_lock>
 800432a:	4e37      	ldr	r6, [pc, #220]	@ (8004408 <_malloc_r+0xfc>)
 800432c:	6833      	ldr	r3, [r6, #0]
 800432e:	001c      	movs	r4, r3
 8004330:	2c00      	cmp	r4, #0
 8004332:	d12f      	bne.n	8004394 <_malloc_r+0x88>
 8004334:	0039      	movs	r1, r7
 8004336:	0028      	movs	r0, r5
 8004338:	f7ff ffc6 	bl	80042c8 <sbrk_aligned>
 800433c:	0004      	movs	r4, r0
 800433e:	1c43      	adds	r3, r0, #1
 8004340:	d15f      	bne.n	8004402 <_malloc_r+0xf6>
 8004342:	6834      	ldr	r4, [r6, #0]
 8004344:	9400      	str	r4, [sp, #0]
 8004346:	9b00      	ldr	r3, [sp, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d14a      	bne.n	80043e2 <_malloc_r+0xd6>
 800434c:	2c00      	cmp	r4, #0
 800434e:	d052      	beq.n	80043f6 <_malloc_r+0xea>
 8004350:	6823      	ldr	r3, [r4, #0]
 8004352:	0028      	movs	r0, r5
 8004354:	18e3      	adds	r3, r4, r3
 8004356:	9900      	ldr	r1, [sp, #0]
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	f000 fe0f 	bl	8004f7c <_sbrk_r>
 800435e:	9b01      	ldr	r3, [sp, #4]
 8004360:	4283      	cmp	r3, r0
 8004362:	d148      	bne.n	80043f6 <_malloc_r+0xea>
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	0028      	movs	r0, r5
 8004368:	1aff      	subs	r7, r7, r3
 800436a:	0039      	movs	r1, r7
 800436c:	f7ff ffac 	bl	80042c8 <sbrk_aligned>
 8004370:	3001      	adds	r0, #1
 8004372:	d040      	beq.n	80043f6 <_malloc_r+0xea>
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	19db      	adds	r3, r3, r7
 8004378:	6023      	str	r3, [r4, #0]
 800437a:	6833      	ldr	r3, [r6, #0]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	2a00      	cmp	r2, #0
 8004380:	d133      	bne.n	80043ea <_malloc_r+0xde>
 8004382:	9b00      	ldr	r3, [sp, #0]
 8004384:	6033      	str	r3, [r6, #0]
 8004386:	e019      	b.n	80043bc <_malloc_r+0xb0>
 8004388:	2b00      	cmp	r3, #0
 800438a:	dac9      	bge.n	8004320 <_malloc_r+0x14>
 800438c:	230c      	movs	r3, #12
 800438e:	602b      	str	r3, [r5, #0]
 8004390:	2000      	movs	r0, #0
 8004392:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004394:	6821      	ldr	r1, [r4, #0]
 8004396:	1bc9      	subs	r1, r1, r7
 8004398:	d420      	bmi.n	80043dc <_malloc_r+0xd0>
 800439a:	290b      	cmp	r1, #11
 800439c:	d90a      	bls.n	80043b4 <_malloc_r+0xa8>
 800439e:	19e2      	adds	r2, r4, r7
 80043a0:	6027      	str	r7, [r4, #0]
 80043a2:	42a3      	cmp	r3, r4
 80043a4:	d104      	bne.n	80043b0 <_malloc_r+0xa4>
 80043a6:	6032      	str	r2, [r6, #0]
 80043a8:	6863      	ldr	r3, [r4, #4]
 80043aa:	6011      	str	r1, [r2, #0]
 80043ac:	6053      	str	r3, [r2, #4]
 80043ae:	e005      	b.n	80043bc <_malloc_r+0xb0>
 80043b0:	605a      	str	r2, [r3, #4]
 80043b2:	e7f9      	b.n	80043a8 <_malloc_r+0x9c>
 80043b4:	6862      	ldr	r2, [r4, #4]
 80043b6:	42a3      	cmp	r3, r4
 80043b8:	d10e      	bne.n	80043d8 <_malloc_r+0xcc>
 80043ba:	6032      	str	r2, [r6, #0]
 80043bc:	0028      	movs	r0, r5
 80043be:	f000 f82d 	bl	800441c <__malloc_unlock>
 80043c2:	0020      	movs	r0, r4
 80043c4:	2207      	movs	r2, #7
 80043c6:	300b      	adds	r0, #11
 80043c8:	1d23      	adds	r3, r4, #4
 80043ca:	4390      	bics	r0, r2
 80043cc:	1ac2      	subs	r2, r0, r3
 80043ce:	4298      	cmp	r0, r3
 80043d0:	d0df      	beq.n	8004392 <_malloc_r+0x86>
 80043d2:	1a1b      	subs	r3, r3, r0
 80043d4:	50a3      	str	r3, [r4, r2]
 80043d6:	e7dc      	b.n	8004392 <_malloc_r+0x86>
 80043d8:	605a      	str	r2, [r3, #4]
 80043da:	e7ef      	b.n	80043bc <_malloc_r+0xb0>
 80043dc:	0023      	movs	r3, r4
 80043de:	6864      	ldr	r4, [r4, #4]
 80043e0:	e7a6      	b.n	8004330 <_malloc_r+0x24>
 80043e2:	9c00      	ldr	r4, [sp, #0]
 80043e4:	6863      	ldr	r3, [r4, #4]
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	e7ad      	b.n	8004346 <_malloc_r+0x3a>
 80043ea:	001a      	movs	r2, r3
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	42a3      	cmp	r3, r4
 80043f0:	d1fb      	bne.n	80043ea <_malloc_r+0xde>
 80043f2:	2300      	movs	r3, #0
 80043f4:	e7da      	b.n	80043ac <_malloc_r+0xa0>
 80043f6:	230c      	movs	r3, #12
 80043f8:	0028      	movs	r0, r5
 80043fa:	602b      	str	r3, [r5, #0]
 80043fc:	f000 f80e 	bl	800441c <__malloc_unlock>
 8004400:	e7c6      	b.n	8004390 <_malloc_r+0x84>
 8004402:	6007      	str	r7, [r0, #0]
 8004404:	e7da      	b.n	80043bc <_malloc_r+0xb0>
 8004406:	46c0      	nop			@ (mov r8, r8)
 8004408:	200003ec 	.word	0x200003ec

0800440c <__malloc_lock>:
 800440c:	b510      	push	{r4, lr}
 800440e:	4802      	ldr	r0, [pc, #8]	@ (8004418 <__malloc_lock+0xc>)
 8004410:	f7ff ff05 	bl	800421e <__retarget_lock_acquire_recursive>
 8004414:	bd10      	pop	{r4, pc}
 8004416:	46c0      	nop			@ (mov r8, r8)
 8004418:	200003e4 	.word	0x200003e4

0800441c <__malloc_unlock>:
 800441c:	b510      	push	{r4, lr}
 800441e:	4802      	ldr	r0, [pc, #8]	@ (8004428 <__malloc_unlock+0xc>)
 8004420:	f7ff fefe 	bl	8004220 <__retarget_lock_release_recursive>
 8004424:	bd10      	pop	{r4, pc}
 8004426:	46c0      	nop			@ (mov r8, r8)
 8004428:	200003e4 	.word	0x200003e4

0800442c <__ssputs_r>:
 800442c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800442e:	688e      	ldr	r6, [r1, #8]
 8004430:	b085      	sub	sp, #20
 8004432:	001f      	movs	r7, r3
 8004434:	000c      	movs	r4, r1
 8004436:	680b      	ldr	r3, [r1, #0]
 8004438:	9002      	str	r0, [sp, #8]
 800443a:	9203      	str	r2, [sp, #12]
 800443c:	42be      	cmp	r6, r7
 800443e:	d830      	bhi.n	80044a2 <__ssputs_r+0x76>
 8004440:	210c      	movs	r1, #12
 8004442:	5e62      	ldrsh	r2, [r4, r1]
 8004444:	2190      	movs	r1, #144	@ 0x90
 8004446:	00c9      	lsls	r1, r1, #3
 8004448:	420a      	tst	r2, r1
 800444a:	d028      	beq.n	800449e <__ssputs_r+0x72>
 800444c:	2003      	movs	r0, #3
 800444e:	6921      	ldr	r1, [r4, #16]
 8004450:	1a5b      	subs	r3, r3, r1
 8004452:	9301      	str	r3, [sp, #4]
 8004454:	6963      	ldr	r3, [r4, #20]
 8004456:	4343      	muls	r3, r0
 8004458:	9801      	ldr	r0, [sp, #4]
 800445a:	0fdd      	lsrs	r5, r3, #31
 800445c:	18ed      	adds	r5, r5, r3
 800445e:	1c7b      	adds	r3, r7, #1
 8004460:	181b      	adds	r3, r3, r0
 8004462:	106d      	asrs	r5, r5, #1
 8004464:	42ab      	cmp	r3, r5
 8004466:	d900      	bls.n	800446a <__ssputs_r+0x3e>
 8004468:	001d      	movs	r5, r3
 800446a:	0552      	lsls	r2, r2, #21
 800446c:	d528      	bpl.n	80044c0 <__ssputs_r+0x94>
 800446e:	0029      	movs	r1, r5
 8004470:	9802      	ldr	r0, [sp, #8]
 8004472:	f7ff ff4b 	bl	800430c <_malloc_r>
 8004476:	1e06      	subs	r6, r0, #0
 8004478:	d02c      	beq.n	80044d4 <__ssputs_r+0xa8>
 800447a:	9a01      	ldr	r2, [sp, #4]
 800447c:	6921      	ldr	r1, [r4, #16]
 800447e:	f7ff fed0 	bl	8004222 <memcpy>
 8004482:	89a2      	ldrh	r2, [r4, #12]
 8004484:	4b18      	ldr	r3, [pc, #96]	@ (80044e8 <__ssputs_r+0xbc>)
 8004486:	401a      	ands	r2, r3
 8004488:	2380      	movs	r3, #128	@ 0x80
 800448a:	4313      	orrs	r3, r2
 800448c:	81a3      	strh	r3, [r4, #12]
 800448e:	9b01      	ldr	r3, [sp, #4]
 8004490:	6126      	str	r6, [r4, #16]
 8004492:	18f6      	adds	r6, r6, r3
 8004494:	6026      	str	r6, [r4, #0]
 8004496:	003e      	movs	r6, r7
 8004498:	6165      	str	r5, [r4, #20]
 800449a:	1aed      	subs	r5, r5, r3
 800449c:	60a5      	str	r5, [r4, #8]
 800449e:	42be      	cmp	r6, r7
 80044a0:	d900      	bls.n	80044a4 <__ssputs_r+0x78>
 80044a2:	003e      	movs	r6, r7
 80044a4:	0032      	movs	r2, r6
 80044a6:	9903      	ldr	r1, [sp, #12]
 80044a8:	6820      	ldr	r0, [r4, #0]
 80044aa:	f000 fd30 	bl	8004f0e <memmove>
 80044ae:	2000      	movs	r0, #0
 80044b0:	68a3      	ldr	r3, [r4, #8]
 80044b2:	1b9b      	subs	r3, r3, r6
 80044b4:	60a3      	str	r3, [r4, #8]
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	199b      	adds	r3, r3, r6
 80044ba:	6023      	str	r3, [r4, #0]
 80044bc:	b005      	add	sp, #20
 80044be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044c0:	002a      	movs	r2, r5
 80044c2:	9802      	ldr	r0, [sp, #8]
 80044c4:	f000 fd77 	bl	8004fb6 <_realloc_r>
 80044c8:	1e06      	subs	r6, r0, #0
 80044ca:	d1e0      	bne.n	800448e <__ssputs_r+0x62>
 80044cc:	6921      	ldr	r1, [r4, #16]
 80044ce:	9802      	ldr	r0, [sp, #8]
 80044d0:	f7ff feb0 	bl	8004234 <_free_r>
 80044d4:	230c      	movs	r3, #12
 80044d6:	2001      	movs	r0, #1
 80044d8:	9a02      	ldr	r2, [sp, #8]
 80044da:	4240      	negs	r0, r0
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	89a2      	ldrh	r2, [r4, #12]
 80044e0:	3334      	adds	r3, #52	@ 0x34
 80044e2:	4313      	orrs	r3, r2
 80044e4:	81a3      	strh	r3, [r4, #12]
 80044e6:	e7e9      	b.n	80044bc <__ssputs_r+0x90>
 80044e8:	fffffb7f 	.word	0xfffffb7f

080044ec <_svfiprintf_r>:
 80044ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ee:	b0a1      	sub	sp, #132	@ 0x84
 80044f0:	9003      	str	r0, [sp, #12]
 80044f2:	001d      	movs	r5, r3
 80044f4:	898b      	ldrh	r3, [r1, #12]
 80044f6:	000f      	movs	r7, r1
 80044f8:	0016      	movs	r6, r2
 80044fa:	061b      	lsls	r3, r3, #24
 80044fc:	d511      	bpl.n	8004522 <_svfiprintf_r+0x36>
 80044fe:	690b      	ldr	r3, [r1, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10e      	bne.n	8004522 <_svfiprintf_r+0x36>
 8004504:	2140      	movs	r1, #64	@ 0x40
 8004506:	f7ff ff01 	bl	800430c <_malloc_r>
 800450a:	6038      	str	r0, [r7, #0]
 800450c:	6138      	str	r0, [r7, #16]
 800450e:	2800      	cmp	r0, #0
 8004510:	d105      	bne.n	800451e <_svfiprintf_r+0x32>
 8004512:	230c      	movs	r3, #12
 8004514:	9a03      	ldr	r2, [sp, #12]
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	2001      	movs	r0, #1
 800451a:	4240      	negs	r0, r0
 800451c:	e0cf      	b.n	80046be <_svfiprintf_r+0x1d2>
 800451e:	2340      	movs	r3, #64	@ 0x40
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	2300      	movs	r3, #0
 8004524:	ac08      	add	r4, sp, #32
 8004526:	6163      	str	r3, [r4, #20]
 8004528:	3320      	adds	r3, #32
 800452a:	7663      	strb	r3, [r4, #25]
 800452c:	3310      	adds	r3, #16
 800452e:	76a3      	strb	r3, [r4, #26]
 8004530:	9507      	str	r5, [sp, #28]
 8004532:	0035      	movs	r5, r6
 8004534:	782b      	ldrb	r3, [r5, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <_svfiprintf_r+0x52>
 800453a:	2b25      	cmp	r3, #37	@ 0x25
 800453c:	d148      	bne.n	80045d0 <_svfiprintf_r+0xe4>
 800453e:	1bab      	subs	r3, r5, r6
 8004540:	9305      	str	r3, [sp, #20]
 8004542:	42b5      	cmp	r5, r6
 8004544:	d00b      	beq.n	800455e <_svfiprintf_r+0x72>
 8004546:	0032      	movs	r2, r6
 8004548:	0039      	movs	r1, r7
 800454a:	9803      	ldr	r0, [sp, #12]
 800454c:	f7ff ff6e 	bl	800442c <__ssputs_r>
 8004550:	3001      	adds	r0, #1
 8004552:	d100      	bne.n	8004556 <_svfiprintf_r+0x6a>
 8004554:	e0ae      	b.n	80046b4 <_svfiprintf_r+0x1c8>
 8004556:	6963      	ldr	r3, [r4, #20]
 8004558:	9a05      	ldr	r2, [sp, #20]
 800455a:	189b      	adds	r3, r3, r2
 800455c:	6163      	str	r3, [r4, #20]
 800455e:	782b      	ldrb	r3, [r5, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d100      	bne.n	8004566 <_svfiprintf_r+0x7a>
 8004564:	e0a6      	b.n	80046b4 <_svfiprintf_r+0x1c8>
 8004566:	2201      	movs	r2, #1
 8004568:	2300      	movs	r3, #0
 800456a:	4252      	negs	r2, r2
 800456c:	6062      	str	r2, [r4, #4]
 800456e:	a904      	add	r1, sp, #16
 8004570:	3254      	adds	r2, #84	@ 0x54
 8004572:	1852      	adds	r2, r2, r1
 8004574:	1c6e      	adds	r6, r5, #1
 8004576:	6023      	str	r3, [r4, #0]
 8004578:	60e3      	str	r3, [r4, #12]
 800457a:	60a3      	str	r3, [r4, #8]
 800457c:	7013      	strb	r3, [r2, #0]
 800457e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004580:	4b54      	ldr	r3, [pc, #336]	@ (80046d4 <_svfiprintf_r+0x1e8>)
 8004582:	2205      	movs	r2, #5
 8004584:	0018      	movs	r0, r3
 8004586:	7831      	ldrb	r1, [r6, #0]
 8004588:	9305      	str	r3, [sp, #20]
 800458a:	f000 fd09 	bl	8004fa0 <memchr>
 800458e:	1c75      	adds	r5, r6, #1
 8004590:	2800      	cmp	r0, #0
 8004592:	d11f      	bne.n	80045d4 <_svfiprintf_r+0xe8>
 8004594:	6822      	ldr	r2, [r4, #0]
 8004596:	06d3      	lsls	r3, r2, #27
 8004598:	d504      	bpl.n	80045a4 <_svfiprintf_r+0xb8>
 800459a:	2353      	movs	r3, #83	@ 0x53
 800459c:	a904      	add	r1, sp, #16
 800459e:	185b      	adds	r3, r3, r1
 80045a0:	2120      	movs	r1, #32
 80045a2:	7019      	strb	r1, [r3, #0]
 80045a4:	0713      	lsls	r3, r2, #28
 80045a6:	d504      	bpl.n	80045b2 <_svfiprintf_r+0xc6>
 80045a8:	2353      	movs	r3, #83	@ 0x53
 80045aa:	a904      	add	r1, sp, #16
 80045ac:	185b      	adds	r3, r3, r1
 80045ae:	212b      	movs	r1, #43	@ 0x2b
 80045b0:	7019      	strb	r1, [r3, #0]
 80045b2:	7833      	ldrb	r3, [r6, #0]
 80045b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80045b6:	d016      	beq.n	80045e6 <_svfiprintf_r+0xfa>
 80045b8:	0035      	movs	r5, r6
 80045ba:	2100      	movs	r1, #0
 80045bc:	200a      	movs	r0, #10
 80045be:	68e3      	ldr	r3, [r4, #12]
 80045c0:	782a      	ldrb	r2, [r5, #0]
 80045c2:	1c6e      	adds	r6, r5, #1
 80045c4:	3a30      	subs	r2, #48	@ 0x30
 80045c6:	2a09      	cmp	r2, #9
 80045c8:	d950      	bls.n	800466c <_svfiprintf_r+0x180>
 80045ca:	2900      	cmp	r1, #0
 80045cc:	d111      	bne.n	80045f2 <_svfiprintf_r+0x106>
 80045ce:	e017      	b.n	8004600 <_svfiprintf_r+0x114>
 80045d0:	3501      	adds	r5, #1
 80045d2:	e7af      	b.n	8004534 <_svfiprintf_r+0x48>
 80045d4:	9b05      	ldr	r3, [sp, #20]
 80045d6:	6822      	ldr	r2, [r4, #0]
 80045d8:	1ac0      	subs	r0, r0, r3
 80045da:	2301      	movs	r3, #1
 80045dc:	4083      	lsls	r3, r0
 80045de:	4313      	orrs	r3, r2
 80045e0:	002e      	movs	r6, r5
 80045e2:	6023      	str	r3, [r4, #0]
 80045e4:	e7cc      	b.n	8004580 <_svfiprintf_r+0x94>
 80045e6:	9b07      	ldr	r3, [sp, #28]
 80045e8:	1d19      	adds	r1, r3, #4
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	9107      	str	r1, [sp, #28]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	db01      	blt.n	80045f6 <_svfiprintf_r+0x10a>
 80045f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045f4:	e004      	b.n	8004600 <_svfiprintf_r+0x114>
 80045f6:	425b      	negs	r3, r3
 80045f8:	60e3      	str	r3, [r4, #12]
 80045fa:	2302      	movs	r3, #2
 80045fc:	4313      	orrs	r3, r2
 80045fe:	6023      	str	r3, [r4, #0]
 8004600:	782b      	ldrb	r3, [r5, #0]
 8004602:	2b2e      	cmp	r3, #46	@ 0x2e
 8004604:	d10c      	bne.n	8004620 <_svfiprintf_r+0x134>
 8004606:	786b      	ldrb	r3, [r5, #1]
 8004608:	2b2a      	cmp	r3, #42	@ 0x2a
 800460a:	d134      	bne.n	8004676 <_svfiprintf_r+0x18a>
 800460c:	9b07      	ldr	r3, [sp, #28]
 800460e:	3502      	adds	r5, #2
 8004610:	1d1a      	adds	r2, r3, #4
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	9207      	str	r2, [sp, #28]
 8004616:	2b00      	cmp	r3, #0
 8004618:	da01      	bge.n	800461e <_svfiprintf_r+0x132>
 800461a:	2301      	movs	r3, #1
 800461c:	425b      	negs	r3, r3
 800461e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004620:	4e2d      	ldr	r6, [pc, #180]	@ (80046d8 <_svfiprintf_r+0x1ec>)
 8004622:	2203      	movs	r2, #3
 8004624:	0030      	movs	r0, r6
 8004626:	7829      	ldrb	r1, [r5, #0]
 8004628:	f000 fcba 	bl	8004fa0 <memchr>
 800462c:	2800      	cmp	r0, #0
 800462e:	d006      	beq.n	800463e <_svfiprintf_r+0x152>
 8004630:	2340      	movs	r3, #64	@ 0x40
 8004632:	1b80      	subs	r0, r0, r6
 8004634:	4083      	lsls	r3, r0
 8004636:	6822      	ldr	r2, [r4, #0]
 8004638:	3501      	adds	r5, #1
 800463a:	4313      	orrs	r3, r2
 800463c:	6023      	str	r3, [r4, #0]
 800463e:	7829      	ldrb	r1, [r5, #0]
 8004640:	2206      	movs	r2, #6
 8004642:	4826      	ldr	r0, [pc, #152]	@ (80046dc <_svfiprintf_r+0x1f0>)
 8004644:	1c6e      	adds	r6, r5, #1
 8004646:	7621      	strb	r1, [r4, #24]
 8004648:	f000 fcaa 	bl	8004fa0 <memchr>
 800464c:	2800      	cmp	r0, #0
 800464e:	d038      	beq.n	80046c2 <_svfiprintf_r+0x1d6>
 8004650:	4b23      	ldr	r3, [pc, #140]	@ (80046e0 <_svfiprintf_r+0x1f4>)
 8004652:	2b00      	cmp	r3, #0
 8004654:	d122      	bne.n	800469c <_svfiprintf_r+0x1b0>
 8004656:	2207      	movs	r2, #7
 8004658:	9b07      	ldr	r3, [sp, #28]
 800465a:	3307      	adds	r3, #7
 800465c:	4393      	bics	r3, r2
 800465e:	3308      	adds	r3, #8
 8004660:	9307      	str	r3, [sp, #28]
 8004662:	6963      	ldr	r3, [r4, #20]
 8004664:	9a04      	ldr	r2, [sp, #16]
 8004666:	189b      	adds	r3, r3, r2
 8004668:	6163      	str	r3, [r4, #20]
 800466a:	e762      	b.n	8004532 <_svfiprintf_r+0x46>
 800466c:	4343      	muls	r3, r0
 800466e:	0035      	movs	r5, r6
 8004670:	2101      	movs	r1, #1
 8004672:	189b      	adds	r3, r3, r2
 8004674:	e7a4      	b.n	80045c0 <_svfiprintf_r+0xd4>
 8004676:	2300      	movs	r3, #0
 8004678:	200a      	movs	r0, #10
 800467a:	0019      	movs	r1, r3
 800467c:	3501      	adds	r5, #1
 800467e:	6063      	str	r3, [r4, #4]
 8004680:	782a      	ldrb	r2, [r5, #0]
 8004682:	1c6e      	adds	r6, r5, #1
 8004684:	3a30      	subs	r2, #48	@ 0x30
 8004686:	2a09      	cmp	r2, #9
 8004688:	d903      	bls.n	8004692 <_svfiprintf_r+0x1a6>
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0c8      	beq.n	8004620 <_svfiprintf_r+0x134>
 800468e:	9109      	str	r1, [sp, #36]	@ 0x24
 8004690:	e7c6      	b.n	8004620 <_svfiprintf_r+0x134>
 8004692:	4341      	muls	r1, r0
 8004694:	0035      	movs	r5, r6
 8004696:	2301      	movs	r3, #1
 8004698:	1889      	adds	r1, r1, r2
 800469a:	e7f1      	b.n	8004680 <_svfiprintf_r+0x194>
 800469c:	aa07      	add	r2, sp, #28
 800469e:	9200      	str	r2, [sp, #0]
 80046a0:	0021      	movs	r1, r4
 80046a2:	003a      	movs	r2, r7
 80046a4:	4b0f      	ldr	r3, [pc, #60]	@ (80046e4 <_svfiprintf_r+0x1f8>)
 80046a6:	9803      	ldr	r0, [sp, #12]
 80046a8:	e000      	b.n	80046ac <_svfiprintf_r+0x1c0>
 80046aa:	bf00      	nop
 80046ac:	9004      	str	r0, [sp, #16]
 80046ae:	9b04      	ldr	r3, [sp, #16]
 80046b0:	3301      	adds	r3, #1
 80046b2:	d1d6      	bne.n	8004662 <_svfiprintf_r+0x176>
 80046b4:	89bb      	ldrh	r3, [r7, #12]
 80046b6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80046b8:	065b      	lsls	r3, r3, #25
 80046ba:	d500      	bpl.n	80046be <_svfiprintf_r+0x1d2>
 80046bc:	e72c      	b.n	8004518 <_svfiprintf_r+0x2c>
 80046be:	b021      	add	sp, #132	@ 0x84
 80046c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046c2:	aa07      	add	r2, sp, #28
 80046c4:	9200      	str	r2, [sp, #0]
 80046c6:	0021      	movs	r1, r4
 80046c8:	003a      	movs	r2, r7
 80046ca:	4b06      	ldr	r3, [pc, #24]	@ (80046e4 <_svfiprintf_r+0x1f8>)
 80046cc:	9803      	ldr	r0, [sp, #12]
 80046ce:	f000 f9bf 	bl	8004a50 <_printf_i>
 80046d2:	e7eb      	b.n	80046ac <_svfiprintf_r+0x1c0>
 80046d4:	080054f0 	.word	0x080054f0
 80046d8:	080054f6 	.word	0x080054f6
 80046dc:	080054fa 	.word	0x080054fa
 80046e0:	00000000 	.word	0x00000000
 80046e4:	0800442d 	.word	0x0800442d

080046e8 <__sfputc_r>:
 80046e8:	6893      	ldr	r3, [r2, #8]
 80046ea:	b510      	push	{r4, lr}
 80046ec:	3b01      	subs	r3, #1
 80046ee:	6093      	str	r3, [r2, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	da04      	bge.n	80046fe <__sfputc_r+0x16>
 80046f4:	6994      	ldr	r4, [r2, #24]
 80046f6:	42a3      	cmp	r3, r4
 80046f8:	db07      	blt.n	800470a <__sfputc_r+0x22>
 80046fa:	290a      	cmp	r1, #10
 80046fc:	d005      	beq.n	800470a <__sfputc_r+0x22>
 80046fe:	6813      	ldr	r3, [r2, #0]
 8004700:	1c58      	adds	r0, r3, #1
 8004702:	6010      	str	r0, [r2, #0]
 8004704:	7019      	strb	r1, [r3, #0]
 8004706:	0008      	movs	r0, r1
 8004708:	bd10      	pop	{r4, pc}
 800470a:	f7ff fc67 	bl	8003fdc <__swbuf_r>
 800470e:	0001      	movs	r1, r0
 8004710:	e7f9      	b.n	8004706 <__sfputc_r+0x1e>

08004712 <__sfputs_r>:
 8004712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004714:	0006      	movs	r6, r0
 8004716:	000f      	movs	r7, r1
 8004718:	0014      	movs	r4, r2
 800471a:	18d5      	adds	r5, r2, r3
 800471c:	42ac      	cmp	r4, r5
 800471e:	d101      	bne.n	8004724 <__sfputs_r+0x12>
 8004720:	2000      	movs	r0, #0
 8004722:	e007      	b.n	8004734 <__sfputs_r+0x22>
 8004724:	7821      	ldrb	r1, [r4, #0]
 8004726:	003a      	movs	r2, r7
 8004728:	0030      	movs	r0, r6
 800472a:	f7ff ffdd 	bl	80046e8 <__sfputc_r>
 800472e:	3401      	adds	r4, #1
 8004730:	1c43      	adds	r3, r0, #1
 8004732:	d1f3      	bne.n	800471c <__sfputs_r+0xa>
 8004734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004738 <_vfiprintf_r>:
 8004738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800473a:	b0a1      	sub	sp, #132	@ 0x84
 800473c:	000f      	movs	r7, r1
 800473e:	0015      	movs	r5, r2
 8004740:	001e      	movs	r6, r3
 8004742:	9003      	str	r0, [sp, #12]
 8004744:	2800      	cmp	r0, #0
 8004746:	d004      	beq.n	8004752 <_vfiprintf_r+0x1a>
 8004748:	6a03      	ldr	r3, [r0, #32]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <_vfiprintf_r+0x1a>
 800474e:	f7ff fb15 	bl	8003d7c <__sinit>
 8004752:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004754:	07db      	lsls	r3, r3, #31
 8004756:	d405      	bmi.n	8004764 <_vfiprintf_r+0x2c>
 8004758:	89bb      	ldrh	r3, [r7, #12]
 800475a:	059b      	lsls	r3, r3, #22
 800475c:	d402      	bmi.n	8004764 <_vfiprintf_r+0x2c>
 800475e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004760:	f7ff fd5d 	bl	800421e <__retarget_lock_acquire_recursive>
 8004764:	89bb      	ldrh	r3, [r7, #12]
 8004766:	071b      	lsls	r3, r3, #28
 8004768:	d502      	bpl.n	8004770 <_vfiprintf_r+0x38>
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d113      	bne.n	8004798 <_vfiprintf_r+0x60>
 8004770:	0039      	movs	r1, r7
 8004772:	9803      	ldr	r0, [sp, #12]
 8004774:	f7ff fc74 	bl	8004060 <__swsetup_r>
 8004778:	2800      	cmp	r0, #0
 800477a:	d00d      	beq.n	8004798 <_vfiprintf_r+0x60>
 800477c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800477e:	07db      	lsls	r3, r3, #31
 8004780:	d503      	bpl.n	800478a <_vfiprintf_r+0x52>
 8004782:	2001      	movs	r0, #1
 8004784:	4240      	negs	r0, r0
 8004786:	b021      	add	sp, #132	@ 0x84
 8004788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800478a:	89bb      	ldrh	r3, [r7, #12]
 800478c:	059b      	lsls	r3, r3, #22
 800478e:	d4f8      	bmi.n	8004782 <_vfiprintf_r+0x4a>
 8004790:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004792:	f7ff fd45 	bl	8004220 <__retarget_lock_release_recursive>
 8004796:	e7f4      	b.n	8004782 <_vfiprintf_r+0x4a>
 8004798:	2300      	movs	r3, #0
 800479a:	ac08      	add	r4, sp, #32
 800479c:	6163      	str	r3, [r4, #20]
 800479e:	3320      	adds	r3, #32
 80047a0:	7663      	strb	r3, [r4, #25]
 80047a2:	3310      	adds	r3, #16
 80047a4:	76a3      	strb	r3, [r4, #26]
 80047a6:	9607      	str	r6, [sp, #28]
 80047a8:	002e      	movs	r6, r5
 80047aa:	7833      	ldrb	r3, [r6, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <_vfiprintf_r+0x7c>
 80047b0:	2b25      	cmp	r3, #37	@ 0x25
 80047b2:	d148      	bne.n	8004846 <_vfiprintf_r+0x10e>
 80047b4:	1b73      	subs	r3, r6, r5
 80047b6:	9305      	str	r3, [sp, #20]
 80047b8:	42ae      	cmp	r6, r5
 80047ba:	d00b      	beq.n	80047d4 <_vfiprintf_r+0x9c>
 80047bc:	002a      	movs	r2, r5
 80047be:	0039      	movs	r1, r7
 80047c0:	9803      	ldr	r0, [sp, #12]
 80047c2:	f7ff ffa6 	bl	8004712 <__sfputs_r>
 80047c6:	3001      	adds	r0, #1
 80047c8:	d100      	bne.n	80047cc <_vfiprintf_r+0x94>
 80047ca:	e0ae      	b.n	800492a <_vfiprintf_r+0x1f2>
 80047cc:	6963      	ldr	r3, [r4, #20]
 80047ce:	9a05      	ldr	r2, [sp, #20]
 80047d0:	189b      	adds	r3, r3, r2
 80047d2:	6163      	str	r3, [r4, #20]
 80047d4:	7833      	ldrb	r3, [r6, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d100      	bne.n	80047dc <_vfiprintf_r+0xa4>
 80047da:	e0a6      	b.n	800492a <_vfiprintf_r+0x1f2>
 80047dc:	2201      	movs	r2, #1
 80047de:	2300      	movs	r3, #0
 80047e0:	4252      	negs	r2, r2
 80047e2:	6062      	str	r2, [r4, #4]
 80047e4:	a904      	add	r1, sp, #16
 80047e6:	3254      	adds	r2, #84	@ 0x54
 80047e8:	1852      	adds	r2, r2, r1
 80047ea:	1c75      	adds	r5, r6, #1
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	60e3      	str	r3, [r4, #12]
 80047f0:	60a3      	str	r3, [r4, #8]
 80047f2:	7013      	strb	r3, [r2, #0]
 80047f4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80047f6:	4b59      	ldr	r3, [pc, #356]	@ (800495c <_vfiprintf_r+0x224>)
 80047f8:	2205      	movs	r2, #5
 80047fa:	0018      	movs	r0, r3
 80047fc:	7829      	ldrb	r1, [r5, #0]
 80047fe:	9305      	str	r3, [sp, #20]
 8004800:	f000 fbce 	bl	8004fa0 <memchr>
 8004804:	1c6e      	adds	r6, r5, #1
 8004806:	2800      	cmp	r0, #0
 8004808:	d11f      	bne.n	800484a <_vfiprintf_r+0x112>
 800480a:	6822      	ldr	r2, [r4, #0]
 800480c:	06d3      	lsls	r3, r2, #27
 800480e:	d504      	bpl.n	800481a <_vfiprintf_r+0xe2>
 8004810:	2353      	movs	r3, #83	@ 0x53
 8004812:	a904      	add	r1, sp, #16
 8004814:	185b      	adds	r3, r3, r1
 8004816:	2120      	movs	r1, #32
 8004818:	7019      	strb	r1, [r3, #0]
 800481a:	0713      	lsls	r3, r2, #28
 800481c:	d504      	bpl.n	8004828 <_vfiprintf_r+0xf0>
 800481e:	2353      	movs	r3, #83	@ 0x53
 8004820:	a904      	add	r1, sp, #16
 8004822:	185b      	adds	r3, r3, r1
 8004824:	212b      	movs	r1, #43	@ 0x2b
 8004826:	7019      	strb	r1, [r3, #0]
 8004828:	782b      	ldrb	r3, [r5, #0]
 800482a:	2b2a      	cmp	r3, #42	@ 0x2a
 800482c:	d016      	beq.n	800485c <_vfiprintf_r+0x124>
 800482e:	002e      	movs	r6, r5
 8004830:	2100      	movs	r1, #0
 8004832:	200a      	movs	r0, #10
 8004834:	68e3      	ldr	r3, [r4, #12]
 8004836:	7832      	ldrb	r2, [r6, #0]
 8004838:	1c75      	adds	r5, r6, #1
 800483a:	3a30      	subs	r2, #48	@ 0x30
 800483c:	2a09      	cmp	r2, #9
 800483e:	d950      	bls.n	80048e2 <_vfiprintf_r+0x1aa>
 8004840:	2900      	cmp	r1, #0
 8004842:	d111      	bne.n	8004868 <_vfiprintf_r+0x130>
 8004844:	e017      	b.n	8004876 <_vfiprintf_r+0x13e>
 8004846:	3601      	adds	r6, #1
 8004848:	e7af      	b.n	80047aa <_vfiprintf_r+0x72>
 800484a:	9b05      	ldr	r3, [sp, #20]
 800484c:	6822      	ldr	r2, [r4, #0]
 800484e:	1ac0      	subs	r0, r0, r3
 8004850:	2301      	movs	r3, #1
 8004852:	4083      	lsls	r3, r0
 8004854:	4313      	orrs	r3, r2
 8004856:	0035      	movs	r5, r6
 8004858:	6023      	str	r3, [r4, #0]
 800485a:	e7cc      	b.n	80047f6 <_vfiprintf_r+0xbe>
 800485c:	9b07      	ldr	r3, [sp, #28]
 800485e:	1d19      	adds	r1, r3, #4
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	9107      	str	r1, [sp, #28]
 8004864:	2b00      	cmp	r3, #0
 8004866:	db01      	blt.n	800486c <_vfiprintf_r+0x134>
 8004868:	930b      	str	r3, [sp, #44]	@ 0x2c
 800486a:	e004      	b.n	8004876 <_vfiprintf_r+0x13e>
 800486c:	425b      	negs	r3, r3
 800486e:	60e3      	str	r3, [r4, #12]
 8004870:	2302      	movs	r3, #2
 8004872:	4313      	orrs	r3, r2
 8004874:	6023      	str	r3, [r4, #0]
 8004876:	7833      	ldrb	r3, [r6, #0]
 8004878:	2b2e      	cmp	r3, #46	@ 0x2e
 800487a:	d10c      	bne.n	8004896 <_vfiprintf_r+0x15e>
 800487c:	7873      	ldrb	r3, [r6, #1]
 800487e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004880:	d134      	bne.n	80048ec <_vfiprintf_r+0x1b4>
 8004882:	9b07      	ldr	r3, [sp, #28]
 8004884:	3602      	adds	r6, #2
 8004886:	1d1a      	adds	r2, r3, #4
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	9207      	str	r2, [sp, #28]
 800488c:	2b00      	cmp	r3, #0
 800488e:	da01      	bge.n	8004894 <_vfiprintf_r+0x15c>
 8004890:	2301      	movs	r3, #1
 8004892:	425b      	negs	r3, r3
 8004894:	9309      	str	r3, [sp, #36]	@ 0x24
 8004896:	4d32      	ldr	r5, [pc, #200]	@ (8004960 <_vfiprintf_r+0x228>)
 8004898:	2203      	movs	r2, #3
 800489a:	0028      	movs	r0, r5
 800489c:	7831      	ldrb	r1, [r6, #0]
 800489e:	f000 fb7f 	bl	8004fa0 <memchr>
 80048a2:	2800      	cmp	r0, #0
 80048a4:	d006      	beq.n	80048b4 <_vfiprintf_r+0x17c>
 80048a6:	2340      	movs	r3, #64	@ 0x40
 80048a8:	1b40      	subs	r0, r0, r5
 80048aa:	4083      	lsls	r3, r0
 80048ac:	6822      	ldr	r2, [r4, #0]
 80048ae:	3601      	adds	r6, #1
 80048b0:	4313      	orrs	r3, r2
 80048b2:	6023      	str	r3, [r4, #0]
 80048b4:	7831      	ldrb	r1, [r6, #0]
 80048b6:	2206      	movs	r2, #6
 80048b8:	482a      	ldr	r0, [pc, #168]	@ (8004964 <_vfiprintf_r+0x22c>)
 80048ba:	1c75      	adds	r5, r6, #1
 80048bc:	7621      	strb	r1, [r4, #24]
 80048be:	f000 fb6f 	bl	8004fa0 <memchr>
 80048c2:	2800      	cmp	r0, #0
 80048c4:	d040      	beq.n	8004948 <_vfiprintf_r+0x210>
 80048c6:	4b28      	ldr	r3, [pc, #160]	@ (8004968 <_vfiprintf_r+0x230>)
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d122      	bne.n	8004912 <_vfiprintf_r+0x1da>
 80048cc:	2207      	movs	r2, #7
 80048ce:	9b07      	ldr	r3, [sp, #28]
 80048d0:	3307      	adds	r3, #7
 80048d2:	4393      	bics	r3, r2
 80048d4:	3308      	adds	r3, #8
 80048d6:	9307      	str	r3, [sp, #28]
 80048d8:	6963      	ldr	r3, [r4, #20]
 80048da:	9a04      	ldr	r2, [sp, #16]
 80048dc:	189b      	adds	r3, r3, r2
 80048de:	6163      	str	r3, [r4, #20]
 80048e0:	e762      	b.n	80047a8 <_vfiprintf_r+0x70>
 80048e2:	4343      	muls	r3, r0
 80048e4:	002e      	movs	r6, r5
 80048e6:	2101      	movs	r1, #1
 80048e8:	189b      	adds	r3, r3, r2
 80048ea:	e7a4      	b.n	8004836 <_vfiprintf_r+0xfe>
 80048ec:	2300      	movs	r3, #0
 80048ee:	200a      	movs	r0, #10
 80048f0:	0019      	movs	r1, r3
 80048f2:	3601      	adds	r6, #1
 80048f4:	6063      	str	r3, [r4, #4]
 80048f6:	7832      	ldrb	r2, [r6, #0]
 80048f8:	1c75      	adds	r5, r6, #1
 80048fa:	3a30      	subs	r2, #48	@ 0x30
 80048fc:	2a09      	cmp	r2, #9
 80048fe:	d903      	bls.n	8004908 <_vfiprintf_r+0x1d0>
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0c8      	beq.n	8004896 <_vfiprintf_r+0x15e>
 8004904:	9109      	str	r1, [sp, #36]	@ 0x24
 8004906:	e7c6      	b.n	8004896 <_vfiprintf_r+0x15e>
 8004908:	4341      	muls	r1, r0
 800490a:	002e      	movs	r6, r5
 800490c:	2301      	movs	r3, #1
 800490e:	1889      	adds	r1, r1, r2
 8004910:	e7f1      	b.n	80048f6 <_vfiprintf_r+0x1be>
 8004912:	aa07      	add	r2, sp, #28
 8004914:	9200      	str	r2, [sp, #0]
 8004916:	0021      	movs	r1, r4
 8004918:	003a      	movs	r2, r7
 800491a:	4b14      	ldr	r3, [pc, #80]	@ (800496c <_vfiprintf_r+0x234>)
 800491c:	9803      	ldr	r0, [sp, #12]
 800491e:	e000      	b.n	8004922 <_vfiprintf_r+0x1ea>
 8004920:	bf00      	nop
 8004922:	9004      	str	r0, [sp, #16]
 8004924:	9b04      	ldr	r3, [sp, #16]
 8004926:	3301      	adds	r3, #1
 8004928:	d1d6      	bne.n	80048d8 <_vfiprintf_r+0x1a0>
 800492a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800492c:	07db      	lsls	r3, r3, #31
 800492e:	d405      	bmi.n	800493c <_vfiprintf_r+0x204>
 8004930:	89bb      	ldrh	r3, [r7, #12]
 8004932:	059b      	lsls	r3, r3, #22
 8004934:	d402      	bmi.n	800493c <_vfiprintf_r+0x204>
 8004936:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004938:	f7ff fc72 	bl	8004220 <__retarget_lock_release_recursive>
 800493c:	89bb      	ldrh	r3, [r7, #12]
 800493e:	065b      	lsls	r3, r3, #25
 8004940:	d500      	bpl.n	8004944 <_vfiprintf_r+0x20c>
 8004942:	e71e      	b.n	8004782 <_vfiprintf_r+0x4a>
 8004944:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004946:	e71e      	b.n	8004786 <_vfiprintf_r+0x4e>
 8004948:	aa07      	add	r2, sp, #28
 800494a:	9200      	str	r2, [sp, #0]
 800494c:	0021      	movs	r1, r4
 800494e:	003a      	movs	r2, r7
 8004950:	4b06      	ldr	r3, [pc, #24]	@ (800496c <_vfiprintf_r+0x234>)
 8004952:	9803      	ldr	r0, [sp, #12]
 8004954:	f000 f87c 	bl	8004a50 <_printf_i>
 8004958:	e7e3      	b.n	8004922 <_vfiprintf_r+0x1ea>
 800495a:	46c0      	nop			@ (mov r8, r8)
 800495c:	080054f0 	.word	0x080054f0
 8004960:	080054f6 	.word	0x080054f6
 8004964:	080054fa 	.word	0x080054fa
 8004968:	00000000 	.word	0x00000000
 800496c:	08004713 	.word	0x08004713

08004970 <_printf_common>:
 8004970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004972:	0016      	movs	r6, r2
 8004974:	9301      	str	r3, [sp, #4]
 8004976:	688a      	ldr	r2, [r1, #8]
 8004978:	690b      	ldr	r3, [r1, #16]
 800497a:	000c      	movs	r4, r1
 800497c:	9000      	str	r0, [sp, #0]
 800497e:	4293      	cmp	r3, r2
 8004980:	da00      	bge.n	8004984 <_printf_common+0x14>
 8004982:	0013      	movs	r3, r2
 8004984:	0022      	movs	r2, r4
 8004986:	6033      	str	r3, [r6, #0]
 8004988:	3243      	adds	r2, #67	@ 0x43
 800498a:	7812      	ldrb	r2, [r2, #0]
 800498c:	2a00      	cmp	r2, #0
 800498e:	d001      	beq.n	8004994 <_printf_common+0x24>
 8004990:	3301      	adds	r3, #1
 8004992:	6033      	str	r3, [r6, #0]
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	069b      	lsls	r3, r3, #26
 8004998:	d502      	bpl.n	80049a0 <_printf_common+0x30>
 800499a:	6833      	ldr	r3, [r6, #0]
 800499c:	3302      	adds	r3, #2
 800499e:	6033      	str	r3, [r6, #0]
 80049a0:	6822      	ldr	r2, [r4, #0]
 80049a2:	2306      	movs	r3, #6
 80049a4:	0015      	movs	r5, r2
 80049a6:	401d      	ands	r5, r3
 80049a8:	421a      	tst	r2, r3
 80049aa:	d027      	beq.n	80049fc <_printf_common+0x8c>
 80049ac:	0023      	movs	r3, r4
 80049ae:	3343      	adds	r3, #67	@ 0x43
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	1e5a      	subs	r2, r3, #1
 80049b4:	4193      	sbcs	r3, r2
 80049b6:	6822      	ldr	r2, [r4, #0]
 80049b8:	0692      	lsls	r2, r2, #26
 80049ba:	d430      	bmi.n	8004a1e <_printf_common+0xae>
 80049bc:	0022      	movs	r2, r4
 80049be:	9901      	ldr	r1, [sp, #4]
 80049c0:	9800      	ldr	r0, [sp, #0]
 80049c2:	9d08      	ldr	r5, [sp, #32]
 80049c4:	3243      	adds	r2, #67	@ 0x43
 80049c6:	47a8      	blx	r5
 80049c8:	3001      	adds	r0, #1
 80049ca:	d025      	beq.n	8004a18 <_printf_common+0xa8>
 80049cc:	2206      	movs	r2, #6
 80049ce:	6823      	ldr	r3, [r4, #0]
 80049d0:	2500      	movs	r5, #0
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d105      	bne.n	80049e4 <_printf_common+0x74>
 80049d8:	6833      	ldr	r3, [r6, #0]
 80049da:	68e5      	ldr	r5, [r4, #12]
 80049dc:	1aed      	subs	r5, r5, r3
 80049de:	43eb      	mvns	r3, r5
 80049e0:	17db      	asrs	r3, r3, #31
 80049e2:	401d      	ands	r5, r3
 80049e4:	68a3      	ldr	r3, [r4, #8]
 80049e6:	6922      	ldr	r2, [r4, #16]
 80049e8:	4293      	cmp	r3, r2
 80049ea:	dd01      	ble.n	80049f0 <_printf_common+0x80>
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	18ed      	adds	r5, r5, r3
 80049f0:	2600      	movs	r6, #0
 80049f2:	42b5      	cmp	r5, r6
 80049f4:	d120      	bne.n	8004a38 <_printf_common+0xc8>
 80049f6:	2000      	movs	r0, #0
 80049f8:	e010      	b.n	8004a1c <_printf_common+0xac>
 80049fa:	3501      	adds	r5, #1
 80049fc:	68e3      	ldr	r3, [r4, #12]
 80049fe:	6832      	ldr	r2, [r6, #0]
 8004a00:	1a9b      	subs	r3, r3, r2
 8004a02:	42ab      	cmp	r3, r5
 8004a04:	ddd2      	ble.n	80049ac <_printf_common+0x3c>
 8004a06:	0022      	movs	r2, r4
 8004a08:	2301      	movs	r3, #1
 8004a0a:	9901      	ldr	r1, [sp, #4]
 8004a0c:	9800      	ldr	r0, [sp, #0]
 8004a0e:	9f08      	ldr	r7, [sp, #32]
 8004a10:	3219      	adds	r2, #25
 8004a12:	47b8      	blx	r7
 8004a14:	3001      	adds	r0, #1
 8004a16:	d1f0      	bne.n	80049fa <_printf_common+0x8a>
 8004a18:	2001      	movs	r0, #1
 8004a1a:	4240      	negs	r0, r0
 8004a1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a1e:	2030      	movs	r0, #48	@ 0x30
 8004a20:	18e1      	adds	r1, r4, r3
 8004a22:	3143      	adds	r1, #67	@ 0x43
 8004a24:	7008      	strb	r0, [r1, #0]
 8004a26:	0021      	movs	r1, r4
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	3145      	adds	r1, #69	@ 0x45
 8004a2c:	7809      	ldrb	r1, [r1, #0]
 8004a2e:	18a2      	adds	r2, r4, r2
 8004a30:	3243      	adds	r2, #67	@ 0x43
 8004a32:	3302      	adds	r3, #2
 8004a34:	7011      	strb	r1, [r2, #0]
 8004a36:	e7c1      	b.n	80049bc <_printf_common+0x4c>
 8004a38:	0022      	movs	r2, r4
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	9901      	ldr	r1, [sp, #4]
 8004a3e:	9800      	ldr	r0, [sp, #0]
 8004a40:	9f08      	ldr	r7, [sp, #32]
 8004a42:	321a      	adds	r2, #26
 8004a44:	47b8      	blx	r7
 8004a46:	3001      	adds	r0, #1
 8004a48:	d0e6      	beq.n	8004a18 <_printf_common+0xa8>
 8004a4a:	3601      	adds	r6, #1
 8004a4c:	e7d1      	b.n	80049f2 <_printf_common+0x82>
	...

08004a50 <_printf_i>:
 8004a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a52:	b08b      	sub	sp, #44	@ 0x2c
 8004a54:	9206      	str	r2, [sp, #24]
 8004a56:	000a      	movs	r2, r1
 8004a58:	3243      	adds	r2, #67	@ 0x43
 8004a5a:	9307      	str	r3, [sp, #28]
 8004a5c:	9005      	str	r0, [sp, #20]
 8004a5e:	9203      	str	r2, [sp, #12]
 8004a60:	7e0a      	ldrb	r2, [r1, #24]
 8004a62:	000c      	movs	r4, r1
 8004a64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004a66:	2a78      	cmp	r2, #120	@ 0x78
 8004a68:	d809      	bhi.n	8004a7e <_printf_i+0x2e>
 8004a6a:	2a62      	cmp	r2, #98	@ 0x62
 8004a6c:	d80b      	bhi.n	8004a86 <_printf_i+0x36>
 8004a6e:	2a00      	cmp	r2, #0
 8004a70:	d100      	bne.n	8004a74 <_printf_i+0x24>
 8004a72:	e0ba      	b.n	8004bea <_printf_i+0x19a>
 8004a74:	497a      	ldr	r1, [pc, #488]	@ (8004c60 <_printf_i+0x210>)
 8004a76:	9104      	str	r1, [sp, #16]
 8004a78:	2a58      	cmp	r2, #88	@ 0x58
 8004a7a:	d100      	bne.n	8004a7e <_printf_i+0x2e>
 8004a7c:	e08e      	b.n	8004b9c <_printf_i+0x14c>
 8004a7e:	0025      	movs	r5, r4
 8004a80:	3542      	adds	r5, #66	@ 0x42
 8004a82:	702a      	strb	r2, [r5, #0]
 8004a84:	e022      	b.n	8004acc <_printf_i+0x7c>
 8004a86:	0010      	movs	r0, r2
 8004a88:	3863      	subs	r0, #99	@ 0x63
 8004a8a:	2815      	cmp	r0, #21
 8004a8c:	d8f7      	bhi.n	8004a7e <_printf_i+0x2e>
 8004a8e:	f7fb fb3b 	bl	8000108 <__gnu_thumb1_case_shi>
 8004a92:	0016      	.short	0x0016
 8004a94:	fff6001f 	.word	0xfff6001f
 8004a98:	fff6fff6 	.word	0xfff6fff6
 8004a9c:	001ffff6 	.word	0x001ffff6
 8004aa0:	fff6fff6 	.word	0xfff6fff6
 8004aa4:	fff6fff6 	.word	0xfff6fff6
 8004aa8:	0036009f 	.word	0x0036009f
 8004aac:	fff6007e 	.word	0xfff6007e
 8004ab0:	00b0fff6 	.word	0x00b0fff6
 8004ab4:	0036fff6 	.word	0x0036fff6
 8004ab8:	fff6fff6 	.word	0xfff6fff6
 8004abc:	0082      	.short	0x0082
 8004abe:	0025      	movs	r5, r4
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	3542      	adds	r5, #66	@ 0x42
 8004ac4:	1d11      	adds	r1, r2, #4
 8004ac6:	6019      	str	r1, [r3, #0]
 8004ac8:	6813      	ldr	r3, [r2, #0]
 8004aca:	702b      	strb	r3, [r5, #0]
 8004acc:	2301      	movs	r3, #1
 8004ace:	e09e      	b.n	8004c0e <_printf_i+0x1be>
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	6809      	ldr	r1, [r1, #0]
 8004ad4:	1d02      	adds	r2, r0, #4
 8004ad6:	060d      	lsls	r5, r1, #24
 8004ad8:	d50b      	bpl.n	8004af2 <_printf_i+0xa2>
 8004ada:	6806      	ldr	r6, [r0, #0]
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	2e00      	cmp	r6, #0
 8004ae0:	da03      	bge.n	8004aea <_printf_i+0x9a>
 8004ae2:	232d      	movs	r3, #45	@ 0x2d
 8004ae4:	9a03      	ldr	r2, [sp, #12]
 8004ae6:	4276      	negs	r6, r6
 8004ae8:	7013      	strb	r3, [r2, #0]
 8004aea:	4b5d      	ldr	r3, [pc, #372]	@ (8004c60 <_printf_i+0x210>)
 8004aec:	270a      	movs	r7, #10
 8004aee:	9304      	str	r3, [sp, #16]
 8004af0:	e018      	b.n	8004b24 <_printf_i+0xd4>
 8004af2:	6806      	ldr	r6, [r0, #0]
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	0649      	lsls	r1, r1, #25
 8004af8:	d5f1      	bpl.n	8004ade <_printf_i+0x8e>
 8004afa:	b236      	sxth	r6, r6
 8004afc:	e7ef      	b.n	8004ade <_printf_i+0x8e>
 8004afe:	6808      	ldr	r0, [r1, #0]
 8004b00:	6819      	ldr	r1, [r3, #0]
 8004b02:	c940      	ldmia	r1!, {r6}
 8004b04:	0605      	lsls	r5, r0, #24
 8004b06:	d402      	bmi.n	8004b0e <_printf_i+0xbe>
 8004b08:	0640      	lsls	r0, r0, #25
 8004b0a:	d500      	bpl.n	8004b0e <_printf_i+0xbe>
 8004b0c:	b2b6      	uxth	r6, r6
 8004b0e:	6019      	str	r1, [r3, #0]
 8004b10:	4b53      	ldr	r3, [pc, #332]	@ (8004c60 <_printf_i+0x210>)
 8004b12:	270a      	movs	r7, #10
 8004b14:	9304      	str	r3, [sp, #16]
 8004b16:	2a6f      	cmp	r2, #111	@ 0x6f
 8004b18:	d100      	bne.n	8004b1c <_printf_i+0xcc>
 8004b1a:	3f02      	subs	r7, #2
 8004b1c:	0023      	movs	r3, r4
 8004b1e:	2200      	movs	r2, #0
 8004b20:	3343      	adds	r3, #67	@ 0x43
 8004b22:	701a      	strb	r2, [r3, #0]
 8004b24:	6863      	ldr	r3, [r4, #4]
 8004b26:	60a3      	str	r3, [r4, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	db06      	blt.n	8004b3a <_printf_i+0xea>
 8004b2c:	2104      	movs	r1, #4
 8004b2e:	6822      	ldr	r2, [r4, #0]
 8004b30:	9d03      	ldr	r5, [sp, #12]
 8004b32:	438a      	bics	r2, r1
 8004b34:	6022      	str	r2, [r4, #0]
 8004b36:	4333      	orrs	r3, r6
 8004b38:	d00c      	beq.n	8004b54 <_printf_i+0x104>
 8004b3a:	9d03      	ldr	r5, [sp, #12]
 8004b3c:	0030      	movs	r0, r6
 8004b3e:	0039      	movs	r1, r7
 8004b40:	f7fb fb72 	bl	8000228 <__aeabi_uidivmod>
 8004b44:	9b04      	ldr	r3, [sp, #16]
 8004b46:	3d01      	subs	r5, #1
 8004b48:	5c5b      	ldrb	r3, [r3, r1]
 8004b4a:	702b      	strb	r3, [r5, #0]
 8004b4c:	0033      	movs	r3, r6
 8004b4e:	0006      	movs	r6, r0
 8004b50:	429f      	cmp	r7, r3
 8004b52:	d9f3      	bls.n	8004b3c <_printf_i+0xec>
 8004b54:	2f08      	cmp	r7, #8
 8004b56:	d109      	bne.n	8004b6c <_printf_i+0x11c>
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	07db      	lsls	r3, r3, #31
 8004b5c:	d506      	bpl.n	8004b6c <_printf_i+0x11c>
 8004b5e:	6862      	ldr	r2, [r4, #4]
 8004b60:	6923      	ldr	r3, [r4, #16]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	dc02      	bgt.n	8004b6c <_printf_i+0x11c>
 8004b66:	2330      	movs	r3, #48	@ 0x30
 8004b68:	3d01      	subs	r5, #1
 8004b6a:	702b      	strb	r3, [r5, #0]
 8004b6c:	9b03      	ldr	r3, [sp, #12]
 8004b6e:	1b5b      	subs	r3, r3, r5
 8004b70:	6123      	str	r3, [r4, #16]
 8004b72:	9b07      	ldr	r3, [sp, #28]
 8004b74:	0021      	movs	r1, r4
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	9805      	ldr	r0, [sp, #20]
 8004b7a:	9b06      	ldr	r3, [sp, #24]
 8004b7c:	aa09      	add	r2, sp, #36	@ 0x24
 8004b7e:	f7ff fef7 	bl	8004970 <_printf_common>
 8004b82:	3001      	adds	r0, #1
 8004b84:	d148      	bne.n	8004c18 <_printf_i+0x1c8>
 8004b86:	2001      	movs	r0, #1
 8004b88:	4240      	negs	r0, r0
 8004b8a:	b00b      	add	sp, #44	@ 0x2c
 8004b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b8e:	2220      	movs	r2, #32
 8004b90:	6809      	ldr	r1, [r1, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	6022      	str	r2, [r4, #0]
 8004b96:	2278      	movs	r2, #120	@ 0x78
 8004b98:	4932      	ldr	r1, [pc, #200]	@ (8004c64 <_printf_i+0x214>)
 8004b9a:	9104      	str	r1, [sp, #16]
 8004b9c:	0021      	movs	r1, r4
 8004b9e:	3145      	adds	r1, #69	@ 0x45
 8004ba0:	700a      	strb	r2, [r1, #0]
 8004ba2:	6819      	ldr	r1, [r3, #0]
 8004ba4:	6822      	ldr	r2, [r4, #0]
 8004ba6:	c940      	ldmia	r1!, {r6}
 8004ba8:	0610      	lsls	r0, r2, #24
 8004baa:	d402      	bmi.n	8004bb2 <_printf_i+0x162>
 8004bac:	0650      	lsls	r0, r2, #25
 8004bae:	d500      	bpl.n	8004bb2 <_printf_i+0x162>
 8004bb0:	b2b6      	uxth	r6, r6
 8004bb2:	6019      	str	r1, [r3, #0]
 8004bb4:	07d3      	lsls	r3, r2, #31
 8004bb6:	d502      	bpl.n	8004bbe <_printf_i+0x16e>
 8004bb8:	2320      	movs	r3, #32
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	2e00      	cmp	r6, #0
 8004bc0:	d001      	beq.n	8004bc6 <_printf_i+0x176>
 8004bc2:	2710      	movs	r7, #16
 8004bc4:	e7aa      	b.n	8004b1c <_printf_i+0xcc>
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	4393      	bics	r3, r2
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	e7f8      	b.n	8004bc2 <_printf_i+0x172>
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	680d      	ldr	r5, [r1, #0]
 8004bd4:	1d10      	adds	r0, r2, #4
 8004bd6:	6949      	ldr	r1, [r1, #20]
 8004bd8:	6018      	str	r0, [r3, #0]
 8004bda:	6813      	ldr	r3, [r2, #0]
 8004bdc:	062e      	lsls	r6, r5, #24
 8004bde:	d501      	bpl.n	8004be4 <_printf_i+0x194>
 8004be0:	6019      	str	r1, [r3, #0]
 8004be2:	e002      	b.n	8004bea <_printf_i+0x19a>
 8004be4:	066d      	lsls	r5, r5, #25
 8004be6:	d5fb      	bpl.n	8004be0 <_printf_i+0x190>
 8004be8:	8019      	strh	r1, [r3, #0]
 8004bea:	2300      	movs	r3, #0
 8004bec:	9d03      	ldr	r5, [sp, #12]
 8004bee:	6123      	str	r3, [r4, #16]
 8004bf0:	e7bf      	b.n	8004b72 <_printf_i+0x122>
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	1d11      	adds	r1, r2, #4
 8004bf6:	6019      	str	r1, [r3, #0]
 8004bf8:	6815      	ldr	r5, [r2, #0]
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	0028      	movs	r0, r5
 8004bfe:	6862      	ldr	r2, [r4, #4]
 8004c00:	f000 f9ce 	bl	8004fa0 <memchr>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d001      	beq.n	8004c0c <_printf_i+0x1bc>
 8004c08:	1b40      	subs	r0, r0, r5
 8004c0a:	6060      	str	r0, [r4, #4]
 8004c0c:	6863      	ldr	r3, [r4, #4]
 8004c0e:	6123      	str	r3, [r4, #16]
 8004c10:	2300      	movs	r3, #0
 8004c12:	9a03      	ldr	r2, [sp, #12]
 8004c14:	7013      	strb	r3, [r2, #0]
 8004c16:	e7ac      	b.n	8004b72 <_printf_i+0x122>
 8004c18:	002a      	movs	r2, r5
 8004c1a:	6923      	ldr	r3, [r4, #16]
 8004c1c:	9906      	ldr	r1, [sp, #24]
 8004c1e:	9805      	ldr	r0, [sp, #20]
 8004c20:	9d07      	ldr	r5, [sp, #28]
 8004c22:	47a8      	blx	r5
 8004c24:	3001      	adds	r0, #1
 8004c26:	d0ae      	beq.n	8004b86 <_printf_i+0x136>
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	079b      	lsls	r3, r3, #30
 8004c2c:	d415      	bmi.n	8004c5a <_printf_i+0x20a>
 8004c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c30:	68e0      	ldr	r0, [r4, #12]
 8004c32:	4298      	cmp	r0, r3
 8004c34:	daa9      	bge.n	8004b8a <_printf_i+0x13a>
 8004c36:	0018      	movs	r0, r3
 8004c38:	e7a7      	b.n	8004b8a <_printf_i+0x13a>
 8004c3a:	0022      	movs	r2, r4
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	9906      	ldr	r1, [sp, #24]
 8004c40:	9805      	ldr	r0, [sp, #20]
 8004c42:	9e07      	ldr	r6, [sp, #28]
 8004c44:	3219      	adds	r2, #25
 8004c46:	47b0      	blx	r6
 8004c48:	3001      	adds	r0, #1
 8004c4a:	d09c      	beq.n	8004b86 <_printf_i+0x136>
 8004c4c:	3501      	adds	r5, #1
 8004c4e:	68e3      	ldr	r3, [r4, #12]
 8004c50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c52:	1a9b      	subs	r3, r3, r2
 8004c54:	42ab      	cmp	r3, r5
 8004c56:	dcf0      	bgt.n	8004c3a <_printf_i+0x1ea>
 8004c58:	e7e9      	b.n	8004c2e <_printf_i+0x1de>
 8004c5a:	2500      	movs	r5, #0
 8004c5c:	e7f7      	b.n	8004c4e <_printf_i+0x1fe>
 8004c5e:	46c0      	nop			@ (mov r8, r8)
 8004c60:	08005501 	.word	0x08005501
 8004c64:	08005512 	.word	0x08005512

08004c68 <__sflush_r>:
 8004c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c6a:	220c      	movs	r2, #12
 8004c6c:	5e8b      	ldrsh	r3, [r1, r2]
 8004c6e:	0005      	movs	r5, r0
 8004c70:	000c      	movs	r4, r1
 8004c72:	071a      	lsls	r2, r3, #28
 8004c74:	d456      	bmi.n	8004d24 <__sflush_r+0xbc>
 8004c76:	684a      	ldr	r2, [r1, #4]
 8004c78:	2a00      	cmp	r2, #0
 8004c7a:	dc02      	bgt.n	8004c82 <__sflush_r+0x1a>
 8004c7c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004c7e:	2a00      	cmp	r2, #0
 8004c80:	dd4e      	ble.n	8004d20 <__sflush_r+0xb8>
 8004c82:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004c84:	2f00      	cmp	r7, #0
 8004c86:	d04b      	beq.n	8004d20 <__sflush_r+0xb8>
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2080      	movs	r0, #128	@ 0x80
 8004c8c:	682e      	ldr	r6, [r5, #0]
 8004c8e:	602a      	str	r2, [r5, #0]
 8004c90:	001a      	movs	r2, r3
 8004c92:	0140      	lsls	r0, r0, #5
 8004c94:	6a21      	ldr	r1, [r4, #32]
 8004c96:	4002      	ands	r2, r0
 8004c98:	4203      	tst	r3, r0
 8004c9a:	d033      	beq.n	8004d04 <__sflush_r+0x9c>
 8004c9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004c9e:	89a3      	ldrh	r3, [r4, #12]
 8004ca0:	075b      	lsls	r3, r3, #29
 8004ca2:	d506      	bpl.n	8004cb2 <__sflush_r+0x4a>
 8004ca4:	6863      	ldr	r3, [r4, #4]
 8004ca6:	1ad2      	subs	r2, r2, r3
 8004ca8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <__sflush_r+0x4a>
 8004cae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004cb0:	1ad2      	subs	r2, r2, r3
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	0028      	movs	r0, r5
 8004cb6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004cb8:	6a21      	ldr	r1, [r4, #32]
 8004cba:	47b8      	blx	r7
 8004cbc:	89a2      	ldrh	r2, [r4, #12]
 8004cbe:	1c43      	adds	r3, r0, #1
 8004cc0:	d106      	bne.n	8004cd0 <__sflush_r+0x68>
 8004cc2:	6829      	ldr	r1, [r5, #0]
 8004cc4:	291d      	cmp	r1, #29
 8004cc6:	d846      	bhi.n	8004d56 <__sflush_r+0xee>
 8004cc8:	4b29      	ldr	r3, [pc, #164]	@ (8004d70 <__sflush_r+0x108>)
 8004cca:	40cb      	lsrs	r3, r1
 8004ccc:	07db      	lsls	r3, r3, #31
 8004cce:	d542      	bpl.n	8004d56 <__sflush_r+0xee>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	6063      	str	r3, [r4, #4]
 8004cd4:	6923      	ldr	r3, [r4, #16]
 8004cd6:	6023      	str	r3, [r4, #0]
 8004cd8:	04d2      	lsls	r2, r2, #19
 8004cda:	d505      	bpl.n	8004ce8 <__sflush_r+0x80>
 8004cdc:	1c43      	adds	r3, r0, #1
 8004cde:	d102      	bne.n	8004ce6 <__sflush_r+0x7e>
 8004ce0:	682b      	ldr	r3, [r5, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d100      	bne.n	8004ce8 <__sflush_r+0x80>
 8004ce6:	6560      	str	r0, [r4, #84]	@ 0x54
 8004ce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004cea:	602e      	str	r6, [r5, #0]
 8004cec:	2900      	cmp	r1, #0
 8004cee:	d017      	beq.n	8004d20 <__sflush_r+0xb8>
 8004cf0:	0023      	movs	r3, r4
 8004cf2:	3344      	adds	r3, #68	@ 0x44
 8004cf4:	4299      	cmp	r1, r3
 8004cf6:	d002      	beq.n	8004cfe <__sflush_r+0x96>
 8004cf8:	0028      	movs	r0, r5
 8004cfa:	f7ff fa9b 	bl	8004234 <_free_r>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d02:	e00d      	b.n	8004d20 <__sflush_r+0xb8>
 8004d04:	2301      	movs	r3, #1
 8004d06:	0028      	movs	r0, r5
 8004d08:	47b8      	blx	r7
 8004d0a:	0002      	movs	r2, r0
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	d1c6      	bne.n	8004c9e <__sflush_r+0x36>
 8004d10:	682b      	ldr	r3, [r5, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0c3      	beq.n	8004c9e <__sflush_r+0x36>
 8004d16:	2b1d      	cmp	r3, #29
 8004d18:	d001      	beq.n	8004d1e <__sflush_r+0xb6>
 8004d1a:	2b16      	cmp	r3, #22
 8004d1c:	d11a      	bne.n	8004d54 <__sflush_r+0xec>
 8004d1e:	602e      	str	r6, [r5, #0]
 8004d20:	2000      	movs	r0, #0
 8004d22:	e01e      	b.n	8004d62 <__sflush_r+0xfa>
 8004d24:	690e      	ldr	r6, [r1, #16]
 8004d26:	2e00      	cmp	r6, #0
 8004d28:	d0fa      	beq.n	8004d20 <__sflush_r+0xb8>
 8004d2a:	680f      	ldr	r7, [r1, #0]
 8004d2c:	600e      	str	r6, [r1, #0]
 8004d2e:	1bba      	subs	r2, r7, r6
 8004d30:	9201      	str	r2, [sp, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	079b      	lsls	r3, r3, #30
 8004d36:	d100      	bne.n	8004d3a <__sflush_r+0xd2>
 8004d38:	694a      	ldr	r2, [r1, #20]
 8004d3a:	60a2      	str	r2, [r4, #8]
 8004d3c:	9b01      	ldr	r3, [sp, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	ddee      	ble.n	8004d20 <__sflush_r+0xb8>
 8004d42:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004d44:	0032      	movs	r2, r6
 8004d46:	001f      	movs	r7, r3
 8004d48:	0028      	movs	r0, r5
 8004d4a:	9b01      	ldr	r3, [sp, #4]
 8004d4c:	6a21      	ldr	r1, [r4, #32]
 8004d4e:	47b8      	blx	r7
 8004d50:	2800      	cmp	r0, #0
 8004d52:	dc07      	bgt.n	8004d64 <__sflush_r+0xfc>
 8004d54:	89a2      	ldrh	r2, [r4, #12]
 8004d56:	2340      	movs	r3, #64	@ 0x40
 8004d58:	2001      	movs	r0, #1
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	b21b      	sxth	r3, r3
 8004d5e:	81a3      	strh	r3, [r4, #12]
 8004d60:	4240      	negs	r0, r0
 8004d62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d64:	9b01      	ldr	r3, [sp, #4]
 8004d66:	1836      	adds	r6, r6, r0
 8004d68:	1a1b      	subs	r3, r3, r0
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	e7e6      	b.n	8004d3c <__sflush_r+0xd4>
 8004d6e:	46c0      	nop			@ (mov r8, r8)
 8004d70:	20400001 	.word	0x20400001

08004d74 <_fflush_r>:
 8004d74:	690b      	ldr	r3, [r1, #16]
 8004d76:	b570      	push	{r4, r5, r6, lr}
 8004d78:	0005      	movs	r5, r0
 8004d7a:	000c      	movs	r4, r1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d102      	bne.n	8004d86 <_fflush_r+0x12>
 8004d80:	2500      	movs	r5, #0
 8004d82:	0028      	movs	r0, r5
 8004d84:	bd70      	pop	{r4, r5, r6, pc}
 8004d86:	2800      	cmp	r0, #0
 8004d88:	d004      	beq.n	8004d94 <_fflush_r+0x20>
 8004d8a:	6a03      	ldr	r3, [r0, #32]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <_fflush_r+0x20>
 8004d90:	f7fe fff4 	bl	8003d7c <__sinit>
 8004d94:	220c      	movs	r2, #12
 8004d96:	5ea3      	ldrsh	r3, [r4, r2]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0f1      	beq.n	8004d80 <_fflush_r+0xc>
 8004d9c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d9e:	07d2      	lsls	r2, r2, #31
 8004da0:	d404      	bmi.n	8004dac <_fflush_r+0x38>
 8004da2:	059b      	lsls	r3, r3, #22
 8004da4:	d402      	bmi.n	8004dac <_fflush_r+0x38>
 8004da6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004da8:	f7ff fa39 	bl	800421e <__retarget_lock_acquire_recursive>
 8004dac:	0028      	movs	r0, r5
 8004dae:	0021      	movs	r1, r4
 8004db0:	f7ff ff5a 	bl	8004c68 <__sflush_r>
 8004db4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004db6:	0005      	movs	r5, r0
 8004db8:	07db      	lsls	r3, r3, #31
 8004dba:	d4e2      	bmi.n	8004d82 <_fflush_r+0xe>
 8004dbc:	89a3      	ldrh	r3, [r4, #12]
 8004dbe:	059b      	lsls	r3, r3, #22
 8004dc0:	d4df      	bmi.n	8004d82 <_fflush_r+0xe>
 8004dc2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004dc4:	f7ff fa2c 	bl	8004220 <__retarget_lock_release_recursive>
 8004dc8:	e7db      	b.n	8004d82 <_fflush_r+0xe>
	...

08004dcc <__swhatbuf_r>:
 8004dcc:	b570      	push	{r4, r5, r6, lr}
 8004dce:	000e      	movs	r6, r1
 8004dd0:	001d      	movs	r5, r3
 8004dd2:	230e      	movs	r3, #14
 8004dd4:	5ec9      	ldrsh	r1, [r1, r3]
 8004dd6:	0014      	movs	r4, r2
 8004dd8:	b096      	sub	sp, #88	@ 0x58
 8004dda:	2900      	cmp	r1, #0
 8004ddc:	da0c      	bge.n	8004df8 <__swhatbuf_r+0x2c>
 8004dde:	89b2      	ldrh	r2, [r6, #12]
 8004de0:	2380      	movs	r3, #128	@ 0x80
 8004de2:	0011      	movs	r1, r2
 8004de4:	4019      	ands	r1, r3
 8004de6:	421a      	tst	r2, r3
 8004de8:	d114      	bne.n	8004e14 <__swhatbuf_r+0x48>
 8004dea:	2380      	movs	r3, #128	@ 0x80
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	2000      	movs	r0, #0
 8004df0:	6029      	str	r1, [r5, #0]
 8004df2:	6023      	str	r3, [r4, #0]
 8004df4:	b016      	add	sp, #88	@ 0x58
 8004df6:	bd70      	pop	{r4, r5, r6, pc}
 8004df8:	466a      	mov	r2, sp
 8004dfa:	f000 f89b 	bl	8004f34 <_fstat_r>
 8004dfe:	2800      	cmp	r0, #0
 8004e00:	dbed      	blt.n	8004dde <__swhatbuf_r+0x12>
 8004e02:	23f0      	movs	r3, #240	@ 0xf0
 8004e04:	9901      	ldr	r1, [sp, #4]
 8004e06:	021b      	lsls	r3, r3, #8
 8004e08:	4019      	ands	r1, r3
 8004e0a:	4b04      	ldr	r3, [pc, #16]	@ (8004e1c <__swhatbuf_r+0x50>)
 8004e0c:	18c9      	adds	r1, r1, r3
 8004e0e:	424b      	negs	r3, r1
 8004e10:	4159      	adcs	r1, r3
 8004e12:	e7ea      	b.n	8004dea <__swhatbuf_r+0x1e>
 8004e14:	2100      	movs	r1, #0
 8004e16:	2340      	movs	r3, #64	@ 0x40
 8004e18:	e7e9      	b.n	8004dee <__swhatbuf_r+0x22>
 8004e1a:	46c0      	nop			@ (mov r8, r8)
 8004e1c:	ffffe000 	.word	0xffffe000

08004e20 <__smakebuf_r>:
 8004e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e22:	2602      	movs	r6, #2
 8004e24:	898b      	ldrh	r3, [r1, #12]
 8004e26:	0005      	movs	r5, r0
 8004e28:	000c      	movs	r4, r1
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	4233      	tst	r3, r6
 8004e2e:	d007      	beq.n	8004e40 <__smakebuf_r+0x20>
 8004e30:	0023      	movs	r3, r4
 8004e32:	3347      	adds	r3, #71	@ 0x47
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	6123      	str	r3, [r4, #16]
 8004e38:	2301      	movs	r3, #1
 8004e3a:	6163      	str	r3, [r4, #20]
 8004e3c:	b005      	add	sp, #20
 8004e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e40:	ab03      	add	r3, sp, #12
 8004e42:	aa02      	add	r2, sp, #8
 8004e44:	f7ff ffc2 	bl	8004dcc <__swhatbuf_r>
 8004e48:	9f02      	ldr	r7, [sp, #8]
 8004e4a:	9001      	str	r0, [sp, #4]
 8004e4c:	0039      	movs	r1, r7
 8004e4e:	0028      	movs	r0, r5
 8004e50:	f7ff fa5c 	bl	800430c <_malloc_r>
 8004e54:	2800      	cmp	r0, #0
 8004e56:	d108      	bne.n	8004e6a <__smakebuf_r+0x4a>
 8004e58:	220c      	movs	r2, #12
 8004e5a:	5ea3      	ldrsh	r3, [r4, r2]
 8004e5c:	059a      	lsls	r2, r3, #22
 8004e5e:	d4ed      	bmi.n	8004e3c <__smakebuf_r+0x1c>
 8004e60:	2203      	movs	r2, #3
 8004e62:	4393      	bics	r3, r2
 8004e64:	431e      	orrs	r6, r3
 8004e66:	81a6      	strh	r6, [r4, #12]
 8004e68:	e7e2      	b.n	8004e30 <__smakebuf_r+0x10>
 8004e6a:	2380      	movs	r3, #128	@ 0x80
 8004e6c:	89a2      	ldrh	r2, [r4, #12]
 8004e6e:	6020      	str	r0, [r4, #0]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	81a3      	strh	r3, [r4, #12]
 8004e74:	9b03      	ldr	r3, [sp, #12]
 8004e76:	6120      	str	r0, [r4, #16]
 8004e78:	6167      	str	r7, [r4, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00c      	beq.n	8004e98 <__smakebuf_r+0x78>
 8004e7e:	0028      	movs	r0, r5
 8004e80:	230e      	movs	r3, #14
 8004e82:	5ee1      	ldrsh	r1, [r4, r3]
 8004e84:	f000 f868 	bl	8004f58 <_isatty_r>
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	d005      	beq.n	8004e98 <__smakebuf_r+0x78>
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	89a2      	ldrh	r2, [r4, #12]
 8004e90:	439a      	bics	r2, r3
 8004e92:	3b02      	subs	r3, #2
 8004e94:	4313      	orrs	r3, r2
 8004e96:	81a3      	strh	r3, [r4, #12]
 8004e98:	89a3      	ldrh	r3, [r4, #12]
 8004e9a:	9a01      	ldr	r2, [sp, #4]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	81a3      	strh	r3, [r4, #12]
 8004ea0:	e7cc      	b.n	8004e3c <__smakebuf_r+0x1c>

08004ea2 <_putc_r>:
 8004ea2:	b570      	push	{r4, r5, r6, lr}
 8004ea4:	0006      	movs	r6, r0
 8004ea6:	000d      	movs	r5, r1
 8004ea8:	0014      	movs	r4, r2
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d004      	beq.n	8004eb8 <_putc_r+0x16>
 8004eae:	6a03      	ldr	r3, [r0, #32]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <_putc_r+0x16>
 8004eb4:	f7fe ff62 	bl	8003d7c <__sinit>
 8004eb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004eba:	07db      	lsls	r3, r3, #31
 8004ebc:	d405      	bmi.n	8004eca <_putc_r+0x28>
 8004ebe:	89a3      	ldrh	r3, [r4, #12]
 8004ec0:	059b      	lsls	r3, r3, #22
 8004ec2:	d402      	bmi.n	8004eca <_putc_r+0x28>
 8004ec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ec6:	f7ff f9aa 	bl	800421e <__retarget_lock_acquire_recursive>
 8004eca:	68a3      	ldr	r3, [r4, #8]
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	60a3      	str	r3, [r4, #8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	da05      	bge.n	8004ee0 <_putc_r+0x3e>
 8004ed4:	69a2      	ldr	r2, [r4, #24]
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	db12      	blt.n	8004f00 <_putc_r+0x5e>
 8004eda:	b2eb      	uxtb	r3, r5
 8004edc:	2b0a      	cmp	r3, #10
 8004ede:	d00f      	beq.n	8004f00 <_putc_r+0x5e>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	6022      	str	r2, [r4, #0]
 8004ee6:	701d      	strb	r5, [r3, #0]
 8004ee8:	b2ed      	uxtb	r5, r5
 8004eea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004eec:	07db      	lsls	r3, r3, #31
 8004eee:	d405      	bmi.n	8004efc <_putc_r+0x5a>
 8004ef0:	89a3      	ldrh	r3, [r4, #12]
 8004ef2:	059b      	lsls	r3, r3, #22
 8004ef4:	d402      	bmi.n	8004efc <_putc_r+0x5a>
 8004ef6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ef8:	f7ff f992 	bl	8004220 <__retarget_lock_release_recursive>
 8004efc:	0028      	movs	r0, r5
 8004efe:	bd70      	pop	{r4, r5, r6, pc}
 8004f00:	0029      	movs	r1, r5
 8004f02:	0022      	movs	r2, r4
 8004f04:	0030      	movs	r0, r6
 8004f06:	f7ff f869 	bl	8003fdc <__swbuf_r>
 8004f0a:	0005      	movs	r5, r0
 8004f0c:	e7ed      	b.n	8004eea <_putc_r+0x48>

08004f0e <memmove>:
 8004f0e:	b510      	push	{r4, lr}
 8004f10:	4288      	cmp	r0, r1
 8004f12:	d902      	bls.n	8004f1a <memmove+0xc>
 8004f14:	188b      	adds	r3, r1, r2
 8004f16:	4298      	cmp	r0, r3
 8004f18:	d308      	bcc.n	8004f2c <memmove+0x1e>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d007      	beq.n	8004f30 <memmove+0x22>
 8004f20:	5ccc      	ldrb	r4, [r1, r3]
 8004f22:	54c4      	strb	r4, [r0, r3]
 8004f24:	3301      	adds	r3, #1
 8004f26:	e7f9      	b.n	8004f1c <memmove+0xe>
 8004f28:	5c8b      	ldrb	r3, [r1, r2]
 8004f2a:	5483      	strb	r3, [r0, r2]
 8004f2c:	3a01      	subs	r2, #1
 8004f2e:	d2fb      	bcs.n	8004f28 <memmove+0x1a>
 8004f30:	bd10      	pop	{r4, pc}
	...

08004f34 <_fstat_r>:
 8004f34:	2300      	movs	r3, #0
 8004f36:	b570      	push	{r4, r5, r6, lr}
 8004f38:	4d06      	ldr	r5, [pc, #24]	@ (8004f54 <_fstat_r+0x20>)
 8004f3a:	0004      	movs	r4, r0
 8004f3c:	0008      	movs	r0, r1
 8004f3e:	0011      	movs	r1, r2
 8004f40:	602b      	str	r3, [r5, #0]
 8004f42:	f7fc f903 	bl	800114c <_fstat>
 8004f46:	1c43      	adds	r3, r0, #1
 8004f48:	d103      	bne.n	8004f52 <_fstat_r+0x1e>
 8004f4a:	682b      	ldr	r3, [r5, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d000      	beq.n	8004f52 <_fstat_r+0x1e>
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	bd70      	pop	{r4, r5, r6, pc}
 8004f54:	200003e0 	.word	0x200003e0

08004f58 <_isatty_r>:
 8004f58:	2300      	movs	r3, #0
 8004f5a:	b570      	push	{r4, r5, r6, lr}
 8004f5c:	4d06      	ldr	r5, [pc, #24]	@ (8004f78 <_isatty_r+0x20>)
 8004f5e:	0004      	movs	r4, r0
 8004f60:	0008      	movs	r0, r1
 8004f62:	602b      	str	r3, [r5, #0]
 8004f64:	f7fc f900 	bl	8001168 <_isatty>
 8004f68:	1c43      	adds	r3, r0, #1
 8004f6a:	d103      	bne.n	8004f74 <_isatty_r+0x1c>
 8004f6c:	682b      	ldr	r3, [r5, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d000      	beq.n	8004f74 <_isatty_r+0x1c>
 8004f72:	6023      	str	r3, [r4, #0]
 8004f74:	bd70      	pop	{r4, r5, r6, pc}
 8004f76:	46c0      	nop			@ (mov r8, r8)
 8004f78:	200003e0 	.word	0x200003e0

08004f7c <_sbrk_r>:
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	b570      	push	{r4, r5, r6, lr}
 8004f80:	4d06      	ldr	r5, [pc, #24]	@ (8004f9c <_sbrk_r+0x20>)
 8004f82:	0004      	movs	r4, r0
 8004f84:	0008      	movs	r0, r1
 8004f86:	602b      	str	r3, [r5, #0]
 8004f88:	f7fc f902 	bl	8001190 <_sbrk>
 8004f8c:	1c43      	adds	r3, r0, #1
 8004f8e:	d103      	bne.n	8004f98 <_sbrk_r+0x1c>
 8004f90:	682b      	ldr	r3, [r5, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d000      	beq.n	8004f98 <_sbrk_r+0x1c>
 8004f96:	6023      	str	r3, [r4, #0]
 8004f98:	bd70      	pop	{r4, r5, r6, pc}
 8004f9a:	46c0      	nop			@ (mov r8, r8)
 8004f9c:	200003e0 	.word	0x200003e0

08004fa0 <memchr>:
 8004fa0:	b2c9      	uxtb	r1, r1
 8004fa2:	1882      	adds	r2, r0, r2
 8004fa4:	4290      	cmp	r0, r2
 8004fa6:	d101      	bne.n	8004fac <memchr+0xc>
 8004fa8:	2000      	movs	r0, #0
 8004faa:	4770      	bx	lr
 8004fac:	7803      	ldrb	r3, [r0, #0]
 8004fae:	428b      	cmp	r3, r1
 8004fb0:	d0fb      	beq.n	8004faa <memchr+0xa>
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	e7f6      	b.n	8004fa4 <memchr+0x4>

08004fb6 <_realloc_r>:
 8004fb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fb8:	0006      	movs	r6, r0
 8004fba:	000c      	movs	r4, r1
 8004fbc:	0015      	movs	r5, r2
 8004fbe:	2900      	cmp	r1, #0
 8004fc0:	d105      	bne.n	8004fce <_realloc_r+0x18>
 8004fc2:	0011      	movs	r1, r2
 8004fc4:	f7ff f9a2 	bl	800430c <_malloc_r>
 8004fc8:	0004      	movs	r4, r0
 8004fca:	0020      	movs	r0, r4
 8004fcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004fce:	2a00      	cmp	r2, #0
 8004fd0:	d103      	bne.n	8004fda <_realloc_r+0x24>
 8004fd2:	f7ff f92f 	bl	8004234 <_free_r>
 8004fd6:	002c      	movs	r4, r5
 8004fd8:	e7f7      	b.n	8004fca <_realloc_r+0x14>
 8004fda:	f000 f81c 	bl	8005016 <_malloc_usable_size_r>
 8004fde:	0007      	movs	r7, r0
 8004fe0:	4285      	cmp	r5, r0
 8004fe2:	d802      	bhi.n	8004fea <_realloc_r+0x34>
 8004fe4:	0843      	lsrs	r3, r0, #1
 8004fe6:	42ab      	cmp	r3, r5
 8004fe8:	d3ef      	bcc.n	8004fca <_realloc_r+0x14>
 8004fea:	0029      	movs	r1, r5
 8004fec:	0030      	movs	r0, r6
 8004fee:	f7ff f98d 	bl	800430c <_malloc_r>
 8004ff2:	9001      	str	r0, [sp, #4]
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	d101      	bne.n	8004ffc <_realloc_r+0x46>
 8004ff8:	9c01      	ldr	r4, [sp, #4]
 8004ffa:	e7e6      	b.n	8004fca <_realloc_r+0x14>
 8004ffc:	002a      	movs	r2, r5
 8004ffe:	42bd      	cmp	r5, r7
 8005000:	d900      	bls.n	8005004 <_realloc_r+0x4e>
 8005002:	003a      	movs	r2, r7
 8005004:	0021      	movs	r1, r4
 8005006:	9801      	ldr	r0, [sp, #4]
 8005008:	f7ff f90b 	bl	8004222 <memcpy>
 800500c:	0021      	movs	r1, r4
 800500e:	0030      	movs	r0, r6
 8005010:	f7ff f910 	bl	8004234 <_free_r>
 8005014:	e7f0      	b.n	8004ff8 <_realloc_r+0x42>

08005016 <_malloc_usable_size_r>:
 8005016:	1f0b      	subs	r3, r1, #4
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	1f18      	subs	r0, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	da01      	bge.n	8005024 <_malloc_usable_size_r+0xe>
 8005020:	580b      	ldr	r3, [r1, r0]
 8005022:	18c0      	adds	r0, r0, r3
 8005024:	4770      	bx	lr
	...

08005028 <_init>:
 8005028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502a:	46c0      	nop			@ (mov r8, r8)
 800502c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502e:	bc08      	pop	{r3}
 8005030:	469e      	mov	lr, r3
 8005032:	4770      	bx	lr

08005034 <_fini>:
 8005034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005036:	46c0      	nop			@ (mov r8, r8)
 8005038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503a:	bc08      	pop	{r3}
 800503c:	469e      	mov	lr, r3
 800503e:	4770      	bx	lr
