
BOOTLOADER_F401RET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004644  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  080047e4  080047e4  000057e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b18  08004b18  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004b18  08004b18  00005b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b20  08004b20  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b20  08004b20  00005b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b24  08004b24  00005b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004b28  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  20000068  08004b90  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08004b90  000063a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4c5  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ae  00000000  00000000  0001055d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  00012710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000075f  00000000  00000000  000130c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017415  00000000  00000000  00013827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd16  00000000  00000000  0002ac3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088be2  00000000  00000000  00036952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf534  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f68  00000000  00000000  000bf578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000c24e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080047cc 	.word	0x080047cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080047cc 	.word	0x080047cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005b0:	f3bf 8f4f 	dsb	sy
}
 80005b4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005b6:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <__NVIC_SystemReset+0x24>)
 80005b8:	68db      	ldr	r3, [r3, #12]
 80005ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005be:	4904      	ldr	r1, [pc, #16]	@ (80005d0 <__NVIC_SystemReset+0x24>)
 80005c0:	4b04      	ldr	r3, [pc, #16]	@ (80005d4 <__NVIC_SystemReset+0x28>)
 80005c2:	4313      	orrs	r3, r2
 80005c4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005c6:	f3bf 8f4f 	dsb	sy
}
 80005ca:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <__NVIC_SystemReset+0x20>
 80005d0:	e000ed00 	.word	0xe000ed00
 80005d4:	05fa0004 	.word	0x05fa0004

080005d8 <bootloader_uart_read_data>:

uint8_t bl_rx_buffer[BL_RX_LEN];
UART_HandleTypeDef *C_UART = NULL;

void  bootloader_uart_read_data(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
    uint8_t rcv_len=0;
 80005de:	2300      	movs	r3, #0
 80005e0:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		memset(bl_rx_buffer,0,200);
 80005e2:	22c8      	movs	r2, #200	@ 0xc8
 80005e4:	2100      	movs	r1, #0
 80005e6:	481e      	ldr	r0, [pc, #120]	@ (8000660 <bootloader_uart_read_data+0x88>)
 80005e8:	f003 f9b8 	bl	800395c <memset>
        HAL_UART_Receive(C_UART,bl_rx_buffer,1,HAL_MAX_DELAY);
 80005ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000664 <bootloader_uart_read_data+0x8c>)
 80005ee:	6818      	ldr	r0, [r3, #0]
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	2201      	movs	r2, #1
 80005f6:	491a      	ldr	r1, [pc, #104]	@ (8000660 <bootloader_uart_read_data+0x88>)
 80005f8:	f002 fba9 	bl	8002d4e <HAL_UART_Receive>
		rcv_len= bl_rx_buffer[0];
 80005fc:	4b18      	ldr	r3, [pc, #96]	@ (8000660 <bootloader_uart_read_data+0x88>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(C_UART,&bl_rx_buffer[1],rcv_len,HAL_MAX_DELAY);
 8000602:	4b18      	ldr	r3, [pc, #96]	@ (8000664 <bootloader_uart_read_data+0x8c>)
 8000604:	6818      	ldr	r0, [r3, #0]
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	b29a      	uxth	r2, r3
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	4916      	ldr	r1, [pc, #88]	@ (8000668 <bootloader_uart_read_data+0x90>)
 8000610:	f002 fb9d 	bl	8002d4e <HAL_UART_Receive>
		switch(bl_rx_buffer[1])
 8000614:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <bootloader_uart_read_data+0x88>)
 8000616:	785b      	ldrb	r3, [r3, #1]
 8000618:	3b51      	subs	r3, #81	@ 0x51
 800061a:	2b03      	cmp	r3, #3
 800061c:	d81a      	bhi.n	8000654 <bootloader_uart_read_data+0x7c>
 800061e:	a201      	add	r2, pc, #4	@ (adr r2, 8000624 <bootloader_uart_read_data+0x4c>)
 8000620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000624:	08000635 	.word	0x08000635
 8000628:	0800063d 	.word	0x0800063d
 800062c:	08000645 	.word	0x08000645
 8000630:	0800064d 	.word	0x0800064d
		{
            case BL_GET_CID:
                bootloader_handle_getcid_cmd(bl_rx_buffer);
 8000634:	480a      	ldr	r0, [pc, #40]	@ (8000660 <bootloader_uart_read_data+0x88>)
 8000636:	f000 f8d3 	bl	80007e0 <bootloader_handle_getcid_cmd>
                break;
 800063a:	e00f      	b.n	800065c <bootloader_uart_read_data+0x84>
            case BL_GO_TO_RESET:
            	bootloader_go_reset_cmd(bl_rx_buffer);
 800063c:	4808      	ldr	r0, [pc, #32]	@ (8000660 <bootloader_uart_read_data+0x88>)
 800063e:	f000 f88b 	bl	8000758 <bootloader_go_reset_cmd>
                break;
 8000642:	e00b      	b.n	800065c <bootloader_uart_read_data+0x84>
            case BL_FLASH_ERASE:
                bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8000644:	4806      	ldr	r0, [pc, #24]	@ (8000660 <bootloader_uart_read_data+0x88>)
 8000646:	f000 f917 	bl	8000878 <bootloader_handle_flash_erase_cmd>
                break;
 800064a:	e007      	b.n	800065c <bootloader_uart_read_data+0x84>
            case BL_MEM_WRITE:
                bootloader_handle_mem_write_cmd(bl_rx_buffer);
 800064c:	4804      	ldr	r0, [pc, #16]	@ (8000660 <bootloader_uart_read_data+0x88>)
 800064e:	f000 f97d 	bl	800094c <bootloader_handle_mem_write_cmd>
                break;
 8000652:	e003      	b.n	800065c <bootloader_uart_read_data+0x84>
            default:
                printf("BL_MSG:Invalid command code received from host \n");
 8000654:	4805      	ldr	r0, [pc, #20]	@ (800066c <bootloader_uart_read_data+0x94>)
 8000656:	f003 f86b 	bl	8003730 <puts>
                break;
 800065a:	bf00      	nop
		memset(bl_rx_buffer,0,200);
 800065c:	e7c1      	b.n	80005e2 <bootloader_uart_read_data+0xa>
 800065e:	bf00      	nop
 8000660:	20000084 	.word	0x20000084
 8000664:	2000014c 	.word	0x2000014c
 8000668:	20000085 	.word	0x20000085
 800066c:	080047e4 	.word	0x080047e4

08000670 <bootloader_jump_to_user_app>:
		}
	}
}

void bootloader_jump_to_user_app(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08c      	sub	sp, #48	@ 0x30
 8000674:	af00      	add	r7, sp, #0
	 void (*app_reset_handler)(void);

	    printf("BL_MSG: bootloader_jump_to_user_app\n");
 8000676:	482f      	ldr	r0, [pc, #188]	@ (8000734 <bootloader_jump_to_user_app+0xc4>)
 8000678:	f003 f85a 	bl	8003730 <puts>

	    uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 800067c:	4b2e      	ldr	r3, [pc, #184]	@ (8000738 <bootloader_jump_to_user_app+0xc8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	62bb      	str	r3, [r7, #40]	@ 0x28
	    uint32_t reset_handler_address = *(volatile uint32_t *)(FLASH_SECTOR2_BASE_ADDRESS + 4);
 8000682:	4b2e      	ldr	r3, [pc, #184]	@ (800073c <bootloader_jump_to_user_app+0xcc>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	627b      	str	r3, [r7, #36]	@ 0x24

	    char msg[23];
		snprintf(msg, sizeof(msg), "MSP: 0x%08lX", msp_value);
 8000688:	1d38      	adds	r0, r7, #4
 800068a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800068c:	4a2c      	ldr	r2, [pc, #176]	@ (8000740 <bootloader_jump_to_user_app+0xd0>)
 800068e:	2117      	movs	r1, #23
 8000690:	f003 f856 	bl	8003740 <sniprintf>
		printf("%s",msg);
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	4619      	mov	r1, r3
 8000698:	482a      	ldr	r0, [pc, #168]	@ (8000744 <bootloader_jump_to_user_app+0xd4>)
 800069a:	f002 ffe1 	bl	8003660 <iprintf>

		snprintf(msg, sizeof(msg), "Reset: 0x%08lX", reset_handler_address);
 800069e:	1d38      	adds	r0, r7, #4
 80006a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006a2:	4a29      	ldr	r2, [pc, #164]	@ (8000748 <bootloader_jump_to_user_app+0xd8>)
 80006a4:	2117      	movs	r1, #23
 80006a6:	f003 f84b 	bl	8003740 <sniprintf>
		printf("%s",msg);
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	4825      	ldr	r0, [pc, #148]	@ (8000744 <bootloader_jump_to_user_app+0xd4>)
 80006b0:	f002 ffd6 	bl	8003660 <iprintf>

		HAL_Delay(1000);
 80006b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006b8:	f000 ff5e 	bl	8001578 <HAL_Delay>

	    HAL_RCC_DeInit();
 80006bc:	f002 f99e 	bl	80029fc <HAL_RCC_DeInit>
		HAL_DeInit();
 80006c0:	f000 fed4 	bl	800146c <HAL_DeInit>

		SysTick->CTRL = 0;
 80006c4:	4b21      	ldr	r3, [pc, #132]	@ (800074c <bootloader_jump_to_user_app+0xdc>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
		SysTick->LOAD = 0;
 80006ca:	4b20      	ldr	r3, [pc, #128]	@ (800074c <bootloader_jump_to_user_app+0xdc>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
 80006d0:	4b1e      	ldr	r3, [pc, #120]	@ (800074c <bootloader_jump_to_user_app+0xdc>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]

		for (int i = 0; i < 8; i++) {
 80006d6:	2300      	movs	r3, #0
 80006d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006da:	e010      	b.n	80006fe <bootloader_jump_to_user_app+0x8e>
			NVIC->ICER[i] = 0xFFFFFFFF;
 80006dc:	4a1c      	ldr	r2, [pc, #112]	@ (8000750 <bootloader_jump_to_user_app+0xe0>)
 80006de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006e0:	3320      	adds	r3, #32
 80006e2:	f04f 31ff 	mov.w	r1, #4294967295
 80006e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			NVIC->ICPR[i] = 0xFFFFFFFF;
 80006ea:	4a19      	ldr	r2, [pc, #100]	@ (8000750 <bootloader_jump_to_user_app+0xe0>)
 80006ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006ee:	3360      	adds	r3, #96	@ 0x60
 80006f0:	f04f 31ff 	mov.w	r1, #4294967295
 80006f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < 8; i++) {
 80006f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006fa:	3301      	adds	r3, #1
 80006fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000700:	2b07      	cmp	r3, #7
 8000702:	ddeb      	ble.n	80006dc <bootloader_jump_to_user_app+0x6c>
		}

	    SCB->VTOR = FLASH_SECTOR2_BASE_ADDRESS;
 8000704:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <bootloader_jump_to_user_app+0xe4>)
 8000706:	4a0c      	ldr	r2, [pc, #48]	@ (8000738 <bootloader_jump_to_user_app+0xc8>)
 8000708:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 800070a:	f3bf 8f4f 	dsb	sy
}
 800070e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000710:	f3bf 8f6f 	isb	sy
}
 8000714:	bf00      	nop
 8000716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000718:	61fb      	str	r3, [r7, #28]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	f383 8808 	msr	MSP, r3
}
 8000720:	bf00      	nop
		__DSB();
		__ISB();
	    __set_MSP(msp_value);

	    app_reset_handler = (void *)reset_handler_address;
 8000722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000724:	623b      	str	r3, [r7, #32]
	    app_reset_handler();
 8000726:	6a3b      	ldr	r3, [r7, #32]
 8000728:	4798      	blx	r3

}
 800072a:	bf00      	nop
 800072c:	3730      	adds	r7, #48	@ 0x30
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	08004814 	.word	0x08004814
 8000738:	08008000 	.word	0x08008000
 800073c:	08008004 	.word	0x08008004
 8000740:	08004838 	.word	0x08004838
 8000744:	08004848 	.word	0x08004848
 8000748:	0800484c 	.word	0x0800484c
 800074c:	e000e010 	.word	0xe000e010
 8000750:	e000e100 	.word	0xe000e100
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <bootloader_go_reset_cmd>:

void bootloader_go_reset_cmd(uint8_t *pBuffer)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	printf("BL_MSG:bootloader_go_reset_cmd\n");
 8000760:	481a      	ldr	r0, [pc, #104]	@ (80007cc <bootloader_go_reset_cmd+0x74>)
 8000762:	f002 ffe5 	bl	8003730 <puts>
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000766:	4b1a      	ldr	r3, [pc, #104]	@ (80007d0 <bootloader_go_reset_cmd+0x78>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	3301      	adds	r3, #1
 800076c:	60fb      	str	r3, [r7, #12]
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	3b04      	subs	r3, #4
 8000772:	4a17      	ldr	r2, [pc, #92]	@ (80007d0 <bootloader_go_reset_cmd+0x78>)
 8000774:	4413      	add	r3, r2
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	60bb      	str	r3, [r7, #8]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	3b04      	subs	r3, #4
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	4619      	mov	r1, r3
 8000782:	4813      	ldr	r0, [pc, #76]	@ (80007d0 <bootloader_go_reset_cmd+0x78>)
 8000784:	f000 f99a 	bl	8000abc <bootloader_verify_crc>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d115      	bne.n	80007ba <bootloader_go_reset_cmd+0x62>
	{
		 printf("BL_MSG:checksum success !!\n");
 800078e:	4811      	ldr	r0, [pc, #68]	@ (80007d4 <bootloader_go_reset_cmd+0x7c>)
 8000790:	f002 ffce 	bl	8003730 <puts>
		 bootloader_send_ack(pBuffer[0],0);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f95e 	bl	8000a5c <bootloader_send_ack>
		 bootloader_uart_write_data(ADDR_VALID, 1);
 80007a0:	2101      	movs	r1, #1
 80007a2:	2000      	movs	r0, #0
 80007a4:	f000 f9be 	bl	8000b24 <bootloader_uart_write_data>
		 printf("BL_MSG:Going to reset... !!\n");
 80007a8:	480b      	ldr	r0, [pc, #44]	@ (80007d8 <bootloader_go_reset_cmd+0x80>)
 80007aa:	f002 ffc1 	bl	8003730 <puts>
		 HAL_Delay(1000);
 80007ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007b2:	f000 fee1 	bl	8001578 <HAL_Delay>
		 NVIC_SystemReset();
 80007b6:	f7ff fef9 	bl	80005ac <__NVIC_SystemReset>
	}
	else
	{
		 printf("BL_MSG:checksum fail !!\n");
 80007ba:	4808      	ldr	r0, [pc, #32]	@ (80007dc <bootloader_go_reset_cmd+0x84>)
 80007bc:	f002 ffb8 	bl	8003730 <puts>
		 bootloader_send_nack();
 80007c0:	f000 f968 	bl	8000a94 <bootloader_send_nack>
	}
}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	0800485c 	.word	0x0800485c
 80007d0:	20000084 	.word	0x20000084
 80007d4:	0800487c 	.word	0x0800487c
 80007d8:	08004898 	.word	0x08004898
 80007dc:	080048b4 	.word	0x080048b4

080007e0 <bootloader_handle_getcid_cmd>:

 void bootloader_handle_getcid_cmd(uint8_t *pBuffer)
 {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 	uint16_t bl_cid_num = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	81fb      	strh	r3, [r7, #14]
 	printf("BL_MSG:bootloader_handle_getcid_cmd\n");
 80007ec:	481d      	ldr	r0, [pc, #116]	@ (8000864 <bootloader_handle_getcid_cmd+0x84>)
 80007ee:	f002 ff9f 	bl	8003730 <puts>

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 80007f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000868 <bootloader_handle_getcid_cmd+0x88>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	3301      	adds	r3, #1
 80007f8:	617b      	str	r3, [r7, #20]

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	3b04      	subs	r3, #4
 80007fe:	4a1a      	ldr	r2, [pc, #104]	@ (8000868 <bootloader_handle_getcid_cmd+0x88>)
 8000800:	4413      	add	r3, r2
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	613b      	str	r3, [r7, #16]

 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	3b04      	subs	r3, #4
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	4619      	mov	r1, r3
 800080e:	4816      	ldr	r0, [pc, #88]	@ (8000868 <bootloader_handle_getcid_cmd+0x88>)
 8000810:	f000 f954 	bl	8000abc <bootloader_verify_crc>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d11a      	bne.n	8000850 <bootloader_handle_getcid_cmd+0x70>
 	{
         printf("BL_MSG:checksum success !!\n");
 800081a:	4814      	ldr	r0, [pc, #80]	@ (800086c <bootloader_handle_getcid_cmd+0x8c>)
 800081c:	f002 ff88 	bl	8003730 <puts>
         bootloader_send_ack(pBuffer[0],2);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2102      	movs	r1, #2
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f918 	bl	8000a5c <bootloader_send_ack>
         bl_cid_num = get_mcu_chip_id();
 800082c:	f000 f98e 	bl	8000b4c <get_mcu_chip_id>
 8000830:	4603      	mov	r3, r0
 8000832:	81fb      	strh	r3, [r7, #14]
         printf("BL_MSG:MCU id : %d %#x !!\n",bl_cid_num, bl_cid_num);
 8000834:	89fb      	ldrh	r3, [r7, #14]
 8000836:	4619      	mov	r1, r3
 8000838:	89fb      	ldrh	r3, [r7, #14]
 800083a:	461a      	mov	r2, r3
 800083c:	480c      	ldr	r0, [pc, #48]	@ (8000870 <bootloader_handle_getcid_cmd+0x90>)
 800083e:	f002 ff0f 	bl	8003660 <iprintf>
         bootloader_uart_write_data((uint8_t *)&bl_cid_num,2);
 8000842:	f107 030e 	add.w	r3, r7, #14
 8000846:	2102      	movs	r1, #2
 8000848:	4618      	mov	r0, r3
 800084a:	f000 f96b 	bl	8000b24 <bootloader_uart_write_data>
 	else
 	{
         printf("BL_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}
 }
 800084e:	e004      	b.n	800085a <bootloader_handle_getcid_cmd+0x7a>
         printf("BL_MSG:checksum fail !!\n");
 8000850:	4808      	ldr	r0, [pc, #32]	@ (8000874 <bootloader_handle_getcid_cmd+0x94>)
 8000852:	f002 ff6d 	bl	8003730 <puts>
         bootloader_send_nack();
 8000856:	f000 f91d 	bl	8000a94 <bootloader_send_nack>
 }
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	080048cc 	.word	0x080048cc
 8000868:	20000084 	.word	0x20000084
 800086c:	0800487c 	.word	0x0800487c
 8000870:	080048f0 	.word	0x080048f0
 8000874:	080048b4 	.word	0x080048b4

08000878 <bootloader_handle_flash_erase_cmd>:

 void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
 {
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
     uint8_t erase_status = 0x00;
 8000880:	2300      	movs	r3, #0
 8000882:	73fb      	strb	r3, [r7, #15]
     printf("BL_MSG:bootloader_handle_flash_erase_cmd\n");
 8000884:	482a      	ldr	r0, [pc, #168]	@ (8000930 <bootloader_handle_flash_erase_cmd+0xb8>)
 8000886:	f002 ff53 	bl	8003730 <puts>

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 800088a:	4b2a      	ldr	r3, [pc, #168]	@ (8000934 <bootloader_handle_flash_erase_cmd+0xbc>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	3301      	adds	r3, #1
 8000890:	617b      	str	r3, [r7, #20]

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	3b04      	subs	r3, #4
 8000896:	4a27      	ldr	r2, [pc, #156]	@ (8000934 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000898:	4413      	add	r3, r2
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	613b      	str	r3, [r7, #16]

 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	3b04      	subs	r3, #4
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	4619      	mov	r1, r3
 80008a6:	4823      	ldr	r0, [pc, #140]	@ (8000934 <bootloader_handle_flash_erase_cmd+0xbc>)
 80008a8:	f000 f908 	bl	8000abc <bootloader_verify_crc>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d135      	bne.n	800091e <bootloader_handle_flash_erase_cmd+0xa6>
 	{
         printf("BL_MSG:checksum success !!\n");
 80008b2:	4821      	ldr	r0, [pc, #132]	@ (8000938 <bootloader_handle_flash_erase_cmd+0xc0>)
 80008b4:	f002 ff3c 	bl	8003730 <puts>
         bootloader_send_ack(pBuffer[0],1);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2101      	movs	r1, #1
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 f8cc 	bl	8000a5c <bootloader_send_ack>
         printf("BL_MSG:initial_sector : %d  no_ofsectors: %d\n",pBuffer[2],pBuffer[3]);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3302      	adds	r3, #2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	4619      	mov	r1, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3303      	adds	r3, #3
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	461a      	mov	r2, r3
 80008d4:	4819      	ldr	r0, [pc, #100]	@ (800093c <bootloader_handle_flash_erase_cmd+0xc4>)
 80008d6:	f002 fec3 	bl	8003660 <iprintf>

         HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
 80008da:	2201      	movs	r2, #1
 80008dc:	2120      	movs	r1, #32
 80008de:	4818      	ldr	r0, [pc, #96]	@ (8000940 <bootloader_handle_flash_erase_cmd+0xc8>)
 80008e0:	f001 fc1a 	bl	8002118 <HAL_GPIO_WritePin>
         erase_status = execute_flash_erase(pBuffer[2] , pBuffer[3]);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3302      	adds	r3, #2
 80008e8:	781a      	ldrb	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3303      	adds	r3, #3
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	4610      	mov	r0, r2
 80008f4:	f000 f960 	bl	8000bb8 <execute_flash_erase>
 80008f8:	4603      	mov	r3, r0
 80008fa:	73fb      	strb	r3, [r7, #15]
         HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2120      	movs	r1, #32
 8000900:	480f      	ldr	r0, [pc, #60]	@ (8000940 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000902:	f001 fc09 	bl	8002118 <HAL_GPIO_WritePin>

         printf("BL_MSG: flash erase status: %#x\n",erase_status);
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	4619      	mov	r1, r3
 800090a:	480e      	ldr	r0, [pc, #56]	@ (8000944 <bootloader_handle_flash_erase_cmd+0xcc>)
 800090c:	f002 fea8 	bl	8003660 <iprintf>

         bootloader_uart_write_data(&erase_status,1);
 8000910:	f107 030f 	add.w	r3, r7, #15
 8000914:	2101      	movs	r1, #1
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f904 	bl	8000b24 <bootloader_uart_write_data>
 	}else
 	{
         printf("BL_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}
 }
 800091c:	e004      	b.n	8000928 <bootloader_handle_flash_erase_cmd+0xb0>
         printf("BL_MSG:checksum fail !!\n");
 800091e:	480a      	ldr	r0, [pc, #40]	@ (8000948 <bootloader_handle_flash_erase_cmd+0xd0>)
 8000920:	f002 ff06 	bl	8003730 <puts>
         bootloader_send_nack();
 8000924:	f000 f8b6 	bl	8000a94 <bootloader_send_nack>
 }
 8000928:	bf00      	nop
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	0800490c 	.word	0x0800490c
 8000934:	20000084 	.word	0x20000084
 8000938:	0800487c 	.word	0x0800487c
 800093c:	08004938 	.word	0x08004938
 8000940:	40020000 	.word	0x40020000
 8000944:	08004968 	.word	0x08004968
 8000948:	080048b4 	.word	0x080048b4

0800094c <bootloader_handle_mem_write_cmd>:


 void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
 {
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 	uint8_t addr_valid = ADDR_VALID;
 8000954:	2300      	movs	r3, #0
 8000956:	77fb      	strb	r3, [r7, #31]
 	uint8_t write_status = 0x00;
 8000958:	2300      	movs	r3, #0
 800095a:	73fb      	strb	r3, [r7, #15]
 	uint8_t chksum =0, len=0;
 800095c:	2300      	movs	r3, #0
 800095e:	77bb      	strb	r3, [r7, #30]
 8000960:	2300      	movs	r3, #0
 8000962:	777b      	strb	r3, [r7, #29]
 	len = pBuffer[0];
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	777b      	strb	r3, [r7, #29]
 	uint8_t payload_len = pBuffer[6];
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	799b      	ldrb	r3, [r3, #6]
 800096e:	773b      	strb	r3, [r7, #28]

 	uint32_t mem_address = *((uint32_t *) ( &pBuffer[2]) );
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000976:	61bb      	str	r3, [r7, #24]

 	chksum = pBuffer[len];
 8000978:	7f7b      	ldrb	r3, [r7, #29]
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	77bb      	strb	r3, [r7, #30]

     printf("BL_MSG:bootloader_handle_mem_write_cmd\n");
 8000982:	482e      	ldr	r0, [pc, #184]	@ (8000a3c <bootloader_handle_mem_write_cmd+0xf0>)
 8000984:	f002 fed4 	bl	8003730 <puts>

     //Total length of the command packet
 	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000988:	4b2d      	ldr	r3, [pc, #180]	@ (8000a40 <bootloader_handle_mem_write_cmd+0xf4>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	3301      	adds	r3, #1
 800098e:	617b      	str	r3, [r7, #20]

 	//extract the CRC32 sent by the Host
 	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	3b04      	subs	r3, #4
 8000994:	4a2a      	ldr	r2, [pc, #168]	@ (8000a40 <bootloader_handle_mem_write_cmd+0xf4>)
 8000996:	4413      	add	r3, r2
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	613b      	str	r3, [r7, #16]


 	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	3b04      	subs	r3, #4
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4619      	mov	r1, r3
 80009a4:	4826      	ldr	r0, [pc, #152]	@ (8000a40 <bootloader_handle_mem_write_cmd+0xf4>)
 80009a6:	f000 f889 	bl	8000abc <bootloader_verify_crc>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d13b      	bne.n	8000a28 <bootloader_handle_mem_write_cmd+0xdc>
 	{
         printf("BL_MSG:checksum success !!\n");
 80009b0:	4824      	ldr	r0, [pc, #144]	@ (8000a44 <bootloader_handle_mem_write_cmd+0xf8>)
 80009b2:	f002 febd 	bl	8003730 <puts>

         bootloader_send_ack(pBuffer[0],1);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2101      	movs	r1, #1
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 f84d 	bl	8000a5c <bootloader_send_ack>

         printf("BL_MSG: write addr:%#lx\n", mem_address);
 80009c2:	69b9      	ldr	r1, [r7, #24]
 80009c4:	4820      	ldr	r0, [pc, #128]	@ (8000a48 <bootloader_handle_mem_write_cmd+0xfc>)
 80009c6:	f002 fe4b 	bl	8003660 <iprintf>

 		if( verify_address(mem_address) == ADDR_VALID )
 80009ca:	69b8      	ldr	r0, [r7, #24]
 80009cc:	f000 f8d0 	bl	8000b70 <verify_address>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d11c      	bne.n	8000a10 <bootloader_handle_mem_write_cmd+0xc4>
 		{

             printf("BL_MSG: valid mem write address\n");
 80009d6:	481d      	ldr	r0, [pc, #116]	@ (8000a4c <bootloader_handle_mem_write_cmd+0x100>)
 80009d8:	f002 feaa 	bl	8003730 <puts>

             //glow the led to indicate bootloader is currently writing to memory
             HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	2120      	movs	r1, #32
 80009e0:	481b      	ldr	r0, [pc, #108]	@ (8000a50 <bootloader_handle_mem_write_cmd+0x104>)
 80009e2:	f001 fb99 	bl	8002118 <HAL_GPIO_WritePin>

             //execute mem write
             write_status = execute_mem_write(&pBuffer[7],mem_address, payload_len);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	3307      	adds	r3, #7
 80009ea:	7f3a      	ldrb	r2, [r7, #28]
 80009ec:	69b9      	ldr	r1, [r7, #24]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 f929 	bl	8000c46 <execute_mem_write>
 80009f4:	4603      	mov	r3, r0
 80009f6:	73fb      	strb	r3, [r7, #15]

             //turn off the led to indicate memory write is over
             HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2120      	movs	r1, #32
 80009fc:	4814      	ldr	r0, [pc, #80]	@ (8000a50 <bootloader_handle_mem_write_cmd+0x104>)
 80009fe:	f001 fb8b 	bl	8002118 <HAL_GPIO_WritePin>

             //inform host about the status
             bootloader_uart_write_data(&write_status,1);
 8000a02:	f107 030f 	add.w	r3, r7, #15
 8000a06:	2101      	movs	r1, #1
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 f88b 	bl	8000b24 <bootloader_uart_write_data>
 	else
 	{
         printf("BL_MSG:checksum fail !!\n");
         bootloader_send_nack();
 	}
 }
 8000a0e:	e010      	b.n	8000a32 <bootloader_handle_mem_write_cmd+0xe6>
             printf("BL_MSG: invalid mem write address\n");
 8000a10:	4810      	ldr	r0, [pc, #64]	@ (8000a54 <bootloader_handle_mem_write_cmd+0x108>)
 8000a12:	f002 fe8d 	bl	8003730 <puts>
             write_status = ADDR_INVALID;
 8000a16:	2301      	movs	r3, #1
 8000a18:	73fb      	strb	r3, [r7, #15]
             bootloader_uart_write_data(&write_status,1);
 8000a1a:	f107 030f 	add.w	r3, r7, #15
 8000a1e:	2101      	movs	r1, #1
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 f87f 	bl	8000b24 <bootloader_uart_write_data>
 }
 8000a26:	e004      	b.n	8000a32 <bootloader_handle_mem_write_cmd+0xe6>
         printf("BL_MSG:checksum fail !!\n");
 8000a28:	480b      	ldr	r0, [pc, #44]	@ (8000a58 <bootloader_handle_mem_write_cmd+0x10c>)
 8000a2a:	f002 fe81 	bl	8003730 <puts>
         bootloader_send_nack();
 8000a2e:	f000 f831 	bl	8000a94 <bootloader_send_nack>
 }
 8000a32:	bf00      	nop
 8000a34:	3720      	adds	r7, #32
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	0800498c 	.word	0x0800498c
 8000a40:	20000084 	.word	0x20000084
 8000a44:	0800487c 	.word	0x0800487c
 8000a48:	080049b4 	.word	0x080049b4
 8000a4c:	080049d0 	.word	0x080049d0
 8000a50:	40020000 	.word	0x40020000
 8000a54:	080049f0 	.word	0x080049f0
 8000a58:	080048b4 	.word	0x080048b4

08000a5c <bootloader_send_ack>:


 void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
 {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	460a      	mov	r2, r1
 8000a66:	71fb      	strb	r3, [r7, #7]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	71bb      	strb	r3, [r7, #6]
 	 //here we send 2 byte.. first byte is ack and the second byte is len value
 	uint8_t ack_buf[2];
 	ack_buf[0] = BL_ACK;
 8000a6c:	23a5      	movs	r3, #165	@ 0xa5
 8000a6e:	733b      	strb	r3, [r7, #12]
 	ack_buf[1] = follow_len;
 8000a70:	79bb      	ldrb	r3, [r7, #6]
 8000a72:	737b      	strb	r3, [r7, #13]
 	HAL_UART_Transmit(C_UART,ack_buf,2,HAL_MAX_DELAY);
 8000a74:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <bootloader_send_ack+0x34>)
 8000a76:	6818      	ldr	r0, [r3, #0]
 8000a78:	f107 010c 	add.w	r1, r7, #12
 8000a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a80:	2202      	movs	r2, #2
 8000a82:	f002 f8d9 	bl	8002c38 <HAL_UART_Transmit>

 }
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2000014c 	.word	0x2000014c

08000a94 <bootloader_send_nack>:

 /*This function sends NACK */
 void bootloader_send_nack(void)
 {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 	uint8_t nack = BL_NACK;
 8000a9a:	237f      	movs	r3, #127	@ 0x7f
 8000a9c:	71fb      	strb	r3, [r7, #7]
 	HAL_UART_Transmit(C_UART,&nack,1,HAL_MAX_DELAY);
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <bootloader_send_nack+0x24>)
 8000aa0:	6818      	ldr	r0, [r3, #0]
 8000aa2:	1df9      	adds	r1, r7, #7
 8000aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f002 f8c5 	bl	8002c38 <HAL_UART_Transmit>
 }
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000014c 	.word	0x2000014c

08000abc <bootloader_verify_crc>:

 //This verifies the CRC of the given buffer in pData .
 uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
 {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
     uint32_t uwCRCValue=0xff;
 8000ac8:	23ff      	movs	r3, #255	@ 0xff
 8000aca:	61fb      	str	r3, [r7, #28]

     for (uint32_t i=0 ; i < len ; i++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
 8000ad0:	e00f      	b.n	8000af2 <bootloader_verify_crc+0x36>
 	{
         uint32_t i_data = pData[i];
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	617b      	str	r3, [r7, #20]
         uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480e      	ldr	r0, [pc, #56]	@ (8000b20 <bootloader_verify_crc+0x64>)
 8000ae6:	f000 fe6c 	bl	80017c2 <HAL_CRC_Accumulate>
 8000aea:	61f8      	str	r0, [r7, #28]
     for (uint32_t i=0 ; i < len ; i++)
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	3301      	adds	r3, #1
 8000af0:	61bb      	str	r3, [r7, #24]
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d3eb      	bcc.n	8000ad2 <bootloader_verify_crc+0x16>
 	}

 	 /* Reset CRC Calculation Unit */
   __HAL_CRC_DR_RESET(&hcrc);
 8000afa:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <bootloader_verify_crc+0x64>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	689a      	ldr	r2, [r3, #8]
 8000b00:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <bootloader_verify_crc+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f042 0201 	orr.w	r2, r2, #1
 8000b08:	609a      	str	r2, [r3, #8]

 	if( uwCRCValue == crc_host)
 8000b0a:	69fa      	ldr	r2, [r7, #28]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d101      	bne.n	8000b16 <bootloader_verify_crc+0x5a>
 	{
 		return VERIFY_CRC_SUCCESS;
 8000b12:	2300      	movs	r3, #0
 8000b14:	e000      	b.n	8000b18 <bootloader_verify_crc+0x5c>
 	}

 	return VERIFY_CRC_FAIL;
 8000b16:	2301      	movs	r3, #1
 }
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3720      	adds	r7, #32
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000150 	.word	0x20000150

08000b24 <bootloader_uart_write_data>:


 void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
 {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
     /*you can replace the below ST's USART driver API call with your MCUs driver API call */
 	HAL_UART_Transmit(C_UART,pBuffer,len,HAL_MAX_DELAY);
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <bootloader_uart_write_data+0x24>)
 8000b30:	6818      	ldr	r0, [r3, #0]
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	f002 f87c 	bl	8002c38 <HAL_UART_Transmit>

 }
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000014c 	.word	0x2000014c

08000b4c <get_mcu_chip_id>:

 uint16_t get_mcu_chip_id(void)
 {
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 	uint16_t cid;
 	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8000b52:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <get_mcu_chip_id+0x20>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b5c:	80fb      	strh	r3, [r7, #6]
 	return  cid;
 8000b5e:	88fb      	ldrh	r3, [r7, #6]
 }
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e0042000 	.word	0xe0042000

08000b70 <verify_address>:


 uint8_t verify_address(uint32_t go_address)
 {
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b7e:	d305      	bcc.n	8000b8c <verify_address+0x1c>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb0 <verify_address+0x40>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d801      	bhi.n	8000b8c <verify_address+0x1c>
 	{
 		return ADDR_VALID;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	e00a      	b.n	8000ba2 <verify_address+0x32>
 	}
// 	else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END)
// 	{
// 		return ADDR_VALID;
// 	}
 	else if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000b92:	d305      	bcc.n	8000ba0 <verify_address+0x30>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a07      	ldr	r2, [pc, #28]	@ (8000bb4 <verify_address+0x44>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d801      	bhi.n	8000ba0 <verify_address+0x30>
 	{
 		return ADDR_VALID;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	e000      	b.n	8000ba2 <verify_address+0x32>
// 	else if ( go_address >= BKPSRAM_BASE && go_address <= BKPSRAM_END)
// 	{
// 		return ADDR_VALID;
// 	}
 	else
 		return ADDR_INVALID;
 8000ba0:	2301      	movs	r3, #1
 }
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20018000 	.word	0x20018000
 8000bb4:	0807ffff 	.word	0x0807ffff

08000bb8 <execute_flash_erase>:


uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
 {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	@ 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	460a      	mov	r2, r1
 8000bc2:	71fb      	strb	r3, [r7, #7]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	71bb      	strb	r3, [r7, #6]
 	FLASH_EraseInitTypeDef flashErase_handle;
 	uint32_t sectorError;
 	HAL_StatusTypeDef status;


 	if( number_of_sector > 8 )
 8000bc8:	79bb      	ldrb	r3, [r7, #6]
 8000bca:	2b08      	cmp	r3, #8
 8000bcc:	d901      	bls.n	8000bd2 <execute_flash_erase+0x1a>
 		return INVALID_SECTOR;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	e035      	b.n	8000c3e <execute_flash_erase+0x86>

 	if( (sector_number == 0xff ) || (sector_number <= 7) )
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2bff      	cmp	r3, #255	@ 0xff
 8000bd6:	d002      	beq.n	8000bde <execute_flash_erase+0x26>
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2b07      	cmp	r3, #7
 8000bdc:	d82e      	bhi.n	8000c3c <execute_flash_erase+0x84>
 	{
 		if(sector_number == (uint8_t) 0xff)
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2bff      	cmp	r3, #255	@ 0xff
 8000be2:	d102      	bne.n	8000bea <execute_flash_erase+0x32>
 		{
 			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000be4:	2301      	movs	r3, #1
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	e012      	b.n	8000c10 <execute_flash_erase+0x58>
 		}else
 		{
 		    /*Here we are just calculating how many sectors needs to erased */
 			uint8_t remanining_sector = 8 - sector_number;
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	f1c3 0308 	rsb	r3, r3, #8
 8000bf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
             if( number_of_sector > remanining_sector)
 8000bf4:	79ba      	ldrb	r2, [r7, #6]
 8000bf6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d902      	bls.n	8000c04 <execute_flash_erase+0x4c>
             {
             	number_of_sector = remanining_sector;
 8000bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c02:	71bb      	strb	r3, [r7, #6]
             }
 			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]
 			flashErase_handle.Sector = sector_number; // this is the initial sector
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	61bb      	str	r3, [r7, #24]
 			flashErase_handle.NbSectors = number_of_sector;
 8000c0c:	79bb      	ldrb	r3, [r7, #6]
 8000c0e:	61fb      	str	r3, [r7, #28]
 		}
 		flashErase_handle.Banks = FLASH_BANK_1;
 8000c10:	2301      	movs	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]

 		/*Get access to touch the flash registers */
 		HAL_FLASH_Unlock();
 8000c14:	f000 fe52 	bl	80018bc <HAL_FLASH_Unlock>
 		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // our mcu will work on this voltage range
 8000c18:	2302      	movs	r3, #2
 8000c1a:	623b      	str	r3, [r7, #32]
 		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8000c1c:	f107 020c 	add.w	r2, r7, #12
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 ffba 	bl	8001ba0 <HAL_FLASHEx_Erase>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 		HAL_FLASH_Lock();
 8000c32:	f000 fe65 	bl	8001900 <HAL_FLASH_Lock>

 		return status;
 8000c36:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000c3a:	e000      	b.n	8000c3e <execute_flash_erase+0x86>
 	}


 	return INVALID_SECTOR;
 8000c3c:	2304      	movs	r3, #4
 }
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3728      	adds	r7, #40	@ 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <execute_mem_write>:


 uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
 {
 8000c46:	b5b0      	push	{r4, r5, r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	60f8      	str	r0, [r7, #12]
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
     uint8_t status=HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	75fb      	strb	r3, [r7, #23]

     //We have to unlock flash module to get control of registers
     HAL_FLASH_Unlock();
 8000c56:	f000 fe31 	bl	80018bc <HAL_FLASH_Unlock>

     for(uint32_t i = 0 ; i <len ; i++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	e014      	b.n	8000c8a <execute_mem_write+0x44>
     {
         //Here we program the flash byte by byte
         status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
 8000c60:	68ba      	ldr	r2, [r7, #8]
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	18d1      	adds	r1, r2, r3
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2200      	movs	r2, #0
 8000c72:	461c      	mov	r4, r3
 8000c74:	4615      	mov	r5, r2
 8000c76:	4622      	mov	r2, r4
 8000c78:	462b      	mov	r3, r5
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f000 fdcc 	bl	8001818 <HAL_FLASH_Program>
 8000c80:	4603      	mov	r3, r0
 8000c82:	75fb      	strb	r3, [r7, #23]
     for(uint32_t i = 0 ; i <len ; i++)
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	3301      	adds	r3, #1
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d3e6      	bcc.n	8000c60 <execute_mem_write+0x1a>
     }

     HAL_FLASH_Lock();
 8000c92:	f000 fe35 	bl	8001900 <HAL_FLASH_Lock>

     return status;
 8000c96:	7dfb      	ldrb	r3, [r7, #23]
 }
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bdb0      	pop	{r4, r5, r7, pc}

08000ca0 <bootloader_main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void bootloader_main(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8000ca6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000caa:	4819      	ldr	r0, [pc, #100]	@ (8000d10 <bootloader_main+0x70>)
 8000cac:	f001 fa1c 	bl	80020e8 <HAL_GPIO_ReadPin>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d108      	bne.n	8000cc8 <bootloader_main+0x28>
	{
		C_UART = &huart1;
 8000cb6:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <bootloader_main+0x74>)
 8000cb8:	4a17      	ldr	r2, [pc, #92]	@ (8000d18 <bootloader_main+0x78>)
 8000cba:	601a      	str	r2, [r3, #0]
		printf("button pressed...entering the bootloader mode\n");
 8000cbc:	4817      	ldr	r0, [pc, #92]	@ (8000d1c <bootloader_main+0x7c>)
 8000cbe:	f002 fd37 	bl	8003730 <puts>
		bootloader_uart_read_data();
 8000cc2:	f7ff fc89 	bl	80005d8 <bootloader_uart_read_data>
		{
			printf("No valid BOOT_CMD received...jumping to application\n\r");
			bootloader_jump_to_user_app();
		}
	}
}
 8000cc6:	e01e      	b.n	8000d06 <bootloader_main+0x66>
		uint8_t rx_byte = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	71bb      	strb	r3, [r7, #6]
		status = HAL_UART_Receive(&huart1, &rx_byte, 1, UART_TIMEOUT_MS);
 8000ccc:	1db9      	adds	r1, r7, #6
 8000cce:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4810      	ldr	r0, [pc, #64]	@ (8000d18 <bootloader_main+0x78>)
 8000cd6:	f002 f83a 	bl	8002d4e <HAL_UART_Receive>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
		if (status == HAL_OK && rx_byte == BOOT_CMD)
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d10b      	bne.n	8000cfc <bootloader_main+0x5c>
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	2b50      	cmp	r3, #80	@ 0x50
 8000ce8:	d108      	bne.n	8000cfc <bootloader_main+0x5c>
			C_UART = &huart1;
 8000cea:	4b0a      	ldr	r3, [pc, #40]	@ (8000d14 <bootloader_main+0x74>)
 8000cec:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <bootloader_main+0x78>)
 8000cee:	601a      	str	r2, [r3, #0]
			printf("BOOT_CMD (0x50) received...entering bootloader mode\n\r");
 8000cf0:	480b      	ldr	r0, [pc, #44]	@ (8000d20 <bootloader_main+0x80>)
 8000cf2:	f002 fcb5 	bl	8003660 <iprintf>
			bootloader_uart_read_data();
 8000cf6:	f7ff fc6f 	bl	80005d8 <bootloader_uart_read_data>
}
 8000cfa:	e004      	b.n	8000d06 <bootloader_main+0x66>
			printf("No valid BOOT_CMD received...jumping to application\n\r");
 8000cfc:	4809      	ldr	r0, [pc, #36]	@ (8000d24 <bootloader_main+0x84>)
 8000cfe:	f002 fcaf 	bl	8003660 <iprintf>
			bootloader_jump_to_user_app();
 8000d02:	f7ff fcb5 	bl	8000670 <bootloader_jump_to_user_app>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40020800 	.word	0x40020800
 8000d14:	2000014c 	.word	0x2000014c
 8000d18:	20000158 	.word	0x20000158
 8000d1c:	08004a14 	.word	0x08004a14
 8000d20:	08004a44 	.word	0x08004a44
 8000d24:	08004a7c 	.word	0x08004a7c

08000d28 <__io_putchar>:

#define PRINTF   int __io_putchar(int ch)
PRINTF
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000d30:	1d39      	adds	r1, r7, #4
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
 8000d36:	2201      	movs	r2, #1
 8000d38:	4803      	ldr	r0, [pc, #12]	@ (8000d48 <__io_putchar+0x20>)
 8000d3a:	f001 ff7d 	bl	8002c38 <HAL_UART_Transmit>
	return ch;
 8000d3e:	687b      	ldr	r3, [r7, #4]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200001a0 	.word	0x200001a0

08000d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d50:	f000 fb6a 	bl	8001428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d54:	f000 f814 	bl	8000d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d58:	f000 f904 	bl	8000f64 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d5c:	f000 f884 	bl	8000e68 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d60:	f000 f8ac 	bl	8000ebc <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000d64:	f000 f8d4 	bl	8000f10 <MX_USART6_UART_Init>
  MX_CRC_Init();
 8000d68:	f000 f86a 	bl	8000e40 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  printf("bootloader running....\n");
 8000d6c:	4803      	ldr	r0, [pc, #12]	@ (8000d7c <main+0x30>)
 8000d6e:	f002 fcdf 	bl	8003730 <puts>
  bootloader_main();
 8000d72:	f7ff ff95 	bl	8000ca0 <bootloader_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d76:	bf00      	nop
 8000d78:	e7fd      	b.n	8000d76 <main+0x2a>
 8000d7a:	bf00      	nop
 8000d7c:	08004ab4 	.word	0x08004ab4

08000d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b094      	sub	sp, #80	@ 0x50
 8000d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d86:	f107 0320 	add.w	r3, r7, #32
 8000d8a:	2230      	movs	r2, #48	@ 0x30
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f002 fde4 	bl	800395c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	4b23      	ldr	r3, [pc, #140]	@ (8000e38 <SystemClock_Config+0xb8>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dac:	4a22      	ldr	r2, [pc, #136]	@ (8000e38 <SystemClock_Config+0xb8>)
 8000dae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db4:	4b20      	ldr	r3, [pc, #128]	@ (8000e38 <SystemClock_Config+0xb8>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e3c <SystemClock_Config+0xbc>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e3c <SystemClock_Config+0xbc>)
 8000dce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <SystemClock_Config+0xbc>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de0:	2302      	movs	r3, #2
 8000de2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de4:	2301      	movs	r3, #1
 8000de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de8:	2310      	movs	r3, #16
 8000dea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df0:	f107 0320 	add.w	r3, r7, #32
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 f9a9 	bl	800214c <HAL_RCC_OscConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000e00:	f000 f902 	bl	8001008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e04:	230f      	movs	r3, #15
 8000e06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 fc0c 	bl	800263c <HAL_RCC_ClockConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e2a:	f000 f8ed 	bl	8001008 <Error_Handler>
  }
}
 8000e2e:	bf00      	nop
 8000e30:	3750      	adds	r7, #80	@ 0x50
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40007000 	.word	0x40007000

08000e40 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <MX_CRC_Init+0x20>)
 8000e46:	4a07      	ldr	r2, [pc, #28]	@ (8000e64 <MX_CRC_Init+0x24>)
 8000e48:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e4a:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <MX_CRC_Init+0x20>)
 8000e4c:	f000 fc9d 	bl	800178a <HAL_CRC_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000e56:	f000 f8d7 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000150 	.word	0x20000150
 8000e64:	40023000 	.word	0x40023000

08000e68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <MX_USART1_UART_Init+0x4c>)
 8000e6e:	4a12      	ldr	r2, [pc, #72]	@ (8000eb8 <MX_USART1_UART_Init+0x50>)
 8000e70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e72:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <MX_USART1_UART_Init+0x4c>)
 8000e74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb4 <MX_USART1_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e80:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb4 <MX_USART1_UART_Init+0x4c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb4 <MX_USART1_UART_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	@ (8000eb4 <MX_USART1_UART_Init+0x4c>)
 8000e8e:	220c      	movs	r2, #12
 8000e90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e92:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <MX_USART1_UART_Init+0x4c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e98:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <MX_USART1_UART_Init+0x4c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e9e:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <MX_USART1_UART_Init+0x4c>)
 8000ea0:	f001 fe7a 	bl	8002b98 <HAL_UART_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eaa:	f000 f8ad 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000158 	.word	0x20000158
 8000eb8:	40011000 	.word	0x40011000

08000ebc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000ec2:	4a12      	ldr	r2, [pc, #72]	@ (8000f0c <MX_USART2_UART_Init+0x50>)
 8000ec4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ec6:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000ec8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ecc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	@ (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eda:	4b0b      	ldr	r3, [pc, #44]	@ (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee0:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee6:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ef2:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <MX_USART2_UART_Init+0x4c>)
 8000ef4:	f001 fe50 	bl	8002b98 <HAL_UART_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000efe:	f000 f883 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200001a0 	.word	0x200001a0
 8000f0c:	40004400 	.word	0x40004400

08000f10 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f14:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <MX_USART6_UART_Init+0x4c>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	@ (8000f60 <MX_USART6_UART_Init+0x50>)
 8000f18:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000f1a:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <MX_USART6_UART_Init+0x4c>)
 8000f1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f20:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <MX_USART6_UART_Init+0x4c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	@ (8000f5c <MX_USART6_UART_Init+0x4c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f5c <MX_USART6_UART_Init+0x4c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f34:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <MX_USART6_UART_Init+0x4c>)
 8000f36:	220c      	movs	r2, #12
 8000f38:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <MX_USART6_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <MX_USART6_UART_Init+0x4c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f46:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <MX_USART6_UART_Init+0x4c>)
 8000f48:	f001 fe26 	bl	8002b98 <HAL_UART_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f52:	f000 f859 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200001e8 	.word	0x200001e8
 8000f60:	40011400 	.word	0x40011400

08000f64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ffc <MX_GPIO_Init+0x98>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a1e      	ldr	r2, [pc, #120]	@ (8000ffc <MX_GPIO_Init+0x98>)
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ffc <MX_GPIO_Init+0x98>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4b18      	ldr	r3, [pc, #96]	@ (8000ffc <MX_GPIO_Init+0x98>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a17      	ldr	r2, [pc, #92]	@ (8000ffc <MX_GPIO_Init+0x98>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <MX_GPIO_Init+0x98>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2120      	movs	r1, #32
 8000fb6:	4812      	ldr	r0, [pc, #72]	@ (8001000 <MX_GPIO_Init+0x9c>)
 8000fb8:	f001 f8ae 	bl	8002118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480c      	ldr	r0, [pc, #48]	@ (8001004 <MX_GPIO_Init+0xa0>)
 8000fd2:	f000 ff05 	bl	8001de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fd6:	2320      	movs	r3, #32
 8000fd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	4619      	mov	r1, r3
 8000fec:	4804      	ldr	r0, [pc, #16]	@ (8001000 <MX_GPIO_Init+0x9c>)
 8000fee:	f000 fef7 	bl	8001de0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ff2:	bf00      	nop
 8000ff4:	3720      	adds	r7, #32
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020000 	.word	0x40020000
 8001004:	40020800 	.word	0x40020800

08001008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <Error_Handler+0x8>

08001014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <HAL_MspInit+0x4c>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001022:	4a0f      	ldr	r2, [pc, #60]	@ (8001060 <HAL_MspInit+0x4c>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001028:	6453      	str	r3, [r2, #68]	@ 0x44
 800102a:	4b0d      	ldr	r3, [pc, #52]	@ (8001060 <HAL_MspInit+0x4c>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <HAL_MspInit+0x4c>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103e:	4a08      	ldr	r2, [pc, #32]	@ (8001060 <HAL_MspInit+0x4c>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001044:	6413      	str	r3, [r2, #64]	@ 0x40
 8001046:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_MspInit+0x4c>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800

08001064 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0b      	ldr	r2, [pc, #44]	@ (80010a0 <HAL_CRC_MspInit+0x3c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d10d      	bne.n	8001092 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <HAL_CRC_MspInit+0x40>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	4a09      	ldr	r2, [pc, #36]	@ (80010a4 <HAL_CRC_MspInit+0x40>)
 8001080:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001084:	6313      	str	r3, [r2, #48]	@ 0x30
 8001086:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <HAL_CRC_MspInit+0x40>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023000 	.word	0x40023000
 80010a4:	40023800 	.word	0x40023800

080010a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08e      	sub	sp, #56	@ 0x38
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a4b      	ldr	r2, [pc, #300]	@ (80011f4 <HAL_UART_MspInit+0x14c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d12d      	bne.n	8001126 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
 80010ce:	4b4a      	ldr	r3, [pc, #296]	@ (80011f8 <HAL_UART_MspInit+0x150>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	4a49      	ldr	r2, [pc, #292]	@ (80011f8 <HAL_UART_MspInit+0x150>)
 80010d4:	f043 0310 	orr.w	r3, r3, #16
 80010d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010da:	4b47      	ldr	r3, [pc, #284]	@ (80011f8 <HAL_UART_MspInit+0x150>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010de:	f003 0310 	and.w	r3, r3, #16
 80010e2:	623b      	str	r3, [r7, #32]
 80010e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
 80010ea:	4b43      	ldr	r3, [pc, #268]	@ (80011f8 <HAL_UART_MspInit+0x150>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	4a42      	ldr	r2, [pc, #264]	@ (80011f8 <HAL_UART_MspInit+0x150>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f6:	4b40      	ldr	r3, [pc, #256]	@ (80011f8 <HAL_UART_MspInit+0x150>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001102:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001114:	2307      	movs	r3, #7
 8001116:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800111c:	4619      	mov	r1, r3
 800111e:	4837      	ldr	r0, [pc, #220]	@ (80011fc <HAL_UART_MspInit+0x154>)
 8001120:	f000 fe5e 	bl	8001de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001124:	e062      	b.n	80011ec <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART2)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a35      	ldr	r2, [pc, #212]	@ (8001200 <HAL_UART_MspInit+0x158>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d12c      	bne.n	800118a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
 8001134:	4b30      	ldr	r3, [pc, #192]	@ (80011f8 <HAL_UART_MspInit+0x150>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001138:	4a2f      	ldr	r2, [pc, #188]	@ (80011f8 <HAL_UART_MspInit+0x150>)
 800113a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800113e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001140:	4b2d      	ldr	r3, [pc, #180]	@ (80011f8 <HAL_UART_MspInit+0x150>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001148:	61bb      	str	r3, [r7, #24]
 800114a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	4b29      	ldr	r3, [pc, #164]	@ (80011f8 <HAL_UART_MspInit+0x150>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001154:	4a28      	ldr	r2, [pc, #160]	@ (80011f8 <HAL_UART_MspInit+0x150>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6313      	str	r3, [r2, #48]	@ 0x30
 800115c:	4b26      	ldr	r3, [pc, #152]	@ (80011f8 <HAL_UART_MspInit+0x150>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001168:	230c      	movs	r3, #12
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001178:	2307      	movs	r3, #7
 800117a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001180:	4619      	mov	r1, r3
 8001182:	481e      	ldr	r0, [pc, #120]	@ (80011fc <HAL_UART_MspInit+0x154>)
 8001184:	f000 fe2c 	bl	8001de0 <HAL_GPIO_Init>
}
 8001188:	e030      	b.n	80011ec <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a1d      	ldr	r2, [pc, #116]	@ (8001204 <HAL_UART_MspInit+0x15c>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d12b      	bne.n	80011ec <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	4b17      	ldr	r3, [pc, #92]	@ (80011f8 <HAL_UART_MspInit+0x150>)
 800119a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119c:	4a16      	ldr	r2, [pc, #88]	@ (80011f8 <HAL_UART_MspInit+0x150>)
 800119e:	f043 0320 	orr.w	r3, r3, #32
 80011a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a4:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <HAL_UART_MspInit+0x150>)
 80011a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a8:	f003 0320 	and.w	r3, r3, #32
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <HAL_UART_MspInit+0x150>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b8:	4a0f      	ldr	r2, [pc, #60]	@ (80011f8 <HAL_UART_MspInit+0x150>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c0:	4b0d      	ldr	r3, [pc, #52]	@ (80011f8 <HAL_UART_MspInit+0x150>)
 80011c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011cc:	23c0      	movs	r3, #192	@ 0xc0
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80011dc:	2308      	movs	r3, #8
 80011de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e4:	4619      	mov	r1, r3
 80011e6:	4808      	ldr	r0, [pc, #32]	@ (8001208 <HAL_UART_MspInit+0x160>)
 80011e8:	f000 fdfa 	bl	8001de0 <HAL_GPIO_Init>
}
 80011ec:	bf00      	nop
 80011ee:	3738      	adds	r7, #56	@ 0x38
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40011000 	.word	0x40011000
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020000 	.word	0x40020000
 8001200:	40004400 	.word	0x40004400
 8001204:	40011400 	.word	0x40011400
 8001208:	40020800 	.word	0x40020800

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <NMI_Handler+0x4>

08001214 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <MemManage_Handler+0x4>

08001224 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <BusFault_Handler+0x4>

0800122c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <UsageFault_Handler+0x4>

08001234 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001262:	f000 f969 	bl	8001538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}

0800126a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	60f8      	str	r0, [r7, #12]
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	e00a      	b.n	8001292 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800127c:	f3af 8000 	nop.w
 8001280:	4601      	mov	r1, r0
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	60ba      	str	r2, [r7, #8]
 8001288:	b2ca      	uxtb	r2, r1
 800128a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3301      	adds	r3, #1
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	429a      	cmp	r2, r3
 8001298:	dbf0      	blt.n	800127c <_read+0x12>
  }

  return len;
 800129a:	687b      	ldr	r3, [r7, #4]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	e009      	b.n	80012ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	60ba      	str	r2, [r7, #8]
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fd32 	bl	8000d28 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	3301      	adds	r3, #1
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	dbf1      	blt.n	80012b6 <_write+0x12>
  }
  return len;
 80012d2:	687b      	ldr	r3, [r7, #4]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <_close>:

int _close(int file)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001304:	605a      	str	r2, [r3, #4]
  return 0;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <_isatty>:

int _isatty(int file)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800131c:	2301      	movs	r3, #1
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800132a:	b480      	push	{r7}
 800132c:	b085      	sub	sp, #20
 800132e:	af00      	add	r7, sp, #0
 8001330:	60f8      	str	r0, [r7, #12]
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800134c:	4a14      	ldr	r2, [pc, #80]	@ (80013a0 <_sbrk+0x5c>)
 800134e:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <_sbrk+0x60>)
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001358:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <_sbrk+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d102      	bne.n	8001366 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001360:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <_sbrk+0x64>)
 8001362:	4a12      	ldr	r2, [pc, #72]	@ (80013ac <_sbrk+0x68>)
 8001364:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001366:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	429a      	cmp	r2, r3
 8001372:	d207      	bcs.n	8001384 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001374:	f002 fb40 	bl	80039f8 <__errno>
 8001378:	4603      	mov	r3, r0
 800137a:	220c      	movs	r2, #12
 800137c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	e009      	b.n	8001398 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001384:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <_sbrk+0x64>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138a:	4b07      	ldr	r3, [pc, #28]	@ (80013a8 <_sbrk+0x64>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	4a05      	ldr	r2, [pc, #20]	@ (80013a8 <_sbrk+0x64>)
 8001394:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001396:	68fb      	ldr	r3, [r7, #12]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20018000 	.word	0x20018000
 80013a4:	00000400 	.word	0x00000400
 80013a8:	20000230 	.word	0x20000230
 80013ac:	200003a8 	.word	0x200003a8

080013b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <SystemInit+0x20>)
 80013b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ba:	4a05      	ldr	r2, [pc, #20]	@ (80013d0 <SystemInit+0x20>)
 80013bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800140c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013d8:	f7ff ffea 	bl	80013b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013dc:	480c      	ldr	r0, [pc, #48]	@ (8001410 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013de:	490d      	ldr	r1, [pc, #52]	@ (8001414 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001418 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0a      	ldr	r2, [pc, #40]	@ (800141c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001420 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001402:	f002 faff 	bl	8003a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001406:	f7ff fca1 	bl	8000d4c <main>
  bx  lr    
 800140a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800140c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001414:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001418:	08004b28 	.word	0x08004b28
  ldr r2, =_sbss
 800141c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001420:	200003a4 	.word	0x200003a4

08001424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC_IRQHandler>
	...

08001428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800142c:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0d      	ldr	r2, [pc, #52]	@ (8001468 <HAL_Init+0x40>)
 8001432:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001436:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001438:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <HAL_Init+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <HAL_Init+0x40>)
 800143e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001442:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001444:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <HAL_Init+0x40>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a07      	ldr	r2, [pc, #28]	@ (8001468 <HAL_Init+0x40>)
 800144a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800144e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001450:	2003      	movs	r0, #3
 8001452:	f000 f967 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001456:	200f      	movs	r0, #15
 8001458:	f000 f83e 	bl	80014d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800145c:	f7ff fdda 	bl	8001014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023c00 	.word	0x40023c00

0800146c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001470:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <HAL_DeInit+0x4c>)
 8001472:	4a12      	ldr	r2, [pc, #72]	@ (80014bc <HAL_DeInit+0x50>)
 8001474:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001476:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <HAL_DeInit+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800147c:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <HAL_DeInit+0x4c>)
 800147e:	4a10      	ldr	r2, [pc, #64]	@ (80014c0 <HAL_DeInit+0x54>)
 8001480:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8001482:	4b0d      	ldr	r3, [pc, #52]	@ (80014b8 <HAL_DeInit+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001488:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <HAL_DeInit+0x4c>)
 800148a:	4a0e      	ldr	r2, [pc, #56]	@ (80014c4 <HAL_DeInit+0x58>)
 800148c:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 800148e:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <HAL_DeInit+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8001494:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <HAL_DeInit+0x4c>)
 8001496:	2280      	movs	r2, #128	@ 0x80
 8001498:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800149a:	4b07      	ldr	r3, [pc, #28]	@ (80014b8 <HAL_DeInit+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80014a0:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <HAL_DeInit+0x4c>)
 80014a2:	f04f 32ff 	mov.w	r2, #4294967295
 80014a6:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80014a8:	4b03      	ldr	r3, [pc, #12]	@ (80014b8 <HAL_DeInit+0x4c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80014ae:	f000 f80b 	bl	80014c8 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40023800 	.word	0x40023800
 80014bc:	10e2c80f 	.word	0x10e2c80f
 80014c0:	00077931 	.word	0x00077931
 80014c4:	0060109f 	.word	0x0060109f

080014c8 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e0:	4b12      	ldr	r3, [pc, #72]	@ (800152c <HAL_InitTick+0x54>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <HAL_InitTick+0x58>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4619      	mov	r1, r3
 80014ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f93b 	bl	8001772 <HAL_SYSTICK_Config>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e00e      	b.n	8001524 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b0f      	cmp	r3, #15
 800150a:	d80a      	bhi.n	8001522 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800150c:	2200      	movs	r2, #0
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f000 f911 	bl	800173a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001518:	4a06      	ldr	r2, [pc, #24]	@ (8001534 <HAL_InitTick+0x5c>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	e000      	b.n	8001524 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000000 	.word	0x20000000
 8001530:	20000008 	.word	0x20000008
 8001534:	20000004 	.word	0x20000004

08001538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800153c:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <HAL_IncTick+0x20>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_IncTick+0x24>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4413      	add	r3, r2
 8001548:	4a04      	ldr	r2, [pc, #16]	@ (800155c <HAL_IncTick+0x24>)
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000008 	.word	0x20000008
 800155c:	20000234 	.word	0x20000234

08001560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return uwTick;
 8001564:	4b03      	ldr	r3, [pc, #12]	@ (8001574 <HAL_GetTick+0x14>)
 8001566:	681b      	ldr	r3, [r3, #0]
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000234 	.word	0x20000234

08001578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001580:	f7ff ffee 	bl	8001560 <HAL_GetTick>
 8001584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001590:	d005      	beq.n	800159e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001592:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <HAL_Delay+0x44>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800159e:	bf00      	nop
 80015a0:	f7ff ffde 	bl	8001560 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d8f7      	bhi.n	80015a0 <HAL_Delay+0x28>
  {
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000008 	.word	0x20000008

080015c0 <__NVIC_SetPriorityGrouping>:
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015dc:	4013      	ands	r3, r2
 80015de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f2:	4a04      	ldr	r2, [pc, #16]	@ (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	60d3      	str	r3, [r2, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_GetPriorityGrouping>:
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800160c:	4b04      	ldr	r3, [pc, #16]	@ (8001620 <__NVIC_GetPriorityGrouping+0x18>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 0307 	and.w	r3, r3, #7
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_SetPriority>:
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db0a      	blt.n	800164e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	b2da      	uxtb	r2, r3
 800163c:	490c      	ldr	r1, [pc, #48]	@ (8001670 <__NVIC_SetPriority+0x4c>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	0112      	lsls	r2, r2, #4
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	440b      	add	r3, r1
 8001648:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800164c:	e00a      	b.n	8001664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4908      	ldr	r1, [pc, #32]	@ (8001674 <__NVIC_SetPriority+0x50>)
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	3b04      	subs	r3, #4
 800165c:	0112      	lsls	r2, r2, #4
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	440b      	add	r3, r1
 8001662:	761a      	strb	r2, [r3, #24]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000e100 	.word	0xe000e100
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <NVIC_EncodePriority>:
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	@ 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f1c3 0307 	rsb	r3, r3, #7
 8001692:	2b04      	cmp	r3, #4
 8001694:	bf28      	it	cs
 8001696:	2304      	movcs	r3, #4
 8001698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d902      	bls.n	80016a8 <NVIC_EncodePriority+0x30>
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3b03      	subs	r3, #3
 80016a6:	e000      	b.n	80016aa <NVIC_EncodePriority+0x32>
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	401a      	ands	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	43d9      	mvns	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	4313      	orrs	r3, r2
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3724      	adds	r7, #36	@ 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016f0:	d301      	bcc.n	80016f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00f      	b.n	8001716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001720 <SysTick_Config+0x40>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fe:	210f      	movs	r1, #15
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f7ff ff8e 	bl	8001624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001708:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <SysTick_Config+0x40>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170e:	4b04      	ldr	r3, [pc, #16]	@ (8001720 <SysTick_Config+0x40>)
 8001710:	2207      	movs	r2, #7
 8001712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	e000e010 	.word	0xe000e010

08001724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff47 	bl	80015c0 <__NVIC_SetPriorityGrouping>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800174c:	f7ff ff5c 	bl	8001608 <__NVIC_GetPriorityGrouping>
 8001750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	6978      	ldr	r0, [r7, #20]
 8001758:	f7ff ff8e 	bl	8001678 <NVIC_EncodePriority>
 800175c:	4602      	mov	r2, r0
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff5d 	bl	8001624 <__NVIC_SetPriority>
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ffb0 	bl	80016e0 <SysTick_Config>
 8001780:	4603      	mov	r3, r0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e00e      	b.n	80017ba <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	795b      	ldrb	r3, [r3, #5]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d105      	bne.n	80017b2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fc59 	bl	8001064 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b087      	sub	sp, #28
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2202      	movs	r2, #2
 80017d6:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	e00a      	b.n	80017f4 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	441a      	add	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	3301      	adds	r3, #1
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d3f0      	bcc.n	80017de <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2201      	movs	r2, #1
 8001808:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800180a:	693b      	ldr	r3, [r7, #16]
}
 800180c:	4618      	mov	r0, r3
 800180e:	371c      	adds	r7, #28
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001826:	4b23      	ldr	r3, [pc, #140]	@ (80018b4 <HAL_FLASH_Program+0x9c>)
 8001828:	7e1b      	ldrb	r3, [r3, #24]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <HAL_FLASH_Program+0x1a>
 800182e:	2302      	movs	r3, #2
 8001830:	e03b      	b.n	80018aa <HAL_FLASH_Program+0x92>
 8001832:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <HAL_FLASH_Program+0x9c>)
 8001834:	2201      	movs	r2, #1
 8001836:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001838:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800183c:	f000 f870 	bl	8001920 <FLASH_WaitForLastOperation>
 8001840:	4603      	mov	r3, r0
 8001842:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001844:	7dfb      	ldrb	r3, [r7, #23]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d12b      	bne.n	80018a2 <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d105      	bne.n	800185c <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001850:	783b      	ldrb	r3, [r7, #0]
 8001852:	4619      	mov	r1, r3
 8001854:	68b8      	ldr	r0, [r7, #8]
 8001856:	f000 f91b 	bl	8001a90 <FLASH_Program_Byte>
 800185a:	e016      	b.n	800188a <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d105      	bne.n	800186e <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001862:	883b      	ldrh	r3, [r7, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	68b8      	ldr	r0, [r7, #8]
 8001868:	f000 f8ee 	bl	8001a48 <FLASH_Program_HalfWord>
 800186c:	e00d      	b.n	800188a <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d105      	bne.n	8001880 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	4619      	mov	r1, r3
 8001878:	68b8      	ldr	r0, [r7, #8]
 800187a:	f000 f8c3 	bl	8001a04 <FLASH_Program_Word>
 800187e:	e004      	b.n	800188a <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001880:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001884:	68b8      	ldr	r0, [r7, #8]
 8001886:	f000 f88b 	bl	80019a0 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800188a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800188e:	f000 f847 	bl	8001920 <FLASH_WaitForLastOperation>
 8001892:	4603      	mov	r3, r0
 8001894:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001896:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <HAL_FLASH_Program+0xa0>)
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	4a07      	ldr	r2, [pc, #28]	@ (80018b8 <HAL_FLASH_Program+0xa0>)
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80018a2:	4b04      	ldr	r3, [pc, #16]	@ (80018b4 <HAL_FLASH_Program+0x9c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	761a      	strb	r2, [r3, #24]

  return status;
 80018a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000238 	.word	0x20000238
 80018b8:	40023c00 	.word	0x40023c00

080018bc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80018c6:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <HAL_FLASH_Unlock+0x38>)
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	da0b      	bge.n	80018e6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80018ce:	4b09      	ldr	r3, [pc, #36]	@ (80018f4 <HAL_FLASH_Unlock+0x38>)
 80018d0:	4a09      	ldr	r2, [pc, #36]	@ (80018f8 <HAL_FLASH_Unlock+0x3c>)
 80018d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80018d4:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <HAL_FLASH_Unlock+0x38>)
 80018d6:	4a09      	ldr	r2, [pc, #36]	@ (80018fc <HAL_FLASH_Unlock+0x40>)
 80018d8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80018da:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <HAL_FLASH_Unlock+0x38>)
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	da01      	bge.n	80018e6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80018e6:	79fb      	ldrb	r3, [r7, #7]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	40023c00 	.word	0x40023c00
 80018f8:	45670123 	.word	0x45670123
 80018fc:	cdef89ab 	.word	0xcdef89ab

08001900 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001904:	4b05      	ldr	r3, [pc, #20]	@ (800191c <HAL_FLASH_Lock+0x1c>)
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	4a04      	ldr	r2, [pc, #16]	@ (800191c <HAL_FLASH_Lock+0x1c>)
 800190a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800190e:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40023c00 	.word	0x40023c00

08001920 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800192c:	4b1a      	ldr	r3, [pc, #104]	@ (8001998 <FLASH_WaitForLastOperation+0x78>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001932:	f7ff fe15 	bl	8001560 <HAL_GetTick>
 8001936:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001938:	e010      	b.n	800195c <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001940:	d00c      	beq.n	800195c <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d007      	beq.n	8001958 <FLASH_WaitForLastOperation+0x38>
 8001948:	f7ff fe0a 	bl	8001560 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	d201      	bcs.n	800195c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e019      	b.n	8001990 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800195c:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <FLASH_WaitForLastOperation+0x7c>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1e8      	bne.n	800193a <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001968:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <FLASH_WaitForLastOperation+0x7c>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001974:	4b09      	ldr	r3, [pc, #36]	@ (800199c <FLASH_WaitForLastOperation+0x7c>)
 8001976:	2201      	movs	r2, #1
 8001978:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800197a:	4b08      	ldr	r3, [pc, #32]	@ (800199c <FLASH_WaitForLastOperation+0x7c>)
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001986:	f000 f8a5 	bl	8001ad4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e000      	b.n	8001990 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800198e:	2300      	movs	r3, #0

}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000238 	.word	0x20000238
 800199c:	40023c00 	.word	0x40023c00

080019a0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80019ac:	4b14      	ldr	r3, [pc, #80]	@ (8001a00 <FLASH_Program_DoubleWord+0x60>)
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	4a13      	ldr	r2, [pc, #76]	@ (8001a00 <FLASH_Program_DoubleWord+0x60>)
 80019b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80019b8:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <FLASH_Program_DoubleWord+0x60>)
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	4a10      	ldr	r2, [pc, #64]	@ (8001a00 <FLASH_Program_DoubleWord+0x60>)
 80019be:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80019c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80019c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a00 <FLASH_Program_DoubleWord+0x60>)
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a00 <FLASH_Program_DoubleWord+0x60>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80019d6:	f3bf 8f6f 	isb	sy
}
 80019da:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80019dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	000a      	movs	r2, r1
 80019ea:	2300      	movs	r3, #0
 80019ec:	68f9      	ldr	r1, [r7, #12]
 80019ee:	3104      	adds	r1, #4
 80019f0:	4613      	mov	r3, r2
 80019f2:	600b      	str	r3, [r1, #0]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	40023c00 	.word	0x40023c00

08001a04 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a44 <FLASH_Program_Word+0x40>)
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	4a0c      	ldr	r2, [pc, #48]	@ (8001a44 <FLASH_Program_Word+0x40>)
 8001a14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a18:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a44 <FLASH_Program_Word+0x40>)
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	4a09      	ldr	r2, [pc, #36]	@ (8001a44 <FLASH_Program_Word+0x40>)
 8001a20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a24:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a26:	4b07      	ldr	r3, [pc, #28]	@ (8001a44 <FLASH_Program_Word+0x40>)
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	4a06      	ldr	r2, [pc, #24]	@ (8001a44 <FLASH_Program_Word+0x40>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	601a      	str	r2, [r3, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	40023c00 	.word	0x40023c00

08001a48 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a54:	4b0d      	ldr	r3, [pc, #52]	@ (8001a8c <FLASH_Program_HalfWord+0x44>)
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	4a0c      	ldr	r2, [pc, #48]	@ (8001a8c <FLASH_Program_HalfWord+0x44>)
 8001a5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001a60:	4b0a      	ldr	r3, [pc, #40]	@ (8001a8c <FLASH_Program_HalfWord+0x44>)
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	4a09      	ldr	r2, [pc, #36]	@ (8001a8c <FLASH_Program_HalfWord+0x44>)
 8001a66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a6c:	4b07      	ldr	r3, [pc, #28]	@ (8001a8c <FLASH_Program_HalfWord+0x44>)
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	4a06      	ldr	r2, [pc, #24]	@ (8001a8c <FLASH_Program_HalfWord+0x44>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	801a      	strh	r2, [r3, #0]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40023c00 	.word	0x40023c00

08001a90 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <FLASH_Program_Byte+0x40>)
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad0 <FLASH_Program_Byte+0x40>)
 8001aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001aa6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <FLASH_Program_Byte+0x40>)
 8001aaa:	4a09      	ldr	r2, [pc, #36]	@ (8001ad0 <FLASH_Program_Byte+0x40>)
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ab0:	4b07      	ldr	r3, [pc, #28]	@ (8001ad0 <FLASH_Program_Byte+0x40>)
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	4a06      	ldr	r2, [pc, #24]	@ (8001ad0 <FLASH_Program_Byte+0x40>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	78fa      	ldrb	r2, [r7, #3]
 8001ac0:	701a      	strb	r2, [r3, #0]
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40023c00 	.word	0x40023c00

08001ad4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001ad8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b98 <FLASH_SetErrorCode+0xc4>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	f003 0310 	and.w	r3, r3, #16
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d008      	beq.n	8001af6 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b9c <FLASH_SetErrorCode+0xc8>)
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	f043 0310 	orr.w	r3, r3, #16
 8001aec:	4a2b      	ldr	r2, [pc, #172]	@ (8001b9c <FLASH_SetErrorCode+0xc8>)
 8001aee:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001af0:	4b29      	ldr	r3, [pc, #164]	@ (8001b98 <FLASH_SetErrorCode+0xc4>)
 8001af2:	2210      	movs	r2, #16
 8001af4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001af6:	4b28      	ldr	r3, [pc, #160]	@ (8001b98 <FLASH_SetErrorCode+0xc4>)
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	f003 0320 	and.w	r3, r3, #32
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d008      	beq.n	8001b14 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001b02:	4b26      	ldr	r3, [pc, #152]	@ (8001b9c <FLASH_SetErrorCode+0xc8>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f043 0308 	orr.w	r3, r3, #8
 8001b0a:	4a24      	ldr	r2, [pc, #144]	@ (8001b9c <FLASH_SetErrorCode+0xc8>)
 8001b0c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001b0e:	4b22      	ldr	r3, [pc, #136]	@ (8001b98 <FLASH_SetErrorCode+0xc4>)
 8001b10:	2220      	movs	r2, #32
 8001b12:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001b14:	4b20      	ldr	r3, [pc, #128]	@ (8001b98 <FLASH_SetErrorCode+0xc4>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001b20:	4b1e      	ldr	r3, [pc, #120]	@ (8001b9c <FLASH_SetErrorCode+0xc8>)
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	f043 0304 	orr.w	r3, r3, #4
 8001b28:	4a1c      	ldr	r2, [pc, #112]	@ (8001b9c <FLASH_SetErrorCode+0xc8>)
 8001b2a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b98 <FLASH_SetErrorCode+0xc4>)
 8001b2e:	2240      	movs	r2, #64	@ 0x40
 8001b30:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001b32:	4b19      	ldr	r3, [pc, #100]	@ (8001b98 <FLASH_SetErrorCode+0xc4>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d008      	beq.n	8001b50 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001b3e:	4b17      	ldr	r3, [pc, #92]	@ (8001b9c <FLASH_SetErrorCode+0xc8>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f043 0302 	orr.w	r3, r3, #2
 8001b46:	4a15      	ldr	r2, [pc, #84]	@ (8001b9c <FLASH_SetErrorCode+0xc8>)
 8001b48:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001b4a:	4b13      	ldr	r3, [pc, #76]	@ (8001b98 <FLASH_SetErrorCode+0xc4>)
 8001b4c:	2280      	movs	r2, #128	@ 0x80
 8001b4e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001b50:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <FLASH_SetErrorCode+0xc4>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d009      	beq.n	8001b70 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b9c <FLASH_SetErrorCode+0xc8>)
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	4a0d      	ldr	r2, [pc, #52]	@ (8001b9c <FLASH_SetErrorCode+0xc8>)
 8001b66:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001b68:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <FLASH_SetErrorCode+0xc4>)
 8001b6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b6e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001b70:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <FLASH_SetErrorCode+0xc4>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d008      	beq.n	8001b8e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001b7c:	4b07      	ldr	r3, [pc, #28]	@ (8001b9c <FLASH_SetErrorCode+0xc8>)
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	f043 0320 	orr.w	r3, r3, #32
 8001b84:	4a05      	ldr	r2, [pc, #20]	@ (8001b9c <FLASH_SetErrorCode+0xc8>)
 8001b86:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001b88:	4b03      	ldr	r3, [pc, #12]	@ (8001b98 <FLASH_SetErrorCode+0xc4>)
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	60da      	str	r2, [r3, #12]
  }
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	40023c00 	.word	0x40023c00
 8001b9c:	20000238 	.word	0x20000238

08001ba0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001bae:	4b31      	ldr	r3, [pc, #196]	@ (8001c74 <HAL_FLASHEx_Erase+0xd4>)
 8001bb0:	7e1b      	ldrb	r3, [r3, #24]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d101      	bne.n	8001bba <HAL_FLASHEx_Erase+0x1a>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e058      	b.n	8001c6c <HAL_FLASHEx_Erase+0xcc>
 8001bba:	4b2e      	ldr	r3, [pc, #184]	@ (8001c74 <HAL_FLASHEx_Erase+0xd4>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bc0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001bc4:	f7ff feac 	bl	8001920 <FLASH_WaitForLastOperation>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d148      	bne.n	8001c64 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d115      	bne.n	8001c0e <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	4619      	mov	r1, r3
 8001bee:	4610      	mov	r0, r2
 8001bf0:	f000 f844 	bl	8001c7c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bf4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001bf8:	f7ff fe92 	bl	8001920 <FLASH_WaitForLastOperation>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001c00:	4b1d      	ldr	r3, [pc, #116]	@ (8001c78 <HAL_FLASHEx_Erase+0xd8>)
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	4a1c      	ldr	r2, [pc, #112]	@ (8001c78 <HAL_FLASHEx_Erase+0xd8>)
 8001c06:	f023 0304 	bic.w	r3, r3, #4
 8001c0a:	6113      	str	r3, [r2, #16]
 8001c0c:	e028      	b.n	8001c60 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	e01c      	b.n	8001c50 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	68b8      	ldr	r0, [r7, #8]
 8001c20:	f000 f850 	bl	8001cc4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c24:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001c28:	f7ff fe7a 	bl	8001920 <FLASH_WaitForLastOperation>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001c30:	4b11      	ldr	r3, [pc, #68]	@ (8001c78 <HAL_FLASHEx_Erase+0xd8>)
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	4a10      	ldr	r2, [pc, #64]	@ (8001c78 <HAL_FLASHEx_Erase+0xd8>)
 8001c36:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8001c3a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	601a      	str	r2, [r3, #0]
          break;
 8001c48:	e00a      	b.n	8001c60 <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	4413      	add	r3, r2
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d3da      	bcc.n	8001c16 <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001c60:	f000 f878 	bl	8001d54 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c64:	4b03      	ldr	r3, [pc, #12]	@ (8001c74 <HAL_FLASHEx_Erase+0xd4>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	761a      	strb	r2, [r3, #24]

  return status;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000238 	.word	0x20000238
 8001c78:	40023c00 	.word	0x40023c00

08001c7c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	6039      	str	r1, [r7, #0]
 8001c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c88:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc0 <FLASH_MassErase+0x44>)
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc0 <FLASH_MassErase+0x44>)
 8001c8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001c94:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <FLASH_MassErase+0x44>)
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	4a09      	ldr	r2, [pc, #36]	@ (8001cc0 <FLASH_MassErase+0x44>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001ca0:	4b07      	ldr	r3, [pc, #28]	@ (8001cc0 <FLASH_MassErase+0x44>)
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	4a05      	ldr	r2, [pc, #20]	@ (8001cc0 <FLASH_MassErase+0x44>)
 8001cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb0:	6113      	str	r3, [r2, #16]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40023c00 	.word	0x40023c00

08001cc4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d102      	bne.n	8001ce0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	e010      	b.n	8001d02 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d103      	bne.n	8001cee <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001ce6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	e009      	b.n	8001d02 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d103      	bne.n	8001cfc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001cf4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	e002      	b.n	8001d02 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001cfc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d00:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d02:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <FLASH_Erase_Sector+0x8c>)
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	4a12      	ldr	r2, [pc, #72]	@ (8001d50 <FLASH_Erase_Sector+0x8c>)
 8001d08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d0c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001d0e:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <FLASH_Erase_Sector+0x8c>)
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	490f      	ldr	r1, [pc, #60]	@ (8001d50 <FLASH_Erase_Sector+0x8c>)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d50 <FLASH_Erase_Sector+0x8c>)
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001d50 <FLASH_Erase_Sector+0x8c>)
 8001d20:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001d24:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001d26:	4b0a      	ldr	r3, [pc, #40]	@ (8001d50 <FLASH_Erase_Sector+0x8c>)
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	4a07      	ldr	r2, [pc, #28]	@ (8001d50 <FLASH_Erase_Sector+0x8c>)
 8001d32:	f043 0302 	orr.w	r3, r3, #2
 8001d36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001d38:	4b05      	ldr	r3, [pc, #20]	@ (8001d50 <FLASH_Erase_Sector+0x8c>)
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	4a04      	ldr	r2, [pc, #16]	@ (8001d50 <FLASH_Erase_Sector+0x8c>)
 8001d3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d42:	6113      	str	r3, [r2, #16]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	40023c00 	.word	0x40023c00

08001d54 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001d58:	4b20      	ldr	r3, [pc, #128]	@ (8001ddc <FLASH_FlushCaches+0x88>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d017      	beq.n	8001d94 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001d64:	4b1d      	ldr	r3, [pc, #116]	@ (8001ddc <FLASH_FlushCaches+0x88>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a1c      	ldr	r2, [pc, #112]	@ (8001ddc <FLASH_FlushCaches+0x88>)
 8001d6a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001d6e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001d70:	4b1a      	ldr	r3, [pc, #104]	@ (8001ddc <FLASH_FlushCaches+0x88>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a19      	ldr	r2, [pc, #100]	@ (8001ddc <FLASH_FlushCaches+0x88>)
 8001d76:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	4b17      	ldr	r3, [pc, #92]	@ (8001ddc <FLASH_FlushCaches+0x88>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a16      	ldr	r2, [pc, #88]	@ (8001ddc <FLASH_FlushCaches+0x88>)
 8001d82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001d86:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d88:	4b14      	ldr	r3, [pc, #80]	@ (8001ddc <FLASH_FlushCaches+0x88>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a13      	ldr	r2, [pc, #76]	@ (8001ddc <FLASH_FlushCaches+0x88>)
 8001d8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d92:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001d94:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <FLASH_FlushCaches+0x88>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d017      	beq.n	8001dd0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001da0:	4b0e      	ldr	r3, [pc, #56]	@ (8001ddc <FLASH_FlushCaches+0x88>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0d      	ldr	r2, [pc, #52]	@ (8001ddc <FLASH_FlushCaches+0x88>)
 8001da6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001daa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001dac:	4b0b      	ldr	r3, [pc, #44]	@ (8001ddc <FLASH_FlushCaches+0x88>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0a      	ldr	r2, [pc, #40]	@ (8001ddc <FLASH_FlushCaches+0x88>)
 8001db2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	4b08      	ldr	r3, [pc, #32]	@ (8001ddc <FLASH_FlushCaches+0x88>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a07      	ldr	r2, [pc, #28]	@ (8001ddc <FLASH_FlushCaches+0x88>)
 8001dbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001dc2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dc4:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <FLASH_FlushCaches+0x88>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a04      	ldr	r2, [pc, #16]	@ (8001ddc <FLASH_FlushCaches+0x88>)
 8001dca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dce:	6013      	str	r3, [r2, #0]
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40023c00 	.word	0x40023c00

08001de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	@ 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	e159      	b.n	80020b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	f040 8148 	bne.w	80020aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d005      	beq.n	8001e32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d130      	bne.n	8001e94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e68:	2201      	movs	r2, #1
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	f003 0201 	and.w	r2, r3, #1
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d017      	beq.n	8001ed0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d123      	bne.n	8001f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	08da      	lsrs	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3208      	adds	r2, #8
 8001ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	08da      	lsrs	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3208      	adds	r2, #8
 8001f1e:	69b9      	ldr	r1, [r7, #24]
 8001f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0203 	and.w	r2, r3, #3
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80a2 	beq.w	80020aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	4b57      	ldr	r3, [pc, #348]	@ (80020c8 <HAL_GPIO_Init+0x2e8>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6e:	4a56      	ldr	r2, [pc, #344]	@ (80020c8 <HAL_GPIO_Init+0x2e8>)
 8001f70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f76:	4b54      	ldr	r3, [pc, #336]	@ (80020c8 <HAL_GPIO_Init+0x2e8>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f82:	4a52      	ldr	r2, [pc, #328]	@ (80020cc <HAL_GPIO_Init+0x2ec>)
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	3302      	adds	r3, #2
 8001f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	220f      	movs	r2, #15
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a49      	ldr	r2, [pc, #292]	@ (80020d0 <HAL_GPIO_Init+0x2f0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d019      	beq.n	8001fe2 <HAL_GPIO_Init+0x202>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a48      	ldr	r2, [pc, #288]	@ (80020d4 <HAL_GPIO_Init+0x2f4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d013      	beq.n	8001fde <HAL_GPIO_Init+0x1fe>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a47      	ldr	r2, [pc, #284]	@ (80020d8 <HAL_GPIO_Init+0x2f8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00d      	beq.n	8001fda <HAL_GPIO_Init+0x1fa>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a46      	ldr	r2, [pc, #280]	@ (80020dc <HAL_GPIO_Init+0x2fc>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d007      	beq.n	8001fd6 <HAL_GPIO_Init+0x1f6>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a45      	ldr	r2, [pc, #276]	@ (80020e0 <HAL_GPIO_Init+0x300>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d101      	bne.n	8001fd2 <HAL_GPIO_Init+0x1f2>
 8001fce:	2304      	movs	r3, #4
 8001fd0:	e008      	b.n	8001fe4 <HAL_GPIO_Init+0x204>
 8001fd2:	2307      	movs	r3, #7
 8001fd4:	e006      	b.n	8001fe4 <HAL_GPIO_Init+0x204>
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e004      	b.n	8001fe4 <HAL_GPIO_Init+0x204>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e002      	b.n	8001fe4 <HAL_GPIO_Init+0x204>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_GPIO_Init+0x204>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	69fa      	ldr	r2, [r7, #28]
 8001fe6:	f002 0203 	and.w	r2, r2, #3
 8001fea:	0092      	lsls	r2, r2, #2
 8001fec:	4093      	lsls	r3, r2
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ff4:	4935      	ldr	r1, [pc, #212]	@ (80020cc <HAL_GPIO_Init+0x2ec>)
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	089b      	lsrs	r3, r3, #2
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002002:	4b38      	ldr	r3, [pc, #224]	@ (80020e4 <HAL_GPIO_Init+0x304>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002026:	4a2f      	ldr	r2, [pc, #188]	@ (80020e4 <HAL_GPIO_Init+0x304>)
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800202c:	4b2d      	ldr	r3, [pc, #180]	@ (80020e4 <HAL_GPIO_Init+0x304>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002050:	4a24      	ldr	r2, [pc, #144]	@ (80020e4 <HAL_GPIO_Init+0x304>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002056:	4b23      	ldr	r3, [pc, #140]	@ (80020e4 <HAL_GPIO_Init+0x304>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800207a:	4a1a      	ldr	r2, [pc, #104]	@ (80020e4 <HAL_GPIO_Init+0x304>)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002080:	4b18      	ldr	r3, [pc, #96]	@ (80020e4 <HAL_GPIO_Init+0x304>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020a4:	4a0f      	ldr	r2, [pc, #60]	@ (80020e4 <HAL_GPIO_Init+0x304>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3301      	adds	r3, #1
 80020ae:	61fb      	str	r3, [r7, #28]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	2b0f      	cmp	r3, #15
 80020b4:	f67f aea2 	bls.w	8001dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	3724      	adds	r7, #36	@ 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40013800 	.word	0x40013800
 80020d0:	40020000 	.word	0x40020000
 80020d4:	40020400 	.word	0x40020400
 80020d8:	40020800 	.word	0x40020800
 80020dc:	40020c00 	.word	0x40020c00
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40013c00 	.word	0x40013c00

080020e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	887b      	ldrh	r3, [r7, #2]
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
 8002104:	e001      	b.n	800210a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800210a:	7bfb      	ldrb	r3, [r7, #15]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	807b      	strh	r3, [r7, #2]
 8002124:	4613      	mov	r3, r2
 8002126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002128:	787b      	ldrb	r3, [r7, #1]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800212e:	887a      	ldrh	r2, [r7, #2]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002134:	e003      	b.n	800213e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002136:	887b      	ldrh	r3, [r7, #2]
 8002138:	041a      	lsls	r2, r3, #16
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	619a      	str	r2, [r3, #24]
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e267      	b.n	800262e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d075      	beq.n	8002256 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800216a:	4b88      	ldr	r3, [pc, #544]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b04      	cmp	r3, #4
 8002174:	d00c      	beq.n	8002190 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002176:	4b85      	ldr	r3, [pc, #532]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800217e:	2b08      	cmp	r3, #8
 8002180:	d112      	bne.n	80021a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002182:	4b82      	ldr	r3, [pc, #520]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800218a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800218e:	d10b      	bne.n	80021a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002190:	4b7e      	ldr	r3, [pc, #504]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d05b      	beq.n	8002254 <HAL_RCC_OscConfig+0x108>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d157      	bne.n	8002254 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e242      	b.n	800262e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021b0:	d106      	bne.n	80021c0 <HAL_RCC_OscConfig+0x74>
 80021b2:	4b76      	ldr	r3, [pc, #472]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a75      	ldr	r2, [pc, #468]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 80021b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	e01d      	b.n	80021fc <HAL_RCC_OscConfig+0xb0>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021c8:	d10c      	bne.n	80021e4 <HAL_RCC_OscConfig+0x98>
 80021ca:	4b70      	ldr	r3, [pc, #448]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a6f      	ldr	r2, [pc, #444]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 80021d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	4b6d      	ldr	r3, [pc, #436]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a6c      	ldr	r2, [pc, #432]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 80021dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	e00b      	b.n	80021fc <HAL_RCC_OscConfig+0xb0>
 80021e4:	4b69      	ldr	r3, [pc, #420]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a68      	ldr	r2, [pc, #416]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 80021ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	4b66      	ldr	r3, [pc, #408]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a65      	ldr	r2, [pc, #404]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 80021f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d013      	beq.n	800222c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7ff f9ac 	bl	8001560 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800220c:	f7ff f9a8 	bl	8001560 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	@ 0x64
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e207      	b.n	800262e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	4b5b      	ldr	r3, [pc, #364]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0xc0>
 800222a:	e014      	b.n	8002256 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7ff f998 	bl	8001560 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002234:	f7ff f994 	bl	8001560 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b64      	cmp	r3, #100	@ 0x64
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e1f3      	b.n	800262e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002246:	4b51      	ldr	r3, [pc, #324]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0xe8>
 8002252:	e000      	b.n	8002256 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d063      	beq.n	800232a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002262:	4b4a      	ldr	r3, [pc, #296]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00b      	beq.n	8002286 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800226e:	4b47      	ldr	r3, [pc, #284]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002276:	2b08      	cmp	r3, #8
 8002278:	d11c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800227a:	4b44      	ldr	r3, [pc, #272]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d116      	bne.n	80022b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002286:	4b41      	ldr	r3, [pc, #260]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <HAL_RCC_OscConfig+0x152>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d001      	beq.n	800229e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e1c7      	b.n	800262e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229e:	4b3b      	ldr	r3, [pc, #236]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4937      	ldr	r1, [pc, #220]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b2:	e03a      	b.n	800232a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d020      	beq.n	80022fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022bc:	4b34      	ldr	r3, [pc, #208]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 80022be:	2201      	movs	r2, #1
 80022c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c2:	f7ff f94d 	bl	8001560 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ca:	f7ff f949 	bl	8001560 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e1a8      	b.n	800262e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022dc:	4b2b      	ldr	r3, [pc, #172]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e8:	4b28      	ldr	r3, [pc, #160]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4925      	ldr	r1, [pc, #148]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	600b      	str	r3, [r1, #0]
 80022fc:	e015      	b.n	800232a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022fe:	4b24      	ldr	r3, [pc, #144]	@ (8002390 <HAL_RCC_OscConfig+0x244>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002304:	f7ff f92c 	bl	8001560 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230c:	f7ff f928 	bl	8001560 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e187      	b.n	800262e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231e:	4b1b      	ldr	r3, [pc, #108]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d036      	beq.n	80023a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d016      	beq.n	800236c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800233e:	4b15      	ldr	r3, [pc, #84]	@ (8002394 <HAL_RCC_OscConfig+0x248>)
 8002340:	2201      	movs	r2, #1
 8002342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002344:	f7ff f90c 	bl	8001560 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800234c:	f7ff f908 	bl	8001560 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e167      	b.n	800262e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235e:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <HAL_RCC_OscConfig+0x240>)
 8002360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0x200>
 800236a:	e01b      	b.n	80023a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800236c:	4b09      	ldr	r3, [pc, #36]	@ (8002394 <HAL_RCC_OscConfig+0x248>)
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002372:	f7ff f8f5 	bl	8001560 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002378:	e00e      	b.n	8002398 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800237a:	f7ff f8f1 	bl	8001560 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d907      	bls.n	8002398 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e150      	b.n	800262e <HAL_RCC_OscConfig+0x4e2>
 800238c:	40023800 	.word	0x40023800
 8002390:	42470000 	.word	0x42470000
 8002394:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002398:	4b88      	ldr	r3, [pc, #544]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 800239a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1ea      	bne.n	800237a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 8097 	beq.w	80024e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023b6:	4b81      	ldr	r3, [pc, #516]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10f      	bne.n	80023e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	4b7d      	ldr	r3, [pc, #500]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ca:	4a7c      	ldr	r2, [pc, #496]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 80023cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023d2:	4b7a      	ldr	r3, [pc, #488]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023de:	2301      	movs	r3, #1
 80023e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e2:	4b77      	ldr	r3, [pc, #476]	@ (80025c0 <HAL_RCC_OscConfig+0x474>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d118      	bne.n	8002420 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ee:	4b74      	ldr	r3, [pc, #464]	@ (80025c0 <HAL_RCC_OscConfig+0x474>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a73      	ldr	r2, [pc, #460]	@ (80025c0 <HAL_RCC_OscConfig+0x474>)
 80023f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023fa:	f7ff f8b1 	bl	8001560 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002402:	f7ff f8ad 	bl	8001560 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e10c      	b.n	800262e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002414:	4b6a      	ldr	r3, [pc, #424]	@ (80025c0 <HAL_RCC_OscConfig+0x474>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0f0      	beq.n	8002402 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d106      	bne.n	8002436 <HAL_RCC_OscConfig+0x2ea>
 8002428:	4b64      	ldr	r3, [pc, #400]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 800242a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800242c:	4a63      	ldr	r2, [pc, #396]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	6713      	str	r3, [r2, #112]	@ 0x70
 8002434:	e01c      	b.n	8002470 <HAL_RCC_OscConfig+0x324>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b05      	cmp	r3, #5
 800243c:	d10c      	bne.n	8002458 <HAL_RCC_OscConfig+0x30c>
 800243e:	4b5f      	ldr	r3, [pc, #380]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 8002440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002442:	4a5e      	ldr	r2, [pc, #376]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 8002444:	f043 0304 	orr.w	r3, r3, #4
 8002448:	6713      	str	r3, [r2, #112]	@ 0x70
 800244a:	4b5c      	ldr	r3, [pc, #368]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800244e:	4a5b      	ldr	r2, [pc, #364]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6713      	str	r3, [r2, #112]	@ 0x70
 8002456:	e00b      	b.n	8002470 <HAL_RCC_OscConfig+0x324>
 8002458:	4b58      	ldr	r3, [pc, #352]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 800245a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800245c:	4a57      	ldr	r2, [pc, #348]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 800245e:	f023 0301 	bic.w	r3, r3, #1
 8002462:	6713      	str	r3, [r2, #112]	@ 0x70
 8002464:	4b55      	ldr	r3, [pc, #340]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 8002466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002468:	4a54      	ldr	r2, [pc, #336]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 800246a:	f023 0304 	bic.w	r3, r3, #4
 800246e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d015      	beq.n	80024a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002478:	f7ff f872 	bl	8001560 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247e:	e00a      	b.n	8002496 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002480:	f7ff f86e 	bl	8001560 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e0cb      	b.n	800262e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002496:	4b49      	ldr	r3, [pc, #292]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 8002498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0ee      	beq.n	8002480 <HAL_RCC_OscConfig+0x334>
 80024a2:	e014      	b.n	80024ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a4:	f7ff f85c 	bl	8001560 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ac:	f7ff f858 	bl	8001560 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e0b5      	b.n	800262e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c2:	4b3e      	ldr	r3, [pc, #248]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 80024c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1ee      	bne.n	80024ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024ce:	7dfb      	ldrb	r3, [r7, #23]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d105      	bne.n	80024e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d4:	4b39      	ldr	r3, [pc, #228]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 80024d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d8:	4a38      	ldr	r2, [pc, #224]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 80024da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80a1 	beq.w	800262c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024ea:	4b34      	ldr	r3, [pc, #208]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d05c      	beq.n	80025b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d141      	bne.n	8002582 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fe:	4b31      	ldr	r3, [pc, #196]	@ (80025c4 <HAL_RCC_OscConfig+0x478>)
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7ff f82c 	bl	8001560 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250c:	f7ff f828 	bl	8001560 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e087      	b.n	800262e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251e:	4b27      	ldr	r3, [pc, #156]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69da      	ldr	r2, [r3, #28]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002538:	019b      	lsls	r3, r3, #6
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002540:	085b      	lsrs	r3, r3, #1
 8002542:	3b01      	subs	r3, #1
 8002544:	041b      	lsls	r3, r3, #16
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254c:	061b      	lsls	r3, r3, #24
 800254e:	491b      	ldr	r1, [pc, #108]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 8002550:	4313      	orrs	r3, r2
 8002552:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002554:	4b1b      	ldr	r3, [pc, #108]	@ (80025c4 <HAL_RCC_OscConfig+0x478>)
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7ff f801 	bl	8001560 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002562:	f7fe fffd 	bl	8001560 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e05c      	b.n	800262e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002574:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x416>
 8002580:	e054      	b.n	800262c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002582:	4b10      	ldr	r3, [pc, #64]	@ (80025c4 <HAL_RCC_OscConfig+0x478>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7fe ffea 	bl	8001560 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002590:	f7fe ffe6 	bl	8001560 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e045      	b.n	800262e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a2:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <HAL_RCC_OscConfig+0x470>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x444>
 80025ae:	e03d      	b.n	800262c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d107      	bne.n	80025c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e038      	b.n	800262e <HAL_RCC_OscConfig+0x4e2>
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40007000 	.word	0x40007000
 80025c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002638 <HAL_RCC_OscConfig+0x4ec>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d028      	beq.n	8002628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d121      	bne.n	8002628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d11a      	bne.n	8002628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025f8:	4013      	ands	r3, r2
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002600:	4293      	cmp	r3, r2
 8002602:	d111      	bne.n	8002628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260e:	085b      	lsrs	r3, r3, #1
 8002610:	3b01      	subs	r3, #1
 8002612:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002614:	429a      	cmp	r2, r3
 8002616:	d107      	bne.n	8002628 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002622:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800

0800263c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e0cc      	b.n	80027ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002650:	4b68      	ldr	r3, [pc, #416]	@ (80027f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d90c      	bls.n	8002678 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265e:	4b65      	ldr	r3, [pc, #404]	@ (80027f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002666:	4b63      	ldr	r3, [pc, #396]	@ (80027f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0b8      	b.n	80027ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d020      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002690:	4b59      	ldr	r3, [pc, #356]	@ (80027f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	4a58      	ldr	r2, [pc, #352]	@ (80027f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800269a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a8:	4b53      	ldr	r3, [pc, #332]	@ (80027f8 <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	4a52      	ldr	r2, [pc, #328]	@ (80027f8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b4:	4b50      	ldr	r3, [pc, #320]	@ (80027f8 <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	494d      	ldr	r1, [pc, #308]	@ (80027f8 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d044      	beq.n	800275c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026da:	4b47      	ldr	r3, [pc, #284]	@ (80027f8 <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d119      	bne.n	800271a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e07f      	b.n	80027ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d003      	beq.n	80026fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d107      	bne.n	800270a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fa:	4b3f      	ldr	r3, [pc, #252]	@ (80027f8 <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d109      	bne.n	800271a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e06f      	b.n	80027ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270a:	4b3b      	ldr	r3, [pc, #236]	@ (80027f8 <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e067      	b.n	80027ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800271a:	4b37      	ldr	r3, [pc, #220]	@ (80027f8 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f023 0203 	bic.w	r2, r3, #3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4934      	ldr	r1, [pc, #208]	@ (80027f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002728:	4313      	orrs	r3, r2
 800272a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800272c:	f7fe ff18 	bl	8001560 <HAL_GetTick>
 8002730:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002732:	e00a      	b.n	800274a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002734:	f7fe ff14 	bl	8001560 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e04f      	b.n	80027ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274a:	4b2b      	ldr	r3, [pc, #172]	@ (80027f8 <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 020c 	and.w	r2, r3, #12
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	429a      	cmp	r2, r3
 800275a:	d1eb      	bne.n	8002734 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800275c:	4b25      	ldr	r3, [pc, #148]	@ (80027f4 <HAL_RCC_ClockConfig+0x1b8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d20c      	bcs.n	8002784 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276a:	4b22      	ldr	r3, [pc, #136]	@ (80027f4 <HAL_RCC_ClockConfig+0x1b8>)
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b20      	ldr	r3, [pc, #128]	@ (80027f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e032      	b.n	80027ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002790:	4b19      	ldr	r3, [pc, #100]	@ (80027f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4916      	ldr	r1, [pc, #88]	@ (80027f8 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d009      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ae:	4b12      	ldr	r3, [pc, #72]	@ (80027f8 <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	490e      	ldr	r1, [pc, #56]	@ (80027f8 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027c2:	f000 f821 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80027c6:	4602      	mov	r2, r0
 80027c8:	4b0b      	ldr	r3, [pc, #44]	@ (80027f8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	490a      	ldr	r1, [pc, #40]	@ (80027fc <HAL_RCC_ClockConfig+0x1c0>)
 80027d4:	5ccb      	ldrb	r3, [r1, r3]
 80027d6:	fa22 f303 	lsr.w	r3, r2, r3
 80027da:	4a09      	ldr	r2, [pc, #36]	@ (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 80027dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80027de:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <HAL_RCC_ClockConfig+0x1c8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe fe78 	bl	80014d8 <HAL_InitTick>

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40023c00 	.word	0x40023c00
 80027f8:	40023800 	.word	0x40023800
 80027fc:	08004acc 	.word	0x08004acc
 8002800:	20000000 	.word	0x20000000
 8002804:	20000004 	.word	0x20000004

08002808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800280c:	b090      	sub	sp, #64	@ 0x40
 800280e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002820:	4b59      	ldr	r3, [pc, #356]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x180>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 030c 	and.w	r3, r3, #12
 8002828:	2b08      	cmp	r3, #8
 800282a:	d00d      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0x40>
 800282c:	2b08      	cmp	r3, #8
 800282e:	f200 80a1 	bhi.w	8002974 <HAL_RCC_GetSysClockFreq+0x16c>
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <HAL_RCC_GetSysClockFreq+0x34>
 8002836:	2b04      	cmp	r3, #4
 8002838:	d003      	beq.n	8002842 <HAL_RCC_GetSysClockFreq+0x3a>
 800283a:	e09b      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800283c:	4b53      	ldr	r3, [pc, #332]	@ (800298c <HAL_RCC_GetSysClockFreq+0x184>)
 800283e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002840:	e09b      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002842:	4b53      	ldr	r3, [pc, #332]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x188>)
 8002844:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002846:	e098      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002848:	4b4f      	ldr	r3, [pc, #316]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x180>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002850:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002852:	4b4d      	ldr	r3, [pc, #308]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x180>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d028      	beq.n	80028b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800285e:	4b4a      	ldr	r3, [pc, #296]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x180>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	099b      	lsrs	r3, r3, #6
 8002864:	2200      	movs	r2, #0
 8002866:	623b      	str	r3, [r7, #32]
 8002868:	627a      	str	r2, [r7, #36]	@ 0x24
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002870:	2100      	movs	r1, #0
 8002872:	4b47      	ldr	r3, [pc, #284]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x188>)
 8002874:	fb03 f201 	mul.w	r2, r3, r1
 8002878:	2300      	movs	r3, #0
 800287a:	fb00 f303 	mul.w	r3, r0, r3
 800287e:	4413      	add	r3, r2
 8002880:	4a43      	ldr	r2, [pc, #268]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x188>)
 8002882:	fba0 1202 	umull	r1, r2, r0, r2
 8002886:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002888:	460a      	mov	r2, r1
 800288a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800288c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800288e:	4413      	add	r3, r2
 8002890:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002894:	2200      	movs	r2, #0
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	61fa      	str	r2, [r7, #28]
 800289a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800289e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80028a2:	f7fd fced 	bl	8000280 <__aeabi_uldivmod>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4613      	mov	r3, r2
 80028ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028ae:	e053      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028b0:	4b35      	ldr	r3, [pc, #212]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x180>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	099b      	lsrs	r3, r3, #6
 80028b6:	2200      	movs	r2, #0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	617a      	str	r2, [r7, #20]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028c2:	f04f 0b00 	mov.w	fp, #0
 80028c6:	4652      	mov	r2, sl
 80028c8:	465b      	mov	r3, fp
 80028ca:	f04f 0000 	mov.w	r0, #0
 80028ce:	f04f 0100 	mov.w	r1, #0
 80028d2:	0159      	lsls	r1, r3, #5
 80028d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028d8:	0150      	lsls	r0, r2, #5
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	ebb2 080a 	subs.w	r8, r2, sl
 80028e2:	eb63 090b 	sbc.w	r9, r3, fp
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028fa:	ebb2 0408 	subs.w	r4, r2, r8
 80028fe:	eb63 0509 	sbc.w	r5, r3, r9
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	00eb      	lsls	r3, r5, #3
 800290c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002910:	00e2      	lsls	r2, r4, #3
 8002912:	4614      	mov	r4, r2
 8002914:	461d      	mov	r5, r3
 8002916:	eb14 030a 	adds.w	r3, r4, sl
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	eb45 030b 	adc.w	r3, r5, fp
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	f04f 0300 	mov.w	r3, #0
 800292a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800292e:	4629      	mov	r1, r5
 8002930:	028b      	lsls	r3, r1, #10
 8002932:	4621      	mov	r1, r4
 8002934:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002938:	4621      	mov	r1, r4
 800293a:	028a      	lsls	r2, r1, #10
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002942:	2200      	movs	r2, #0
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	60fa      	str	r2, [r7, #12]
 8002948:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800294c:	f7fd fc98 	bl	8000280 <__aeabi_uldivmod>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4613      	mov	r3, r2
 8002956:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002958:	4b0b      	ldr	r3, [pc, #44]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x180>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	0c1b      	lsrs	r3, r3, #16
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	3301      	adds	r3, #1
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002968:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800296a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002970:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002972:	e002      	b.n	800297a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002974:	4b05      	ldr	r3, [pc, #20]	@ (800298c <HAL_RCC_GetSysClockFreq+0x184>)
 8002976:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800297a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800297c:	4618      	mov	r0, r3
 800297e:	3740      	adds	r7, #64	@ 0x40
 8002980:	46bd      	mov	sp, r7
 8002982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002986:	bf00      	nop
 8002988:	40023800 	.word	0x40023800
 800298c:	00f42400 	.word	0x00f42400
 8002990:	017d7840 	.word	0x017d7840

08002994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002998:	4b03      	ldr	r3, [pc, #12]	@ (80029a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800299a:	681b      	ldr	r3, [r3, #0]
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	20000000 	.word	0x20000000

080029ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029b0:	f7ff fff0 	bl	8002994 <HAL_RCC_GetHCLKFreq>
 80029b4:	4602      	mov	r2, r0
 80029b6:	4b05      	ldr	r3, [pc, #20]	@ (80029cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	0a9b      	lsrs	r3, r3, #10
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	4903      	ldr	r1, [pc, #12]	@ (80029d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029c2:	5ccb      	ldrb	r3, [r1, r3]
 80029c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40023800 	.word	0x40023800
 80029d0:	08004adc 	.word	0x08004adc

080029d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029d8:	f7ff ffdc 	bl	8002994 <HAL_RCC_GetHCLKFreq>
 80029dc:	4602      	mov	r2, r0
 80029de:	4b05      	ldr	r3, [pc, #20]	@ (80029f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	0b5b      	lsrs	r3, r3, #13
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	4903      	ldr	r1, [pc, #12]	@ (80029f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ea:	5ccb      	ldrb	r3, [r1, r3]
 80029ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40023800 	.word	0x40023800
 80029f8:	08004adc 	.word	0x08004adc

080029fc <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002a02:	f7fe fdad 	bl	8001560 <HAL_GetTick>
 8002a06:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002a08:	4b5d      	ldr	r3, [pc, #372]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a5c      	ldr	r2, [pc, #368]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a16:	f7fe fda3 	bl	8001560 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e0a7      	b.n	8002b78 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002a28:	4b55      	ldr	r3, [pc, #340]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002a34:	4b52      	ldr	r3, [pc, #328]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a51      	ldr	r2, [pc, #324]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a3e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002a40:	f7fe fd8e 	bl	8001560 <HAL_GetTick>
 8002a44:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002a46:	4b4e      	ldr	r3, [pc, #312]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002a4c:	e00a      	b.n	8002a64 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a4e:	f7fe fd87 	bl	8001560 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e089      	b.n	8002b78 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002a64:	4b46      	ldr	r3, [pc, #280]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1ee      	bne.n	8002a4e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002a70:	f7fe fd76 	bl	8001560 <HAL_GetTick>
 8002a74:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002a76:	4b42      	ldr	r3, [pc, #264]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a41      	ldr	r2, [pc, #260]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002a7c:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 8002a80:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a84:	f7fe fd6c 	bl	8001560 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b64      	cmp	r3, #100	@ 0x64
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e070      	b.n	8002b78 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002a96:	4b3a      	ldr	r3, [pc, #232]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002aa2:	f7fe fd5d 	bl	8001560 <HAL_GetTick>
 8002aa6:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002aa8:	4b35      	ldr	r3, [pc, #212]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a34      	ldr	r2, [pc, #208]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002aae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ab2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab6:	f7fe fd53 	bl	8001560 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e057      	b.n	8002b78 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1f0      	bne.n	8002ab6 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002ad4:	f7fe fd44 	bl	8001560 <HAL_GetTick>
 8002ad8:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002ada:	4b29      	ldr	r3, [pc, #164]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a28      	ldr	r2, [pc, #160]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002ae0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002ae4:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ae8:	f7fe fd3a 	bl	8001560 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e03e      	b.n	8002b78 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002afa:	4b21      	ldr	r3, [pc, #132]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8002b06:	4b1e      	ldr	r3, [pc, #120]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002b08:	4a1e      	ldr	r2, [pc, #120]	@ (8002b84 <HAL_RCC_DeInit+0x188>)
 8002b0a:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002b88 <HAL_RCC_DeInit+0x18c>)
 8002b10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002b14:	4b1a      	ldr	r3, [pc, #104]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4a19      	ldr	r2, [pc, #100]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002b1a:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8002b1e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002b20:	4b17      	ldr	r3, [pc, #92]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4a16      	ldr	r2, [pc, #88]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002b26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002b2a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 8002b2c:	4b14      	ldr	r3, [pc, #80]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4a13      	ldr	r2, [pc, #76]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002b32:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8002b36:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002b38:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4a10      	ldr	r2, [pc, #64]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002b3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b42:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002b44:	4b0e      	ldr	r3, [pc, #56]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b48:	4a0d      	ldr	r2, [pc, #52]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002b4a:	f023 0301 	bic.w	r3, r3, #1
 8002b4e:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002b50:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002b52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b54:	4a0a      	ldr	r2, [pc, #40]	@ (8002b80 <HAL_RCC_DeInit+0x184>)
 8002b56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b5a:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b8c <HAL_RCC_DeInit+0x190>)
 8002b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8002b90 <HAL_RCC_DeInit+0x194>)
 8002b60:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b62:	4b0c      	ldr	r3, [pc, #48]	@ (8002b94 <HAL_RCC_DeInit+0x198>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fcb6 	bl	80014d8 <HAL_InitTick>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8002b76:	2300      	movs	r3, #0
  }
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40023800 	.word	0x40023800
 8002b84:	04003010 	.word	0x04003010
 8002b88:	20003000 	.word	0x20003000
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	00f42400 	.word	0x00f42400
 8002b94:	20000004 	.word	0x20000004

08002b98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e042      	b.n	8002c30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fe fa72 	bl	80010a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2224      	movs	r2, #36	@ 0x24
 8002bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 fa09 	bl	8002ff4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695a      	ldr	r2, [r3, #20]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08a      	sub	sp, #40	@ 0x28
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	4613      	mov	r3, r2
 8002c46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	d175      	bne.n	8002d44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <HAL_UART_Transmit+0x2c>
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e06e      	b.n	8002d46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2221      	movs	r2, #33	@ 0x21
 8002c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c76:	f7fe fc73 	bl	8001560 <HAL_GetTick>
 8002c7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	88fa      	ldrh	r2, [r7, #6]
 8002c80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	88fa      	ldrh	r2, [r7, #6]
 8002c86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c90:	d108      	bne.n	8002ca4 <HAL_UART_Transmit+0x6c>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d104      	bne.n	8002ca4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	e003      	b.n	8002cac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cac:	e02e      	b.n	8002d0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2180      	movs	r1, #128	@ 0x80
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f8df 	bl	8002e7c <UART_WaitOnFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e03a      	b.n	8002d46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10b      	bne.n	8002cee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ce4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	3302      	adds	r3, #2
 8002cea:	61bb      	str	r3, [r7, #24]
 8002cec:	e007      	b.n	8002cfe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	781a      	ldrb	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1cb      	bne.n	8002cae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2140      	movs	r1, #64	@ 0x40
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f8ab 	bl	8002e7c <UART_WaitOnFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e006      	b.n	8002d46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	e000      	b.n	8002d46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d44:	2302      	movs	r3, #2
  }
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3720      	adds	r7, #32
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b08a      	sub	sp, #40	@ 0x28
 8002d52:	af02      	add	r7, sp, #8
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	603b      	str	r3, [r7, #0]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	f040 8081 	bne.w	8002e72 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <HAL_UART_Receive+0x2e>
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e079      	b.n	8002e74 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2222      	movs	r2, #34	@ 0x22
 8002d8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d94:	f7fe fbe4 	bl	8001560 <HAL_GetTick>
 8002d98:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	88fa      	ldrh	r2, [r7, #6]
 8002d9e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	88fa      	ldrh	r2, [r7, #6]
 8002da4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dae:	d108      	bne.n	8002dc2 <HAL_UART_Receive+0x74>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d104      	bne.n	8002dc2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	61bb      	str	r3, [r7, #24]
 8002dc0:	e003      	b.n	8002dca <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002dca:	e047      	b.n	8002e5c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2120      	movs	r1, #32
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f850 	bl	8002e7c <UART_WaitOnFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e042      	b.n	8002e74 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10c      	bne.n	8002e0e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	3302      	adds	r3, #2
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	e01f      	b.n	8002e4e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e16:	d007      	beq.n	8002e28 <HAL_UART_Receive+0xda>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10a      	bne.n	8002e36 <HAL_UART_Receive+0xe8>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d106      	bne.n	8002e36 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	701a      	strb	r2, [r3, #0]
 8002e34:	e008      	b.n	8002e48 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1b2      	bne.n	8002dcc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	e000      	b.n	8002e74 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002e72:	2302      	movs	r3, #2
  }
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e8c:	e03b      	b.n	8002f06 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d037      	beq.n	8002f06 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e96:	f7fe fb63 	bl	8001560 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	6a3a      	ldr	r2, [r7, #32]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d302      	bcc.n	8002eac <UART_WaitOnFlagUntilTimeout+0x30>
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e03a      	b.n	8002f26 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d023      	beq.n	8002f06 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b80      	cmp	r3, #128	@ 0x80
 8002ec2:	d020      	beq.n	8002f06 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b40      	cmp	r3, #64	@ 0x40
 8002ec8:	d01d      	beq.n	8002f06 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d116      	bne.n	8002f06 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f81d 	bl	8002f2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2208      	movs	r2, #8
 8002ef8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e00f      	b.n	8002f26 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	bf0c      	ite	eq
 8002f16:	2301      	moveq	r3, #1
 8002f18:	2300      	movne	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d0b4      	beq.n	8002e8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b095      	sub	sp, #84	@ 0x54
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	330c      	adds	r3, #12
 8002f3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f40:	e853 3f00 	ldrex	r3, [r3]
 8002f44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	330c      	adds	r3, #12
 8002f54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f56:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f5e:	e841 2300 	strex	r3, r2, [r1]
 8002f62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1e5      	bne.n	8002f36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	3314      	adds	r3, #20
 8002f70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	e853 3f00 	ldrex	r3, [r3]
 8002f78:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3314      	adds	r3, #20
 8002f88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f92:	e841 2300 	strex	r3, r2, [r1]
 8002f96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1e5      	bne.n	8002f6a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d119      	bne.n	8002fda <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	330c      	adds	r3, #12
 8002fac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	e853 3f00 	ldrex	r3, [r3]
 8002fb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f023 0310 	bic.w	r3, r3, #16
 8002fbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	330c      	adds	r3, #12
 8002fc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fc6:	61ba      	str	r2, [r7, #24]
 8002fc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fca:	6979      	ldr	r1, [r7, #20]
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	e841 2300 	strex	r3, r2, [r1]
 8002fd2:	613b      	str	r3, [r7, #16]
   return(result);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1e5      	bne.n	8002fa6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002fe8:	bf00      	nop
 8002fea:	3754      	adds	r7, #84	@ 0x54
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff8:	b0c0      	sub	sp, #256	@ 0x100
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800300c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003010:	68d9      	ldr	r1, [r3, #12]
 8003012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	ea40 0301 	orr.w	r3, r0, r1
 800301c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800301e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	431a      	orrs	r2, r3
 800302c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	431a      	orrs	r2, r3
 8003034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800304c:	f021 010c 	bic.w	r1, r1, #12
 8003050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800305a:	430b      	orrs	r3, r1
 800305c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800305e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800306a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800306e:	6999      	ldr	r1, [r3, #24]
 8003070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	ea40 0301 	orr.w	r3, r0, r1
 800307a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800307c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	4b8f      	ldr	r3, [pc, #572]	@ (80032c0 <UART_SetConfig+0x2cc>)
 8003084:	429a      	cmp	r2, r3
 8003086:	d005      	beq.n	8003094 <UART_SetConfig+0xa0>
 8003088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	4b8d      	ldr	r3, [pc, #564]	@ (80032c4 <UART_SetConfig+0x2d0>)
 8003090:	429a      	cmp	r2, r3
 8003092:	d104      	bne.n	800309e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003094:	f7ff fc9e 	bl	80029d4 <HAL_RCC_GetPCLK2Freq>
 8003098:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800309c:	e003      	b.n	80030a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800309e:	f7ff fc85 	bl	80029ac <HAL_RCC_GetPCLK1Freq>
 80030a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030b0:	f040 810c 	bne.w	80032cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030b8:	2200      	movs	r2, #0
 80030ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80030be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80030c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80030c6:	4622      	mov	r2, r4
 80030c8:	462b      	mov	r3, r5
 80030ca:	1891      	adds	r1, r2, r2
 80030cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80030ce:	415b      	adcs	r3, r3
 80030d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030d6:	4621      	mov	r1, r4
 80030d8:	eb12 0801 	adds.w	r8, r2, r1
 80030dc:	4629      	mov	r1, r5
 80030de:	eb43 0901 	adc.w	r9, r3, r1
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030f6:	4690      	mov	r8, r2
 80030f8:	4699      	mov	r9, r3
 80030fa:	4623      	mov	r3, r4
 80030fc:	eb18 0303 	adds.w	r3, r8, r3
 8003100:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003104:	462b      	mov	r3, r5
 8003106:	eb49 0303 	adc.w	r3, r9, r3
 800310a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800310e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800311a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800311e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003122:	460b      	mov	r3, r1
 8003124:	18db      	adds	r3, r3, r3
 8003126:	653b      	str	r3, [r7, #80]	@ 0x50
 8003128:	4613      	mov	r3, r2
 800312a:	eb42 0303 	adc.w	r3, r2, r3
 800312e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003130:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003134:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003138:	f7fd f8a2 	bl	8000280 <__aeabi_uldivmod>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4b61      	ldr	r3, [pc, #388]	@ (80032c8 <UART_SetConfig+0x2d4>)
 8003142:	fba3 2302 	umull	r2, r3, r3, r2
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	011c      	lsls	r4, r3, #4
 800314a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800314e:	2200      	movs	r2, #0
 8003150:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003154:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003158:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800315c:	4642      	mov	r2, r8
 800315e:	464b      	mov	r3, r9
 8003160:	1891      	adds	r1, r2, r2
 8003162:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003164:	415b      	adcs	r3, r3
 8003166:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003168:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800316c:	4641      	mov	r1, r8
 800316e:	eb12 0a01 	adds.w	sl, r2, r1
 8003172:	4649      	mov	r1, r9
 8003174:	eb43 0b01 	adc.w	fp, r3, r1
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003184:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003188:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800318c:	4692      	mov	sl, r2
 800318e:	469b      	mov	fp, r3
 8003190:	4643      	mov	r3, r8
 8003192:	eb1a 0303 	adds.w	r3, sl, r3
 8003196:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800319a:	464b      	mov	r3, r9
 800319c:	eb4b 0303 	adc.w	r3, fp, r3
 80031a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80031b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80031b8:	460b      	mov	r3, r1
 80031ba:	18db      	adds	r3, r3, r3
 80031bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80031be:	4613      	mov	r3, r2
 80031c0:	eb42 0303 	adc.w	r3, r2, r3
 80031c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80031c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80031ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80031ce:	f7fd f857 	bl	8000280 <__aeabi_uldivmod>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4611      	mov	r1, r2
 80031d8:	4b3b      	ldr	r3, [pc, #236]	@ (80032c8 <UART_SetConfig+0x2d4>)
 80031da:	fba3 2301 	umull	r2, r3, r3, r1
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	2264      	movs	r2, #100	@ 0x64
 80031e2:	fb02 f303 	mul.w	r3, r2, r3
 80031e6:	1acb      	subs	r3, r1, r3
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80031ee:	4b36      	ldr	r3, [pc, #216]	@ (80032c8 <UART_SetConfig+0x2d4>)
 80031f0:	fba3 2302 	umull	r2, r3, r3, r2
 80031f4:	095b      	lsrs	r3, r3, #5
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80031fc:	441c      	add	r4, r3
 80031fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003202:	2200      	movs	r2, #0
 8003204:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003208:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800320c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003210:	4642      	mov	r2, r8
 8003212:	464b      	mov	r3, r9
 8003214:	1891      	adds	r1, r2, r2
 8003216:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003218:	415b      	adcs	r3, r3
 800321a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800321c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003220:	4641      	mov	r1, r8
 8003222:	1851      	adds	r1, r2, r1
 8003224:	6339      	str	r1, [r7, #48]	@ 0x30
 8003226:	4649      	mov	r1, r9
 8003228:	414b      	adcs	r3, r1
 800322a:	637b      	str	r3, [r7, #52]	@ 0x34
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003238:	4659      	mov	r1, fp
 800323a:	00cb      	lsls	r3, r1, #3
 800323c:	4651      	mov	r1, sl
 800323e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003242:	4651      	mov	r1, sl
 8003244:	00ca      	lsls	r2, r1, #3
 8003246:	4610      	mov	r0, r2
 8003248:	4619      	mov	r1, r3
 800324a:	4603      	mov	r3, r0
 800324c:	4642      	mov	r2, r8
 800324e:	189b      	adds	r3, r3, r2
 8003250:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003254:	464b      	mov	r3, r9
 8003256:	460a      	mov	r2, r1
 8003258:	eb42 0303 	adc.w	r3, r2, r3
 800325c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800326c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003270:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003274:	460b      	mov	r3, r1
 8003276:	18db      	adds	r3, r3, r3
 8003278:	62bb      	str	r3, [r7, #40]	@ 0x28
 800327a:	4613      	mov	r3, r2
 800327c:	eb42 0303 	adc.w	r3, r2, r3
 8003280:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003282:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003286:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800328a:	f7fc fff9 	bl	8000280 <__aeabi_uldivmod>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4b0d      	ldr	r3, [pc, #52]	@ (80032c8 <UART_SetConfig+0x2d4>)
 8003294:	fba3 1302 	umull	r1, r3, r3, r2
 8003298:	095b      	lsrs	r3, r3, #5
 800329a:	2164      	movs	r1, #100	@ 0x64
 800329c:	fb01 f303 	mul.w	r3, r1, r3
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	3332      	adds	r3, #50	@ 0x32
 80032a6:	4a08      	ldr	r2, [pc, #32]	@ (80032c8 <UART_SetConfig+0x2d4>)
 80032a8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	f003 0207 	and.w	r2, r3, #7
 80032b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4422      	add	r2, r4
 80032ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032bc:	e106      	b.n	80034cc <UART_SetConfig+0x4d8>
 80032be:	bf00      	nop
 80032c0:	40011000 	.word	0x40011000
 80032c4:	40011400 	.word	0x40011400
 80032c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032d0:	2200      	movs	r2, #0
 80032d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80032d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80032da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80032de:	4642      	mov	r2, r8
 80032e0:	464b      	mov	r3, r9
 80032e2:	1891      	adds	r1, r2, r2
 80032e4:	6239      	str	r1, [r7, #32]
 80032e6:	415b      	adcs	r3, r3
 80032e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032ee:	4641      	mov	r1, r8
 80032f0:	1854      	adds	r4, r2, r1
 80032f2:	4649      	mov	r1, r9
 80032f4:	eb43 0501 	adc.w	r5, r3, r1
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	00eb      	lsls	r3, r5, #3
 8003302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003306:	00e2      	lsls	r2, r4, #3
 8003308:	4614      	mov	r4, r2
 800330a:	461d      	mov	r5, r3
 800330c:	4643      	mov	r3, r8
 800330e:	18e3      	adds	r3, r4, r3
 8003310:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003314:	464b      	mov	r3, r9
 8003316:	eb45 0303 	adc.w	r3, r5, r3
 800331a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800331e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800332a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800333a:	4629      	mov	r1, r5
 800333c:	008b      	lsls	r3, r1, #2
 800333e:	4621      	mov	r1, r4
 8003340:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003344:	4621      	mov	r1, r4
 8003346:	008a      	lsls	r2, r1, #2
 8003348:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800334c:	f7fc ff98 	bl	8000280 <__aeabi_uldivmod>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4b60      	ldr	r3, [pc, #384]	@ (80034d8 <UART_SetConfig+0x4e4>)
 8003356:	fba3 2302 	umull	r2, r3, r3, r2
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	011c      	lsls	r4, r3, #4
 800335e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003362:	2200      	movs	r2, #0
 8003364:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003368:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800336c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003370:	4642      	mov	r2, r8
 8003372:	464b      	mov	r3, r9
 8003374:	1891      	adds	r1, r2, r2
 8003376:	61b9      	str	r1, [r7, #24]
 8003378:	415b      	adcs	r3, r3
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003380:	4641      	mov	r1, r8
 8003382:	1851      	adds	r1, r2, r1
 8003384:	6139      	str	r1, [r7, #16]
 8003386:	4649      	mov	r1, r9
 8003388:	414b      	adcs	r3, r1
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003398:	4659      	mov	r1, fp
 800339a:	00cb      	lsls	r3, r1, #3
 800339c:	4651      	mov	r1, sl
 800339e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033a2:	4651      	mov	r1, sl
 80033a4:	00ca      	lsls	r2, r1, #3
 80033a6:	4610      	mov	r0, r2
 80033a8:	4619      	mov	r1, r3
 80033aa:	4603      	mov	r3, r0
 80033ac:	4642      	mov	r2, r8
 80033ae:	189b      	adds	r3, r3, r2
 80033b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033b4:	464b      	mov	r3, r9
 80033b6:	460a      	mov	r2, r1
 80033b8:	eb42 0303 	adc.w	r3, r2, r3
 80033bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80033d8:	4649      	mov	r1, r9
 80033da:	008b      	lsls	r3, r1, #2
 80033dc:	4641      	mov	r1, r8
 80033de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033e2:	4641      	mov	r1, r8
 80033e4:	008a      	lsls	r2, r1, #2
 80033e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80033ea:	f7fc ff49 	bl	8000280 <__aeabi_uldivmod>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4611      	mov	r1, r2
 80033f4:	4b38      	ldr	r3, [pc, #224]	@ (80034d8 <UART_SetConfig+0x4e4>)
 80033f6:	fba3 2301 	umull	r2, r3, r3, r1
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	2264      	movs	r2, #100	@ 0x64
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	1acb      	subs	r3, r1, r3
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	3332      	adds	r3, #50	@ 0x32
 8003408:	4a33      	ldr	r2, [pc, #204]	@ (80034d8 <UART_SetConfig+0x4e4>)
 800340a:	fba2 2303 	umull	r2, r3, r2, r3
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003414:	441c      	add	r4, r3
 8003416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800341a:	2200      	movs	r2, #0
 800341c:	673b      	str	r3, [r7, #112]	@ 0x70
 800341e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003420:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003424:	4642      	mov	r2, r8
 8003426:	464b      	mov	r3, r9
 8003428:	1891      	adds	r1, r2, r2
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	415b      	adcs	r3, r3
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003434:	4641      	mov	r1, r8
 8003436:	1851      	adds	r1, r2, r1
 8003438:	6039      	str	r1, [r7, #0]
 800343a:	4649      	mov	r1, r9
 800343c:	414b      	adcs	r3, r1
 800343e:	607b      	str	r3, [r7, #4]
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800344c:	4659      	mov	r1, fp
 800344e:	00cb      	lsls	r3, r1, #3
 8003450:	4651      	mov	r1, sl
 8003452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003456:	4651      	mov	r1, sl
 8003458:	00ca      	lsls	r2, r1, #3
 800345a:	4610      	mov	r0, r2
 800345c:	4619      	mov	r1, r3
 800345e:	4603      	mov	r3, r0
 8003460:	4642      	mov	r2, r8
 8003462:	189b      	adds	r3, r3, r2
 8003464:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003466:	464b      	mov	r3, r9
 8003468:	460a      	mov	r2, r1
 800346a:	eb42 0303 	adc.w	r3, r2, r3
 800346e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	663b      	str	r3, [r7, #96]	@ 0x60
 800347a:	667a      	str	r2, [r7, #100]	@ 0x64
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003488:	4649      	mov	r1, r9
 800348a:	008b      	lsls	r3, r1, #2
 800348c:	4641      	mov	r1, r8
 800348e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003492:	4641      	mov	r1, r8
 8003494:	008a      	lsls	r2, r1, #2
 8003496:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800349a:	f7fc fef1 	bl	8000280 <__aeabi_uldivmod>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4b0d      	ldr	r3, [pc, #52]	@ (80034d8 <UART_SetConfig+0x4e4>)
 80034a4:	fba3 1302 	umull	r1, r3, r3, r2
 80034a8:	095b      	lsrs	r3, r3, #5
 80034aa:	2164      	movs	r1, #100	@ 0x64
 80034ac:	fb01 f303 	mul.w	r3, r1, r3
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	3332      	adds	r3, #50	@ 0x32
 80034b6:	4a08      	ldr	r2, [pc, #32]	@ (80034d8 <UART_SetConfig+0x4e4>)
 80034b8:	fba2 2303 	umull	r2, r3, r2, r3
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	f003 020f 	and.w	r2, r3, #15
 80034c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4422      	add	r2, r4
 80034ca:	609a      	str	r2, [r3, #8]
}
 80034cc:	bf00      	nop
 80034ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80034d2:	46bd      	mov	sp, r7
 80034d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034d8:	51eb851f 	.word	0x51eb851f

080034dc <std>:
 80034dc:	2300      	movs	r3, #0
 80034de:	b510      	push	{r4, lr}
 80034e0:	4604      	mov	r4, r0
 80034e2:	e9c0 3300 	strd	r3, r3, [r0]
 80034e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034ea:	6083      	str	r3, [r0, #8]
 80034ec:	8181      	strh	r1, [r0, #12]
 80034ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80034f0:	81c2      	strh	r2, [r0, #14]
 80034f2:	6183      	str	r3, [r0, #24]
 80034f4:	4619      	mov	r1, r3
 80034f6:	2208      	movs	r2, #8
 80034f8:	305c      	adds	r0, #92	@ 0x5c
 80034fa:	f000 fa2f 	bl	800395c <memset>
 80034fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003534 <std+0x58>)
 8003500:	6263      	str	r3, [r4, #36]	@ 0x24
 8003502:	4b0d      	ldr	r3, [pc, #52]	@ (8003538 <std+0x5c>)
 8003504:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003506:	4b0d      	ldr	r3, [pc, #52]	@ (800353c <std+0x60>)
 8003508:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800350a:	4b0d      	ldr	r3, [pc, #52]	@ (8003540 <std+0x64>)
 800350c:	6323      	str	r3, [r4, #48]	@ 0x30
 800350e:	4b0d      	ldr	r3, [pc, #52]	@ (8003544 <std+0x68>)
 8003510:	6224      	str	r4, [r4, #32]
 8003512:	429c      	cmp	r4, r3
 8003514:	d006      	beq.n	8003524 <std+0x48>
 8003516:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800351a:	4294      	cmp	r4, r2
 800351c:	d002      	beq.n	8003524 <std+0x48>
 800351e:	33d0      	adds	r3, #208	@ 0xd0
 8003520:	429c      	cmp	r4, r3
 8003522:	d105      	bne.n	8003530 <std+0x54>
 8003524:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800352c:	f000 ba8e 	b.w	8003a4c <__retarget_lock_init_recursive>
 8003530:	bd10      	pop	{r4, pc}
 8003532:	bf00      	nop
 8003534:	080037ad 	.word	0x080037ad
 8003538:	080037cf 	.word	0x080037cf
 800353c:	08003807 	.word	0x08003807
 8003540:	0800382b 	.word	0x0800382b
 8003544:	20000258 	.word	0x20000258

08003548 <stdio_exit_handler>:
 8003548:	4a02      	ldr	r2, [pc, #8]	@ (8003554 <stdio_exit_handler+0xc>)
 800354a:	4903      	ldr	r1, [pc, #12]	@ (8003558 <stdio_exit_handler+0x10>)
 800354c:	4803      	ldr	r0, [pc, #12]	@ (800355c <stdio_exit_handler+0x14>)
 800354e:	f000 b869 	b.w	8003624 <_fwalk_sglue>
 8003552:	bf00      	nop
 8003554:	2000000c 	.word	0x2000000c
 8003558:	08004599 	.word	0x08004599
 800355c:	2000001c 	.word	0x2000001c

08003560 <cleanup_stdio>:
 8003560:	6841      	ldr	r1, [r0, #4]
 8003562:	4b0c      	ldr	r3, [pc, #48]	@ (8003594 <cleanup_stdio+0x34>)
 8003564:	4299      	cmp	r1, r3
 8003566:	b510      	push	{r4, lr}
 8003568:	4604      	mov	r4, r0
 800356a:	d001      	beq.n	8003570 <cleanup_stdio+0x10>
 800356c:	f001 f814 	bl	8004598 <_fflush_r>
 8003570:	68a1      	ldr	r1, [r4, #8]
 8003572:	4b09      	ldr	r3, [pc, #36]	@ (8003598 <cleanup_stdio+0x38>)
 8003574:	4299      	cmp	r1, r3
 8003576:	d002      	beq.n	800357e <cleanup_stdio+0x1e>
 8003578:	4620      	mov	r0, r4
 800357a:	f001 f80d 	bl	8004598 <_fflush_r>
 800357e:	68e1      	ldr	r1, [r4, #12]
 8003580:	4b06      	ldr	r3, [pc, #24]	@ (800359c <cleanup_stdio+0x3c>)
 8003582:	4299      	cmp	r1, r3
 8003584:	d004      	beq.n	8003590 <cleanup_stdio+0x30>
 8003586:	4620      	mov	r0, r4
 8003588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800358c:	f001 b804 	b.w	8004598 <_fflush_r>
 8003590:	bd10      	pop	{r4, pc}
 8003592:	bf00      	nop
 8003594:	20000258 	.word	0x20000258
 8003598:	200002c0 	.word	0x200002c0
 800359c:	20000328 	.word	0x20000328

080035a0 <global_stdio_init.part.0>:
 80035a0:	b510      	push	{r4, lr}
 80035a2:	4b0b      	ldr	r3, [pc, #44]	@ (80035d0 <global_stdio_init.part.0+0x30>)
 80035a4:	4c0b      	ldr	r4, [pc, #44]	@ (80035d4 <global_stdio_init.part.0+0x34>)
 80035a6:	4a0c      	ldr	r2, [pc, #48]	@ (80035d8 <global_stdio_init.part.0+0x38>)
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	4620      	mov	r0, r4
 80035ac:	2200      	movs	r2, #0
 80035ae:	2104      	movs	r1, #4
 80035b0:	f7ff ff94 	bl	80034dc <std>
 80035b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80035b8:	2201      	movs	r2, #1
 80035ba:	2109      	movs	r1, #9
 80035bc:	f7ff ff8e 	bl	80034dc <std>
 80035c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80035c4:	2202      	movs	r2, #2
 80035c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035ca:	2112      	movs	r1, #18
 80035cc:	f7ff bf86 	b.w	80034dc <std>
 80035d0:	20000390 	.word	0x20000390
 80035d4:	20000258 	.word	0x20000258
 80035d8:	08003549 	.word	0x08003549

080035dc <__sfp_lock_acquire>:
 80035dc:	4801      	ldr	r0, [pc, #4]	@ (80035e4 <__sfp_lock_acquire+0x8>)
 80035de:	f000 ba36 	b.w	8003a4e <__retarget_lock_acquire_recursive>
 80035e2:	bf00      	nop
 80035e4:	20000399 	.word	0x20000399

080035e8 <__sfp_lock_release>:
 80035e8:	4801      	ldr	r0, [pc, #4]	@ (80035f0 <__sfp_lock_release+0x8>)
 80035ea:	f000 ba31 	b.w	8003a50 <__retarget_lock_release_recursive>
 80035ee:	bf00      	nop
 80035f0:	20000399 	.word	0x20000399

080035f4 <__sinit>:
 80035f4:	b510      	push	{r4, lr}
 80035f6:	4604      	mov	r4, r0
 80035f8:	f7ff fff0 	bl	80035dc <__sfp_lock_acquire>
 80035fc:	6a23      	ldr	r3, [r4, #32]
 80035fe:	b11b      	cbz	r3, 8003608 <__sinit+0x14>
 8003600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003604:	f7ff bff0 	b.w	80035e8 <__sfp_lock_release>
 8003608:	4b04      	ldr	r3, [pc, #16]	@ (800361c <__sinit+0x28>)
 800360a:	6223      	str	r3, [r4, #32]
 800360c:	4b04      	ldr	r3, [pc, #16]	@ (8003620 <__sinit+0x2c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f5      	bne.n	8003600 <__sinit+0xc>
 8003614:	f7ff ffc4 	bl	80035a0 <global_stdio_init.part.0>
 8003618:	e7f2      	b.n	8003600 <__sinit+0xc>
 800361a:	bf00      	nop
 800361c:	08003561 	.word	0x08003561
 8003620:	20000390 	.word	0x20000390

08003624 <_fwalk_sglue>:
 8003624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003628:	4607      	mov	r7, r0
 800362a:	4688      	mov	r8, r1
 800362c:	4614      	mov	r4, r2
 800362e:	2600      	movs	r6, #0
 8003630:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003634:	f1b9 0901 	subs.w	r9, r9, #1
 8003638:	d505      	bpl.n	8003646 <_fwalk_sglue+0x22>
 800363a:	6824      	ldr	r4, [r4, #0]
 800363c:	2c00      	cmp	r4, #0
 800363e:	d1f7      	bne.n	8003630 <_fwalk_sglue+0xc>
 8003640:	4630      	mov	r0, r6
 8003642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003646:	89ab      	ldrh	r3, [r5, #12]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d907      	bls.n	800365c <_fwalk_sglue+0x38>
 800364c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003650:	3301      	adds	r3, #1
 8003652:	d003      	beq.n	800365c <_fwalk_sglue+0x38>
 8003654:	4629      	mov	r1, r5
 8003656:	4638      	mov	r0, r7
 8003658:	47c0      	blx	r8
 800365a:	4306      	orrs	r6, r0
 800365c:	3568      	adds	r5, #104	@ 0x68
 800365e:	e7e9      	b.n	8003634 <_fwalk_sglue+0x10>

08003660 <iprintf>:
 8003660:	b40f      	push	{r0, r1, r2, r3}
 8003662:	b507      	push	{r0, r1, r2, lr}
 8003664:	4906      	ldr	r1, [pc, #24]	@ (8003680 <iprintf+0x20>)
 8003666:	ab04      	add	r3, sp, #16
 8003668:	6808      	ldr	r0, [r1, #0]
 800366a:	f853 2b04 	ldr.w	r2, [r3], #4
 800366e:	6881      	ldr	r1, [r0, #8]
 8003670:	9301      	str	r3, [sp, #4]
 8003672:	f000 fc69 	bl	8003f48 <_vfiprintf_r>
 8003676:	b003      	add	sp, #12
 8003678:	f85d eb04 	ldr.w	lr, [sp], #4
 800367c:	b004      	add	sp, #16
 800367e:	4770      	bx	lr
 8003680:	20000018 	.word	0x20000018

08003684 <_puts_r>:
 8003684:	6a03      	ldr	r3, [r0, #32]
 8003686:	b570      	push	{r4, r5, r6, lr}
 8003688:	6884      	ldr	r4, [r0, #8]
 800368a:	4605      	mov	r5, r0
 800368c:	460e      	mov	r6, r1
 800368e:	b90b      	cbnz	r3, 8003694 <_puts_r+0x10>
 8003690:	f7ff ffb0 	bl	80035f4 <__sinit>
 8003694:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003696:	07db      	lsls	r3, r3, #31
 8003698:	d405      	bmi.n	80036a6 <_puts_r+0x22>
 800369a:	89a3      	ldrh	r3, [r4, #12]
 800369c:	0598      	lsls	r0, r3, #22
 800369e:	d402      	bmi.n	80036a6 <_puts_r+0x22>
 80036a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036a2:	f000 f9d4 	bl	8003a4e <__retarget_lock_acquire_recursive>
 80036a6:	89a3      	ldrh	r3, [r4, #12]
 80036a8:	0719      	lsls	r1, r3, #28
 80036aa:	d502      	bpl.n	80036b2 <_puts_r+0x2e>
 80036ac:	6923      	ldr	r3, [r4, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d135      	bne.n	800371e <_puts_r+0x9a>
 80036b2:	4621      	mov	r1, r4
 80036b4:	4628      	mov	r0, r5
 80036b6:	f000 f8fb 	bl	80038b0 <__swsetup_r>
 80036ba:	b380      	cbz	r0, 800371e <_puts_r+0x9a>
 80036bc:	f04f 35ff 	mov.w	r5, #4294967295
 80036c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036c2:	07da      	lsls	r2, r3, #31
 80036c4:	d405      	bmi.n	80036d2 <_puts_r+0x4e>
 80036c6:	89a3      	ldrh	r3, [r4, #12]
 80036c8:	059b      	lsls	r3, r3, #22
 80036ca:	d402      	bmi.n	80036d2 <_puts_r+0x4e>
 80036cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036ce:	f000 f9bf 	bl	8003a50 <__retarget_lock_release_recursive>
 80036d2:	4628      	mov	r0, r5
 80036d4:	bd70      	pop	{r4, r5, r6, pc}
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	da04      	bge.n	80036e4 <_puts_r+0x60>
 80036da:	69a2      	ldr	r2, [r4, #24]
 80036dc:	429a      	cmp	r2, r3
 80036de:	dc17      	bgt.n	8003710 <_puts_r+0x8c>
 80036e0:	290a      	cmp	r1, #10
 80036e2:	d015      	beq.n	8003710 <_puts_r+0x8c>
 80036e4:	6823      	ldr	r3, [r4, #0]
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	6022      	str	r2, [r4, #0]
 80036ea:	7019      	strb	r1, [r3, #0]
 80036ec:	68a3      	ldr	r3, [r4, #8]
 80036ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80036f2:	3b01      	subs	r3, #1
 80036f4:	60a3      	str	r3, [r4, #8]
 80036f6:	2900      	cmp	r1, #0
 80036f8:	d1ed      	bne.n	80036d6 <_puts_r+0x52>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	da11      	bge.n	8003722 <_puts_r+0x9e>
 80036fe:	4622      	mov	r2, r4
 8003700:	210a      	movs	r1, #10
 8003702:	4628      	mov	r0, r5
 8003704:	f000 f895 	bl	8003832 <__swbuf_r>
 8003708:	3001      	adds	r0, #1
 800370a:	d0d7      	beq.n	80036bc <_puts_r+0x38>
 800370c:	250a      	movs	r5, #10
 800370e:	e7d7      	b.n	80036c0 <_puts_r+0x3c>
 8003710:	4622      	mov	r2, r4
 8003712:	4628      	mov	r0, r5
 8003714:	f000 f88d 	bl	8003832 <__swbuf_r>
 8003718:	3001      	adds	r0, #1
 800371a:	d1e7      	bne.n	80036ec <_puts_r+0x68>
 800371c:	e7ce      	b.n	80036bc <_puts_r+0x38>
 800371e:	3e01      	subs	r6, #1
 8003720:	e7e4      	b.n	80036ec <_puts_r+0x68>
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	6022      	str	r2, [r4, #0]
 8003728:	220a      	movs	r2, #10
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	e7ee      	b.n	800370c <_puts_r+0x88>
	...

08003730 <puts>:
 8003730:	4b02      	ldr	r3, [pc, #8]	@ (800373c <puts+0xc>)
 8003732:	4601      	mov	r1, r0
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	f7ff bfa5 	b.w	8003684 <_puts_r>
 800373a:	bf00      	nop
 800373c:	20000018 	.word	0x20000018

08003740 <sniprintf>:
 8003740:	b40c      	push	{r2, r3}
 8003742:	b530      	push	{r4, r5, lr}
 8003744:	4b18      	ldr	r3, [pc, #96]	@ (80037a8 <sniprintf+0x68>)
 8003746:	1e0c      	subs	r4, r1, #0
 8003748:	681d      	ldr	r5, [r3, #0]
 800374a:	b09d      	sub	sp, #116	@ 0x74
 800374c:	da08      	bge.n	8003760 <sniprintf+0x20>
 800374e:	238b      	movs	r3, #139	@ 0x8b
 8003750:	602b      	str	r3, [r5, #0]
 8003752:	f04f 30ff 	mov.w	r0, #4294967295
 8003756:	b01d      	add	sp, #116	@ 0x74
 8003758:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800375c:	b002      	add	sp, #8
 800375e:	4770      	bx	lr
 8003760:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003764:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800376e:	bf14      	ite	ne
 8003770:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003774:	4623      	moveq	r3, r4
 8003776:	9304      	str	r3, [sp, #16]
 8003778:	9307      	str	r3, [sp, #28]
 800377a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800377e:	9002      	str	r0, [sp, #8]
 8003780:	9006      	str	r0, [sp, #24]
 8003782:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003786:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003788:	ab21      	add	r3, sp, #132	@ 0x84
 800378a:	a902      	add	r1, sp, #8
 800378c:	4628      	mov	r0, r5
 800378e:	9301      	str	r3, [sp, #4]
 8003790:	f000 fab4 	bl	8003cfc <_svfiprintf_r>
 8003794:	1c43      	adds	r3, r0, #1
 8003796:	bfbc      	itt	lt
 8003798:	238b      	movlt	r3, #139	@ 0x8b
 800379a:	602b      	strlt	r3, [r5, #0]
 800379c:	2c00      	cmp	r4, #0
 800379e:	d0da      	beq.n	8003756 <sniprintf+0x16>
 80037a0:	9b02      	ldr	r3, [sp, #8]
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]
 80037a6:	e7d6      	b.n	8003756 <sniprintf+0x16>
 80037a8:	20000018 	.word	0x20000018

080037ac <__sread>:
 80037ac:	b510      	push	{r4, lr}
 80037ae:	460c      	mov	r4, r1
 80037b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037b4:	f000 f8fc 	bl	80039b0 <_read_r>
 80037b8:	2800      	cmp	r0, #0
 80037ba:	bfab      	itete	ge
 80037bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80037be:	89a3      	ldrhlt	r3, [r4, #12]
 80037c0:	181b      	addge	r3, r3, r0
 80037c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80037c6:	bfac      	ite	ge
 80037c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80037ca:	81a3      	strhlt	r3, [r4, #12]
 80037cc:	bd10      	pop	{r4, pc}

080037ce <__swrite>:
 80037ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037d2:	461f      	mov	r7, r3
 80037d4:	898b      	ldrh	r3, [r1, #12]
 80037d6:	05db      	lsls	r3, r3, #23
 80037d8:	4605      	mov	r5, r0
 80037da:	460c      	mov	r4, r1
 80037dc:	4616      	mov	r6, r2
 80037de:	d505      	bpl.n	80037ec <__swrite+0x1e>
 80037e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037e4:	2302      	movs	r3, #2
 80037e6:	2200      	movs	r2, #0
 80037e8:	f000 f8d0 	bl	800398c <_lseek_r>
 80037ec:	89a3      	ldrh	r3, [r4, #12]
 80037ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037f6:	81a3      	strh	r3, [r4, #12]
 80037f8:	4632      	mov	r2, r6
 80037fa:	463b      	mov	r3, r7
 80037fc:	4628      	mov	r0, r5
 80037fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003802:	f000 b8e7 	b.w	80039d4 <_write_r>

08003806 <__sseek>:
 8003806:	b510      	push	{r4, lr}
 8003808:	460c      	mov	r4, r1
 800380a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800380e:	f000 f8bd 	bl	800398c <_lseek_r>
 8003812:	1c43      	adds	r3, r0, #1
 8003814:	89a3      	ldrh	r3, [r4, #12]
 8003816:	bf15      	itete	ne
 8003818:	6560      	strne	r0, [r4, #84]	@ 0x54
 800381a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800381e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003822:	81a3      	strheq	r3, [r4, #12]
 8003824:	bf18      	it	ne
 8003826:	81a3      	strhne	r3, [r4, #12]
 8003828:	bd10      	pop	{r4, pc}

0800382a <__sclose>:
 800382a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800382e:	f000 b89d 	b.w	800396c <_close_r>

08003832 <__swbuf_r>:
 8003832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003834:	460e      	mov	r6, r1
 8003836:	4614      	mov	r4, r2
 8003838:	4605      	mov	r5, r0
 800383a:	b118      	cbz	r0, 8003844 <__swbuf_r+0x12>
 800383c:	6a03      	ldr	r3, [r0, #32]
 800383e:	b90b      	cbnz	r3, 8003844 <__swbuf_r+0x12>
 8003840:	f7ff fed8 	bl	80035f4 <__sinit>
 8003844:	69a3      	ldr	r3, [r4, #24]
 8003846:	60a3      	str	r3, [r4, #8]
 8003848:	89a3      	ldrh	r3, [r4, #12]
 800384a:	071a      	lsls	r2, r3, #28
 800384c:	d501      	bpl.n	8003852 <__swbuf_r+0x20>
 800384e:	6923      	ldr	r3, [r4, #16]
 8003850:	b943      	cbnz	r3, 8003864 <__swbuf_r+0x32>
 8003852:	4621      	mov	r1, r4
 8003854:	4628      	mov	r0, r5
 8003856:	f000 f82b 	bl	80038b0 <__swsetup_r>
 800385a:	b118      	cbz	r0, 8003864 <__swbuf_r+0x32>
 800385c:	f04f 37ff 	mov.w	r7, #4294967295
 8003860:	4638      	mov	r0, r7
 8003862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	6922      	ldr	r2, [r4, #16]
 8003868:	1a98      	subs	r0, r3, r2
 800386a:	6963      	ldr	r3, [r4, #20]
 800386c:	b2f6      	uxtb	r6, r6
 800386e:	4283      	cmp	r3, r0
 8003870:	4637      	mov	r7, r6
 8003872:	dc05      	bgt.n	8003880 <__swbuf_r+0x4e>
 8003874:	4621      	mov	r1, r4
 8003876:	4628      	mov	r0, r5
 8003878:	f000 fe8e 	bl	8004598 <_fflush_r>
 800387c:	2800      	cmp	r0, #0
 800387e:	d1ed      	bne.n	800385c <__swbuf_r+0x2a>
 8003880:	68a3      	ldr	r3, [r4, #8]
 8003882:	3b01      	subs	r3, #1
 8003884:	60a3      	str	r3, [r4, #8]
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	6022      	str	r2, [r4, #0]
 800388c:	701e      	strb	r6, [r3, #0]
 800388e:	6962      	ldr	r2, [r4, #20]
 8003890:	1c43      	adds	r3, r0, #1
 8003892:	429a      	cmp	r2, r3
 8003894:	d004      	beq.n	80038a0 <__swbuf_r+0x6e>
 8003896:	89a3      	ldrh	r3, [r4, #12]
 8003898:	07db      	lsls	r3, r3, #31
 800389a:	d5e1      	bpl.n	8003860 <__swbuf_r+0x2e>
 800389c:	2e0a      	cmp	r6, #10
 800389e:	d1df      	bne.n	8003860 <__swbuf_r+0x2e>
 80038a0:	4621      	mov	r1, r4
 80038a2:	4628      	mov	r0, r5
 80038a4:	f000 fe78 	bl	8004598 <_fflush_r>
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d0d9      	beq.n	8003860 <__swbuf_r+0x2e>
 80038ac:	e7d6      	b.n	800385c <__swbuf_r+0x2a>
	...

080038b0 <__swsetup_r>:
 80038b0:	b538      	push	{r3, r4, r5, lr}
 80038b2:	4b29      	ldr	r3, [pc, #164]	@ (8003958 <__swsetup_r+0xa8>)
 80038b4:	4605      	mov	r5, r0
 80038b6:	6818      	ldr	r0, [r3, #0]
 80038b8:	460c      	mov	r4, r1
 80038ba:	b118      	cbz	r0, 80038c4 <__swsetup_r+0x14>
 80038bc:	6a03      	ldr	r3, [r0, #32]
 80038be:	b90b      	cbnz	r3, 80038c4 <__swsetup_r+0x14>
 80038c0:	f7ff fe98 	bl	80035f4 <__sinit>
 80038c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038c8:	0719      	lsls	r1, r3, #28
 80038ca:	d422      	bmi.n	8003912 <__swsetup_r+0x62>
 80038cc:	06da      	lsls	r2, r3, #27
 80038ce:	d407      	bmi.n	80038e0 <__swsetup_r+0x30>
 80038d0:	2209      	movs	r2, #9
 80038d2:	602a      	str	r2, [r5, #0]
 80038d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038d8:	81a3      	strh	r3, [r4, #12]
 80038da:	f04f 30ff 	mov.w	r0, #4294967295
 80038de:	e033      	b.n	8003948 <__swsetup_r+0x98>
 80038e0:	0758      	lsls	r0, r3, #29
 80038e2:	d512      	bpl.n	800390a <__swsetup_r+0x5a>
 80038e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80038e6:	b141      	cbz	r1, 80038fa <__swsetup_r+0x4a>
 80038e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80038ec:	4299      	cmp	r1, r3
 80038ee:	d002      	beq.n	80038f6 <__swsetup_r+0x46>
 80038f0:	4628      	mov	r0, r5
 80038f2:	f000 f8af 	bl	8003a54 <_free_r>
 80038f6:	2300      	movs	r3, #0
 80038f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80038fa:	89a3      	ldrh	r3, [r4, #12]
 80038fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003900:	81a3      	strh	r3, [r4, #12]
 8003902:	2300      	movs	r3, #0
 8003904:	6063      	str	r3, [r4, #4]
 8003906:	6923      	ldr	r3, [r4, #16]
 8003908:	6023      	str	r3, [r4, #0]
 800390a:	89a3      	ldrh	r3, [r4, #12]
 800390c:	f043 0308 	orr.w	r3, r3, #8
 8003910:	81a3      	strh	r3, [r4, #12]
 8003912:	6923      	ldr	r3, [r4, #16]
 8003914:	b94b      	cbnz	r3, 800392a <__swsetup_r+0x7a>
 8003916:	89a3      	ldrh	r3, [r4, #12]
 8003918:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800391c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003920:	d003      	beq.n	800392a <__swsetup_r+0x7a>
 8003922:	4621      	mov	r1, r4
 8003924:	4628      	mov	r0, r5
 8003926:	f000 fe85 	bl	8004634 <__smakebuf_r>
 800392a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800392e:	f013 0201 	ands.w	r2, r3, #1
 8003932:	d00a      	beq.n	800394a <__swsetup_r+0x9a>
 8003934:	2200      	movs	r2, #0
 8003936:	60a2      	str	r2, [r4, #8]
 8003938:	6962      	ldr	r2, [r4, #20]
 800393a:	4252      	negs	r2, r2
 800393c:	61a2      	str	r2, [r4, #24]
 800393e:	6922      	ldr	r2, [r4, #16]
 8003940:	b942      	cbnz	r2, 8003954 <__swsetup_r+0xa4>
 8003942:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003946:	d1c5      	bne.n	80038d4 <__swsetup_r+0x24>
 8003948:	bd38      	pop	{r3, r4, r5, pc}
 800394a:	0799      	lsls	r1, r3, #30
 800394c:	bf58      	it	pl
 800394e:	6962      	ldrpl	r2, [r4, #20]
 8003950:	60a2      	str	r2, [r4, #8]
 8003952:	e7f4      	b.n	800393e <__swsetup_r+0x8e>
 8003954:	2000      	movs	r0, #0
 8003956:	e7f7      	b.n	8003948 <__swsetup_r+0x98>
 8003958:	20000018 	.word	0x20000018

0800395c <memset>:
 800395c:	4402      	add	r2, r0
 800395e:	4603      	mov	r3, r0
 8003960:	4293      	cmp	r3, r2
 8003962:	d100      	bne.n	8003966 <memset+0xa>
 8003964:	4770      	bx	lr
 8003966:	f803 1b01 	strb.w	r1, [r3], #1
 800396a:	e7f9      	b.n	8003960 <memset+0x4>

0800396c <_close_r>:
 800396c:	b538      	push	{r3, r4, r5, lr}
 800396e:	4d06      	ldr	r5, [pc, #24]	@ (8003988 <_close_r+0x1c>)
 8003970:	2300      	movs	r3, #0
 8003972:	4604      	mov	r4, r0
 8003974:	4608      	mov	r0, r1
 8003976:	602b      	str	r3, [r5, #0]
 8003978:	f7fd fcb0 	bl	80012dc <_close>
 800397c:	1c43      	adds	r3, r0, #1
 800397e:	d102      	bne.n	8003986 <_close_r+0x1a>
 8003980:	682b      	ldr	r3, [r5, #0]
 8003982:	b103      	cbz	r3, 8003986 <_close_r+0x1a>
 8003984:	6023      	str	r3, [r4, #0]
 8003986:	bd38      	pop	{r3, r4, r5, pc}
 8003988:	20000394 	.word	0x20000394

0800398c <_lseek_r>:
 800398c:	b538      	push	{r3, r4, r5, lr}
 800398e:	4d07      	ldr	r5, [pc, #28]	@ (80039ac <_lseek_r+0x20>)
 8003990:	4604      	mov	r4, r0
 8003992:	4608      	mov	r0, r1
 8003994:	4611      	mov	r1, r2
 8003996:	2200      	movs	r2, #0
 8003998:	602a      	str	r2, [r5, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	f7fd fcc5 	bl	800132a <_lseek>
 80039a0:	1c43      	adds	r3, r0, #1
 80039a2:	d102      	bne.n	80039aa <_lseek_r+0x1e>
 80039a4:	682b      	ldr	r3, [r5, #0]
 80039a6:	b103      	cbz	r3, 80039aa <_lseek_r+0x1e>
 80039a8:	6023      	str	r3, [r4, #0]
 80039aa:	bd38      	pop	{r3, r4, r5, pc}
 80039ac:	20000394 	.word	0x20000394

080039b0 <_read_r>:
 80039b0:	b538      	push	{r3, r4, r5, lr}
 80039b2:	4d07      	ldr	r5, [pc, #28]	@ (80039d0 <_read_r+0x20>)
 80039b4:	4604      	mov	r4, r0
 80039b6:	4608      	mov	r0, r1
 80039b8:	4611      	mov	r1, r2
 80039ba:	2200      	movs	r2, #0
 80039bc:	602a      	str	r2, [r5, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	f7fd fc53 	bl	800126a <_read>
 80039c4:	1c43      	adds	r3, r0, #1
 80039c6:	d102      	bne.n	80039ce <_read_r+0x1e>
 80039c8:	682b      	ldr	r3, [r5, #0]
 80039ca:	b103      	cbz	r3, 80039ce <_read_r+0x1e>
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	bd38      	pop	{r3, r4, r5, pc}
 80039d0:	20000394 	.word	0x20000394

080039d4 <_write_r>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	4d07      	ldr	r5, [pc, #28]	@ (80039f4 <_write_r+0x20>)
 80039d8:	4604      	mov	r4, r0
 80039da:	4608      	mov	r0, r1
 80039dc:	4611      	mov	r1, r2
 80039de:	2200      	movs	r2, #0
 80039e0:	602a      	str	r2, [r5, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	f7fd fc5e 	bl	80012a4 <_write>
 80039e8:	1c43      	adds	r3, r0, #1
 80039ea:	d102      	bne.n	80039f2 <_write_r+0x1e>
 80039ec:	682b      	ldr	r3, [r5, #0]
 80039ee:	b103      	cbz	r3, 80039f2 <_write_r+0x1e>
 80039f0:	6023      	str	r3, [r4, #0]
 80039f2:	bd38      	pop	{r3, r4, r5, pc}
 80039f4:	20000394 	.word	0x20000394

080039f8 <__errno>:
 80039f8:	4b01      	ldr	r3, [pc, #4]	@ (8003a00 <__errno+0x8>)
 80039fa:	6818      	ldr	r0, [r3, #0]
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	20000018 	.word	0x20000018

08003a04 <__libc_init_array>:
 8003a04:	b570      	push	{r4, r5, r6, lr}
 8003a06:	4d0d      	ldr	r5, [pc, #52]	@ (8003a3c <__libc_init_array+0x38>)
 8003a08:	4c0d      	ldr	r4, [pc, #52]	@ (8003a40 <__libc_init_array+0x3c>)
 8003a0a:	1b64      	subs	r4, r4, r5
 8003a0c:	10a4      	asrs	r4, r4, #2
 8003a0e:	2600      	movs	r6, #0
 8003a10:	42a6      	cmp	r6, r4
 8003a12:	d109      	bne.n	8003a28 <__libc_init_array+0x24>
 8003a14:	4d0b      	ldr	r5, [pc, #44]	@ (8003a44 <__libc_init_array+0x40>)
 8003a16:	4c0c      	ldr	r4, [pc, #48]	@ (8003a48 <__libc_init_array+0x44>)
 8003a18:	f000 fed8 	bl	80047cc <_init>
 8003a1c:	1b64      	subs	r4, r4, r5
 8003a1e:	10a4      	asrs	r4, r4, #2
 8003a20:	2600      	movs	r6, #0
 8003a22:	42a6      	cmp	r6, r4
 8003a24:	d105      	bne.n	8003a32 <__libc_init_array+0x2e>
 8003a26:	bd70      	pop	{r4, r5, r6, pc}
 8003a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a2c:	4798      	blx	r3
 8003a2e:	3601      	adds	r6, #1
 8003a30:	e7ee      	b.n	8003a10 <__libc_init_array+0xc>
 8003a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a36:	4798      	blx	r3
 8003a38:	3601      	adds	r6, #1
 8003a3a:	e7f2      	b.n	8003a22 <__libc_init_array+0x1e>
 8003a3c:	08004b20 	.word	0x08004b20
 8003a40:	08004b20 	.word	0x08004b20
 8003a44:	08004b20 	.word	0x08004b20
 8003a48:	08004b24 	.word	0x08004b24

08003a4c <__retarget_lock_init_recursive>:
 8003a4c:	4770      	bx	lr

08003a4e <__retarget_lock_acquire_recursive>:
 8003a4e:	4770      	bx	lr

08003a50 <__retarget_lock_release_recursive>:
 8003a50:	4770      	bx	lr
	...

08003a54 <_free_r>:
 8003a54:	b538      	push	{r3, r4, r5, lr}
 8003a56:	4605      	mov	r5, r0
 8003a58:	2900      	cmp	r1, #0
 8003a5a:	d041      	beq.n	8003ae0 <_free_r+0x8c>
 8003a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a60:	1f0c      	subs	r4, r1, #4
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	bfb8      	it	lt
 8003a66:	18e4      	addlt	r4, r4, r3
 8003a68:	f000 f8e0 	bl	8003c2c <__malloc_lock>
 8003a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ae4 <_free_r+0x90>)
 8003a6e:	6813      	ldr	r3, [r2, #0]
 8003a70:	b933      	cbnz	r3, 8003a80 <_free_r+0x2c>
 8003a72:	6063      	str	r3, [r4, #4]
 8003a74:	6014      	str	r4, [r2, #0]
 8003a76:	4628      	mov	r0, r5
 8003a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a7c:	f000 b8dc 	b.w	8003c38 <__malloc_unlock>
 8003a80:	42a3      	cmp	r3, r4
 8003a82:	d908      	bls.n	8003a96 <_free_r+0x42>
 8003a84:	6820      	ldr	r0, [r4, #0]
 8003a86:	1821      	adds	r1, r4, r0
 8003a88:	428b      	cmp	r3, r1
 8003a8a:	bf01      	itttt	eq
 8003a8c:	6819      	ldreq	r1, [r3, #0]
 8003a8e:	685b      	ldreq	r3, [r3, #4]
 8003a90:	1809      	addeq	r1, r1, r0
 8003a92:	6021      	streq	r1, [r4, #0]
 8003a94:	e7ed      	b.n	8003a72 <_free_r+0x1e>
 8003a96:	461a      	mov	r2, r3
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	b10b      	cbz	r3, 8003aa0 <_free_r+0x4c>
 8003a9c:	42a3      	cmp	r3, r4
 8003a9e:	d9fa      	bls.n	8003a96 <_free_r+0x42>
 8003aa0:	6811      	ldr	r1, [r2, #0]
 8003aa2:	1850      	adds	r0, r2, r1
 8003aa4:	42a0      	cmp	r0, r4
 8003aa6:	d10b      	bne.n	8003ac0 <_free_r+0x6c>
 8003aa8:	6820      	ldr	r0, [r4, #0]
 8003aaa:	4401      	add	r1, r0
 8003aac:	1850      	adds	r0, r2, r1
 8003aae:	4283      	cmp	r3, r0
 8003ab0:	6011      	str	r1, [r2, #0]
 8003ab2:	d1e0      	bne.n	8003a76 <_free_r+0x22>
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	6053      	str	r3, [r2, #4]
 8003aba:	4408      	add	r0, r1
 8003abc:	6010      	str	r0, [r2, #0]
 8003abe:	e7da      	b.n	8003a76 <_free_r+0x22>
 8003ac0:	d902      	bls.n	8003ac8 <_free_r+0x74>
 8003ac2:	230c      	movs	r3, #12
 8003ac4:	602b      	str	r3, [r5, #0]
 8003ac6:	e7d6      	b.n	8003a76 <_free_r+0x22>
 8003ac8:	6820      	ldr	r0, [r4, #0]
 8003aca:	1821      	adds	r1, r4, r0
 8003acc:	428b      	cmp	r3, r1
 8003ace:	bf04      	itt	eq
 8003ad0:	6819      	ldreq	r1, [r3, #0]
 8003ad2:	685b      	ldreq	r3, [r3, #4]
 8003ad4:	6063      	str	r3, [r4, #4]
 8003ad6:	bf04      	itt	eq
 8003ad8:	1809      	addeq	r1, r1, r0
 8003ada:	6021      	streq	r1, [r4, #0]
 8003adc:	6054      	str	r4, [r2, #4]
 8003ade:	e7ca      	b.n	8003a76 <_free_r+0x22>
 8003ae0:	bd38      	pop	{r3, r4, r5, pc}
 8003ae2:	bf00      	nop
 8003ae4:	200003a0 	.word	0x200003a0

08003ae8 <sbrk_aligned>:
 8003ae8:	b570      	push	{r4, r5, r6, lr}
 8003aea:	4e0f      	ldr	r6, [pc, #60]	@ (8003b28 <sbrk_aligned+0x40>)
 8003aec:	460c      	mov	r4, r1
 8003aee:	6831      	ldr	r1, [r6, #0]
 8003af0:	4605      	mov	r5, r0
 8003af2:	b911      	cbnz	r1, 8003afa <sbrk_aligned+0x12>
 8003af4:	f000 fe16 	bl	8004724 <_sbrk_r>
 8003af8:	6030      	str	r0, [r6, #0]
 8003afa:	4621      	mov	r1, r4
 8003afc:	4628      	mov	r0, r5
 8003afe:	f000 fe11 	bl	8004724 <_sbrk_r>
 8003b02:	1c43      	adds	r3, r0, #1
 8003b04:	d103      	bne.n	8003b0e <sbrk_aligned+0x26>
 8003b06:	f04f 34ff 	mov.w	r4, #4294967295
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	bd70      	pop	{r4, r5, r6, pc}
 8003b0e:	1cc4      	adds	r4, r0, #3
 8003b10:	f024 0403 	bic.w	r4, r4, #3
 8003b14:	42a0      	cmp	r0, r4
 8003b16:	d0f8      	beq.n	8003b0a <sbrk_aligned+0x22>
 8003b18:	1a21      	subs	r1, r4, r0
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	f000 fe02 	bl	8004724 <_sbrk_r>
 8003b20:	3001      	adds	r0, #1
 8003b22:	d1f2      	bne.n	8003b0a <sbrk_aligned+0x22>
 8003b24:	e7ef      	b.n	8003b06 <sbrk_aligned+0x1e>
 8003b26:	bf00      	nop
 8003b28:	2000039c 	.word	0x2000039c

08003b2c <_malloc_r>:
 8003b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b30:	1ccd      	adds	r5, r1, #3
 8003b32:	f025 0503 	bic.w	r5, r5, #3
 8003b36:	3508      	adds	r5, #8
 8003b38:	2d0c      	cmp	r5, #12
 8003b3a:	bf38      	it	cc
 8003b3c:	250c      	movcc	r5, #12
 8003b3e:	2d00      	cmp	r5, #0
 8003b40:	4606      	mov	r6, r0
 8003b42:	db01      	blt.n	8003b48 <_malloc_r+0x1c>
 8003b44:	42a9      	cmp	r1, r5
 8003b46:	d904      	bls.n	8003b52 <_malloc_r+0x26>
 8003b48:	230c      	movs	r3, #12
 8003b4a:	6033      	str	r3, [r6, #0]
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c28 <_malloc_r+0xfc>
 8003b56:	f000 f869 	bl	8003c2c <__malloc_lock>
 8003b5a:	f8d8 3000 	ldr.w	r3, [r8]
 8003b5e:	461c      	mov	r4, r3
 8003b60:	bb44      	cbnz	r4, 8003bb4 <_malloc_r+0x88>
 8003b62:	4629      	mov	r1, r5
 8003b64:	4630      	mov	r0, r6
 8003b66:	f7ff ffbf 	bl	8003ae8 <sbrk_aligned>
 8003b6a:	1c43      	adds	r3, r0, #1
 8003b6c:	4604      	mov	r4, r0
 8003b6e:	d158      	bne.n	8003c22 <_malloc_r+0xf6>
 8003b70:	f8d8 4000 	ldr.w	r4, [r8]
 8003b74:	4627      	mov	r7, r4
 8003b76:	2f00      	cmp	r7, #0
 8003b78:	d143      	bne.n	8003c02 <_malloc_r+0xd6>
 8003b7a:	2c00      	cmp	r4, #0
 8003b7c:	d04b      	beq.n	8003c16 <_malloc_r+0xea>
 8003b7e:	6823      	ldr	r3, [r4, #0]
 8003b80:	4639      	mov	r1, r7
 8003b82:	4630      	mov	r0, r6
 8003b84:	eb04 0903 	add.w	r9, r4, r3
 8003b88:	f000 fdcc 	bl	8004724 <_sbrk_r>
 8003b8c:	4581      	cmp	r9, r0
 8003b8e:	d142      	bne.n	8003c16 <_malloc_r+0xea>
 8003b90:	6821      	ldr	r1, [r4, #0]
 8003b92:	1a6d      	subs	r5, r5, r1
 8003b94:	4629      	mov	r1, r5
 8003b96:	4630      	mov	r0, r6
 8003b98:	f7ff ffa6 	bl	8003ae8 <sbrk_aligned>
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	d03a      	beq.n	8003c16 <_malloc_r+0xea>
 8003ba0:	6823      	ldr	r3, [r4, #0]
 8003ba2:	442b      	add	r3, r5
 8003ba4:	6023      	str	r3, [r4, #0]
 8003ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	bb62      	cbnz	r2, 8003c08 <_malloc_r+0xdc>
 8003bae:	f8c8 7000 	str.w	r7, [r8]
 8003bb2:	e00f      	b.n	8003bd4 <_malloc_r+0xa8>
 8003bb4:	6822      	ldr	r2, [r4, #0]
 8003bb6:	1b52      	subs	r2, r2, r5
 8003bb8:	d420      	bmi.n	8003bfc <_malloc_r+0xd0>
 8003bba:	2a0b      	cmp	r2, #11
 8003bbc:	d917      	bls.n	8003bee <_malloc_r+0xc2>
 8003bbe:	1961      	adds	r1, r4, r5
 8003bc0:	42a3      	cmp	r3, r4
 8003bc2:	6025      	str	r5, [r4, #0]
 8003bc4:	bf18      	it	ne
 8003bc6:	6059      	strne	r1, [r3, #4]
 8003bc8:	6863      	ldr	r3, [r4, #4]
 8003bca:	bf08      	it	eq
 8003bcc:	f8c8 1000 	streq.w	r1, [r8]
 8003bd0:	5162      	str	r2, [r4, r5]
 8003bd2:	604b      	str	r3, [r1, #4]
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	f000 f82f 	bl	8003c38 <__malloc_unlock>
 8003bda:	f104 000b 	add.w	r0, r4, #11
 8003bde:	1d23      	adds	r3, r4, #4
 8003be0:	f020 0007 	bic.w	r0, r0, #7
 8003be4:	1ac2      	subs	r2, r0, r3
 8003be6:	bf1c      	itt	ne
 8003be8:	1a1b      	subne	r3, r3, r0
 8003bea:	50a3      	strne	r3, [r4, r2]
 8003bec:	e7af      	b.n	8003b4e <_malloc_r+0x22>
 8003bee:	6862      	ldr	r2, [r4, #4]
 8003bf0:	42a3      	cmp	r3, r4
 8003bf2:	bf0c      	ite	eq
 8003bf4:	f8c8 2000 	streq.w	r2, [r8]
 8003bf8:	605a      	strne	r2, [r3, #4]
 8003bfa:	e7eb      	b.n	8003bd4 <_malloc_r+0xa8>
 8003bfc:	4623      	mov	r3, r4
 8003bfe:	6864      	ldr	r4, [r4, #4]
 8003c00:	e7ae      	b.n	8003b60 <_malloc_r+0x34>
 8003c02:	463c      	mov	r4, r7
 8003c04:	687f      	ldr	r7, [r7, #4]
 8003c06:	e7b6      	b.n	8003b76 <_malloc_r+0x4a>
 8003c08:	461a      	mov	r2, r3
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	42a3      	cmp	r3, r4
 8003c0e:	d1fb      	bne.n	8003c08 <_malloc_r+0xdc>
 8003c10:	2300      	movs	r3, #0
 8003c12:	6053      	str	r3, [r2, #4]
 8003c14:	e7de      	b.n	8003bd4 <_malloc_r+0xa8>
 8003c16:	230c      	movs	r3, #12
 8003c18:	6033      	str	r3, [r6, #0]
 8003c1a:	4630      	mov	r0, r6
 8003c1c:	f000 f80c 	bl	8003c38 <__malloc_unlock>
 8003c20:	e794      	b.n	8003b4c <_malloc_r+0x20>
 8003c22:	6005      	str	r5, [r0, #0]
 8003c24:	e7d6      	b.n	8003bd4 <_malloc_r+0xa8>
 8003c26:	bf00      	nop
 8003c28:	200003a0 	.word	0x200003a0

08003c2c <__malloc_lock>:
 8003c2c:	4801      	ldr	r0, [pc, #4]	@ (8003c34 <__malloc_lock+0x8>)
 8003c2e:	f7ff bf0e 	b.w	8003a4e <__retarget_lock_acquire_recursive>
 8003c32:	bf00      	nop
 8003c34:	20000398 	.word	0x20000398

08003c38 <__malloc_unlock>:
 8003c38:	4801      	ldr	r0, [pc, #4]	@ (8003c40 <__malloc_unlock+0x8>)
 8003c3a:	f7ff bf09 	b.w	8003a50 <__retarget_lock_release_recursive>
 8003c3e:	bf00      	nop
 8003c40:	20000398 	.word	0x20000398

08003c44 <__ssputs_r>:
 8003c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c48:	688e      	ldr	r6, [r1, #8]
 8003c4a:	461f      	mov	r7, r3
 8003c4c:	42be      	cmp	r6, r7
 8003c4e:	680b      	ldr	r3, [r1, #0]
 8003c50:	4682      	mov	sl, r0
 8003c52:	460c      	mov	r4, r1
 8003c54:	4690      	mov	r8, r2
 8003c56:	d82d      	bhi.n	8003cb4 <__ssputs_r+0x70>
 8003c58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003c60:	d026      	beq.n	8003cb0 <__ssputs_r+0x6c>
 8003c62:	6965      	ldr	r5, [r4, #20]
 8003c64:	6909      	ldr	r1, [r1, #16]
 8003c66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c6a:	eba3 0901 	sub.w	r9, r3, r1
 8003c6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c72:	1c7b      	adds	r3, r7, #1
 8003c74:	444b      	add	r3, r9
 8003c76:	106d      	asrs	r5, r5, #1
 8003c78:	429d      	cmp	r5, r3
 8003c7a:	bf38      	it	cc
 8003c7c:	461d      	movcc	r5, r3
 8003c7e:	0553      	lsls	r3, r2, #21
 8003c80:	d527      	bpl.n	8003cd2 <__ssputs_r+0x8e>
 8003c82:	4629      	mov	r1, r5
 8003c84:	f7ff ff52 	bl	8003b2c <_malloc_r>
 8003c88:	4606      	mov	r6, r0
 8003c8a:	b360      	cbz	r0, 8003ce6 <__ssputs_r+0xa2>
 8003c8c:	6921      	ldr	r1, [r4, #16]
 8003c8e:	464a      	mov	r2, r9
 8003c90:	f000 fd58 	bl	8004744 <memcpy>
 8003c94:	89a3      	ldrh	r3, [r4, #12]
 8003c96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c9e:	81a3      	strh	r3, [r4, #12]
 8003ca0:	6126      	str	r6, [r4, #16]
 8003ca2:	6165      	str	r5, [r4, #20]
 8003ca4:	444e      	add	r6, r9
 8003ca6:	eba5 0509 	sub.w	r5, r5, r9
 8003caa:	6026      	str	r6, [r4, #0]
 8003cac:	60a5      	str	r5, [r4, #8]
 8003cae:	463e      	mov	r6, r7
 8003cb0:	42be      	cmp	r6, r7
 8003cb2:	d900      	bls.n	8003cb6 <__ssputs_r+0x72>
 8003cb4:	463e      	mov	r6, r7
 8003cb6:	6820      	ldr	r0, [r4, #0]
 8003cb8:	4632      	mov	r2, r6
 8003cba:	4641      	mov	r1, r8
 8003cbc:	f000 fcf6 	bl	80046ac <memmove>
 8003cc0:	68a3      	ldr	r3, [r4, #8]
 8003cc2:	1b9b      	subs	r3, r3, r6
 8003cc4:	60a3      	str	r3, [r4, #8]
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	4433      	add	r3, r6
 8003cca:	6023      	str	r3, [r4, #0]
 8003ccc:	2000      	movs	r0, #0
 8003cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cd2:	462a      	mov	r2, r5
 8003cd4:	f000 fd44 	bl	8004760 <_realloc_r>
 8003cd8:	4606      	mov	r6, r0
 8003cda:	2800      	cmp	r0, #0
 8003cdc:	d1e0      	bne.n	8003ca0 <__ssputs_r+0x5c>
 8003cde:	6921      	ldr	r1, [r4, #16]
 8003ce0:	4650      	mov	r0, sl
 8003ce2:	f7ff feb7 	bl	8003a54 <_free_r>
 8003ce6:	230c      	movs	r3, #12
 8003ce8:	f8ca 3000 	str.w	r3, [sl]
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cf2:	81a3      	strh	r3, [r4, #12]
 8003cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf8:	e7e9      	b.n	8003cce <__ssputs_r+0x8a>
	...

08003cfc <_svfiprintf_r>:
 8003cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d00:	4698      	mov	r8, r3
 8003d02:	898b      	ldrh	r3, [r1, #12]
 8003d04:	061b      	lsls	r3, r3, #24
 8003d06:	b09d      	sub	sp, #116	@ 0x74
 8003d08:	4607      	mov	r7, r0
 8003d0a:	460d      	mov	r5, r1
 8003d0c:	4614      	mov	r4, r2
 8003d0e:	d510      	bpl.n	8003d32 <_svfiprintf_r+0x36>
 8003d10:	690b      	ldr	r3, [r1, #16]
 8003d12:	b973      	cbnz	r3, 8003d32 <_svfiprintf_r+0x36>
 8003d14:	2140      	movs	r1, #64	@ 0x40
 8003d16:	f7ff ff09 	bl	8003b2c <_malloc_r>
 8003d1a:	6028      	str	r0, [r5, #0]
 8003d1c:	6128      	str	r0, [r5, #16]
 8003d1e:	b930      	cbnz	r0, 8003d2e <_svfiprintf_r+0x32>
 8003d20:	230c      	movs	r3, #12
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	f04f 30ff 	mov.w	r0, #4294967295
 8003d28:	b01d      	add	sp, #116	@ 0x74
 8003d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d2e:	2340      	movs	r3, #64	@ 0x40
 8003d30:	616b      	str	r3, [r5, #20]
 8003d32:	2300      	movs	r3, #0
 8003d34:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d36:	2320      	movs	r3, #32
 8003d38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d40:	2330      	movs	r3, #48	@ 0x30
 8003d42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003ee0 <_svfiprintf_r+0x1e4>
 8003d46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d4a:	f04f 0901 	mov.w	r9, #1
 8003d4e:	4623      	mov	r3, r4
 8003d50:	469a      	mov	sl, r3
 8003d52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d56:	b10a      	cbz	r2, 8003d5c <_svfiprintf_r+0x60>
 8003d58:	2a25      	cmp	r2, #37	@ 0x25
 8003d5a:	d1f9      	bne.n	8003d50 <_svfiprintf_r+0x54>
 8003d5c:	ebba 0b04 	subs.w	fp, sl, r4
 8003d60:	d00b      	beq.n	8003d7a <_svfiprintf_r+0x7e>
 8003d62:	465b      	mov	r3, fp
 8003d64:	4622      	mov	r2, r4
 8003d66:	4629      	mov	r1, r5
 8003d68:	4638      	mov	r0, r7
 8003d6a:	f7ff ff6b 	bl	8003c44 <__ssputs_r>
 8003d6e:	3001      	adds	r0, #1
 8003d70:	f000 80a7 	beq.w	8003ec2 <_svfiprintf_r+0x1c6>
 8003d74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d76:	445a      	add	r2, fp
 8003d78:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d7a:	f89a 3000 	ldrb.w	r3, [sl]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 809f 	beq.w	8003ec2 <_svfiprintf_r+0x1c6>
 8003d84:	2300      	movs	r3, #0
 8003d86:	f04f 32ff 	mov.w	r2, #4294967295
 8003d8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d8e:	f10a 0a01 	add.w	sl, sl, #1
 8003d92:	9304      	str	r3, [sp, #16]
 8003d94:	9307      	str	r3, [sp, #28]
 8003d96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d9c:	4654      	mov	r4, sl
 8003d9e:	2205      	movs	r2, #5
 8003da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003da4:	484e      	ldr	r0, [pc, #312]	@ (8003ee0 <_svfiprintf_r+0x1e4>)
 8003da6:	f7fc fa1b 	bl	80001e0 <memchr>
 8003daa:	9a04      	ldr	r2, [sp, #16]
 8003dac:	b9d8      	cbnz	r0, 8003de6 <_svfiprintf_r+0xea>
 8003dae:	06d0      	lsls	r0, r2, #27
 8003db0:	bf44      	itt	mi
 8003db2:	2320      	movmi	r3, #32
 8003db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003db8:	0711      	lsls	r1, r2, #28
 8003dba:	bf44      	itt	mi
 8003dbc:	232b      	movmi	r3, #43	@ 0x2b
 8003dbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8003dc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003dc8:	d015      	beq.n	8003df6 <_svfiprintf_r+0xfa>
 8003dca:	9a07      	ldr	r2, [sp, #28]
 8003dcc:	4654      	mov	r4, sl
 8003dce:	2000      	movs	r0, #0
 8003dd0:	f04f 0c0a 	mov.w	ip, #10
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dda:	3b30      	subs	r3, #48	@ 0x30
 8003ddc:	2b09      	cmp	r3, #9
 8003dde:	d94b      	bls.n	8003e78 <_svfiprintf_r+0x17c>
 8003de0:	b1b0      	cbz	r0, 8003e10 <_svfiprintf_r+0x114>
 8003de2:	9207      	str	r2, [sp, #28]
 8003de4:	e014      	b.n	8003e10 <_svfiprintf_r+0x114>
 8003de6:	eba0 0308 	sub.w	r3, r0, r8
 8003dea:	fa09 f303 	lsl.w	r3, r9, r3
 8003dee:	4313      	orrs	r3, r2
 8003df0:	9304      	str	r3, [sp, #16]
 8003df2:	46a2      	mov	sl, r4
 8003df4:	e7d2      	b.n	8003d9c <_svfiprintf_r+0xa0>
 8003df6:	9b03      	ldr	r3, [sp, #12]
 8003df8:	1d19      	adds	r1, r3, #4
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	9103      	str	r1, [sp, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	bfbb      	ittet	lt
 8003e02:	425b      	neglt	r3, r3
 8003e04:	f042 0202 	orrlt.w	r2, r2, #2
 8003e08:	9307      	strge	r3, [sp, #28]
 8003e0a:	9307      	strlt	r3, [sp, #28]
 8003e0c:	bfb8      	it	lt
 8003e0e:	9204      	strlt	r2, [sp, #16]
 8003e10:	7823      	ldrb	r3, [r4, #0]
 8003e12:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e14:	d10a      	bne.n	8003e2c <_svfiprintf_r+0x130>
 8003e16:	7863      	ldrb	r3, [r4, #1]
 8003e18:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e1a:	d132      	bne.n	8003e82 <_svfiprintf_r+0x186>
 8003e1c:	9b03      	ldr	r3, [sp, #12]
 8003e1e:	1d1a      	adds	r2, r3, #4
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	9203      	str	r2, [sp, #12]
 8003e24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e28:	3402      	adds	r4, #2
 8003e2a:	9305      	str	r3, [sp, #20]
 8003e2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003ef0 <_svfiprintf_r+0x1f4>
 8003e30:	7821      	ldrb	r1, [r4, #0]
 8003e32:	2203      	movs	r2, #3
 8003e34:	4650      	mov	r0, sl
 8003e36:	f7fc f9d3 	bl	80001e0 <memchr>
 8003e3a:	b138      	cbz	r0, 8003e4c <_svfiprintf_r+0x150>
 8003e3c:	9b04      	ldr	r3, [sp, #16]
 8003e3e:	eba0 000a 	sub.w	r0, r0, sl
 8003e42:	2240      	movs	r2, #64	@ 0x40
 8003e44:	4082      	lsls	r2, r0
 8003e46:	4313      	orrs	r3, r2
 8003e48:	3401      	adds	r4, #1
 8003e4a:	9304      	str	r3, [sp, #16]
 8003e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e50:	4824      	ldr	r0, [pc, #144]	@ (8003ee4 <_svfiprintf_r+0x1e8>)
 8003e52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e56:	2206      	movs	r2, #6
 8003e58:	f7fc f9c2 	bl	80001e0 <memchr>
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	d036      	beq.n	8003ece <_svfiprintf_r+0x1d2>
 8003e60:	4b21      	ldr	r3, [pc, #132]	@ (8003ee8 <_svfiprintf_r+0x1ec>)
 8003e62:	bb1b      	cbnz	r3, 8003eac <_svfiprintf_r+0x1b0>
 8003e64:	9b03      	ldr	r3, [sp, #12]
 8003e66:	3307      	adds	r3, #7
 8003e68:	f023 0307 	bic.w	r3, r3, #7
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	9303      	str	r3, [sp, #12]
 8003e70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e72:	4433      	add	r3, r6
 8003e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e76:	e76a      	b.n	8003d4e <_svfiprintf_r+0x52>
 8003e78:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e7c:	460c      	mov	r4, r1
 8003e7e:	2001      	movs	r0, #1
 8003e80:	e7a8      	b.n	8003dd4 <_svfiprintf_r+0xd8>
 8003e82:	2300      	movs	r3, #0
 8003e84:	3401      	adds	r4, #1
 8003e86:	9305      	str	r3, [sp, #20]
 8003e88:	4619      	mov	r1, r3
 8003e8a:	f04f 0c0a 	mov.w	ip, #10
 8003e8e:	4620      	mov	r0, r4
 8003e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e94:	3a30      	subs	r2, #48	@ 0x30
 8003e96:	2a09      	cmp	r2, #9
 8003e98:	d903      	bls.n	8003ea2 <_svfiprintf_r+0x1a6>
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0c6      	beq.n	8003e2c <_svfiprintf_r+0x130>
 8003e9e:	9105      	str	r1, [sp, #20]
 8003ea0:	e7c4      	b.n	8003e2c <_svfiprintf_r+0x130>
 8003ea2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e7f0      	b.n	8003e8e <_svfiprintf_r+0x192>
 8003eac:	ab03      	add	r3, sp, #12
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	462a      	mov	r2, r5
 8003eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8003eec <_svfiprintf_r+0x1f0>)
 8003eb4:	a904      	add	r1, sp, #16
 8003eb6:	4638      	mov	r0, r7
 8003eb8:	f3af 8000 	nop.w
 8003ebc:	1c42      	adds	r2, r0, #1
 8003ebe:	4606      	mov	r6, r0
 8003ec0:	d1d6      	bne.n	8003e70 <_svfiprintf_r+0x174>
 8003ec2:	89ab      	ldrh	r3, [r5, #12]
 8003ec4:	065b      	lsls	r3, r3, #25
 8003ec6:	f53f af2d 	bmi.w	8003d24 <_svfiprintf_r+0x28>
 8003eca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ecc:	e72c      	b.n	8003d28 <_svfiprintf_r+0x2c>
 8003ece:	ab03      	add	r3, sp, #12
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	462a      	mov	r2, r5
 8003ed4:	4b05      	ldr	r3, [pc, #20]	@ (8003eec <_svfiprintf_r+0x1f0>)
 8003ed6:	a904      	add	r1, sp, #16
 8003ed8:	4638      	mov	r0, r7
 8003eda:	f000 f9bb 	bl	8004254 <_printf_i>
 8003ede:	e7ed      	b.n	8003ebc <_svfiprintf_r+0x1c0>
 8003ee0:	08004ae4 	.word	0x08004ae4
 8003ee4:	08004aee 	.word	0x08004aee
 8003ee8:	00000000 	.word	0x00000000
 8003eec:	08003c45 	.word	0x08003c45
 8003ef0:	08004aea 	.word	0x08004aea

08003ef4 <__sfputc_r>:
 8003ef4:	6893      	ldr	r3, [r2, #8]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	b410      	push	{r4}
 8003efc:	6093      	str	r3, [r2, #8]
 8003efe:	da08      	bge.n	8003f12 <__sfputc_r+0x1e>
 8003f00:	6994      	ldr	r4, [r2, #24]
 8003f02:	42a3      	cmp	r3, r4
 8003f04:	db01      	blt.n	8003f0a <__sfputc_r+0x16>
 8003f06:	290a      	cmp	r1, #10
 8003f08:	d103      	bne.n	8003f12 <__sfputc_r+0x1e>
 8003f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f0e:	f7ff bc90 	b.w	8003832 <__swbuf_r>
 8003f12:	6813      	ldr	r3, [r2, #0]
 8003f14:	1c58      	adds	r0, r3, #1
 8003f16:	6010      	str	r0, [r2, #0]
 8003f18:	7019      	strb	r1, [r3, #0]
 8003f1a:	4608      	mov	r0, r1
 8003f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <__sfputs_r>:
 8003f22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f24:	4606      	mov	r6, r0
 8003f26:	460f      	mov	r7, r1
 8003f28:	4614      	mov	r4, r2
 8003f2a:	18d5      	adds	r5, r2, r3
 8003f2c:	42ac      	cmp	r4, r5
 8003f2e:	d101      	bne.n	8003f34 <__sfputs_r+0x12>
 8003f30:	2000      	movs	r0, #0
 8003f32:	e007      	b.n	8003f44 <__sfputs_r+0x22>
 8003f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f38:	463a      	mov	r2, r7
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	f7ff ffda 	bl	8003ef4 <__sfputc_r>
 8003f40:	1c43      	adds	r3, r0, #1
 8003f42:	d1f3      	bne.n	8003f2c <__sfputs_r+0xa>
 8003f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f48 <_vfiprintf_r>:
 8003f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f4c:	460d      	mov	r5, r1
 8003f4e:	b09d      	sub	sp, #116	@ 0x74
 8003f50:	4614      	mov	r4, r2
 8003f52:	4698      	mov	r8, r3
 8003f54:	4606      	mov	r6, r0
 8003f56:	b118      	cbz	r0, 8003f60 <_vfiprintf_r+0x18>
 8003f58:	6a03      	ldr	r3, [r0, #32]
 8003f5a:	b90b      	cbnz	r3, 8003f60 <_vfiprintf_r+0x18>
 8003f5c:	f7ff fb4a 	bl	80035f4 <__sinit>
 8003f60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f62:	07d9      	lsls	r1, r3, #31
 8003f64:	d405      	bmi.n	8003f72 <_vfiprintf_r+0x2a>
 8003f66:	89ab      	ldrh	r3, [r5, #12]
 8003f68:	059a      	lsls	r2, r3, #22
 8003f6a:	d402      	bmi.n	8003f72 <_vfiprintf_r+0x2a>
 8003f6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f6e:	f7ff fd6e 	bl	8003a4e <__retarget_lock_acquire_recursive>
 8003f72:	89ab      	ldrh	r3, [r5, #12]
 8003f74:	071b      	lsls	r3, r3, #28
 8003f76:	d501      	bpl.n	8003f7c <_vfiprintf_r+0x34>
 8003f78:	692b      	ldr	r3, [r5, #16]
 8003f7a:	b99b      	cbnz	r3, 8003fa4 <_vfiprintf_r+0x5c>
 8003f7c:	4629      	mov	r1, r5
 8003f7e:	4630      	mov	r0, r6
 8003f80:	f7ff fc96 	bl	80038b0 <__swsetup_r>
 8003f84:	b170      	cbz	r0, 8003fa4 <_vfiprintf_r+0x5c>
 8003f86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f88:	07dc      	lsls	r4, r3, #31
 8003f8a:	d504      	bpl.n	8003f96 <_vfiprintf_r+0x4e>
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f90:	b01d      	add	sp, #116	@ 0x74
 8003f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f96:	89ab      	ldrh	r3, [r5, #12]
 8003f98:	0598      	lsls	r0, r3, #22
 8003f9a:	d4f7      	bmi.n	8003f8c <_vfiprintf_r+0x44>
 8003f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f9e:	f7ff fd57 	bl	8003a50 <__retarget_lock_release_recursive>
 8003fa2:	e7f3      	b.n	8003f8c <_vfiprintf_r+0x44>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fa8:	2320      	movs	r3, #32
 8003faa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003fae:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fb2:	2330      	movs	r3, #48	@ 0x30
 8003fb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004164 <_vfiprintf_r+0x21c>
 8003fb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003fbc:	f04f 0901 	mov.w	r9, #1
 8003fc0:	4623      	mov	r3, r4
 8003fc2:	469a      	mov	sl, r3
 8003fc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fc8:	b10a      	cbz	r2, 8003fce <_vfiprintf_r+0x86>
 8003fca:	2a25      	cmp	r2, #37	@ 0x25
 8003fcc:	d1f9      	bne.n	8003fc2 <_vfiprintf_r+0x7a>
 8003fce:	ebba 0b04 	subs.w	fp, sl, r4
 8003fd2:	d00b      	beq.n	8003fec <_vfiprintf_r+0xa4>
 8003fd4:	465b      	mov	r3, fp
 8003fd6:	4622      	mov	r2, r4
 8003fd8:	4629      	mov	r1, r5
 8003fda:	4630      	mov	r0, r6
 8003fdc:	f7ff ffa1 	bl	8003f22 <__sfputs_r>
 8003fe0:	3001      	adds	r0, #1
 8003fe2:	f000 80a7 	beq.w	8004134 <_vfiprintf_r+0x1ec>
 8003fe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003fe8:	445a      	add	r2, fp
 8003fea:	9209      	str	r2, [sp, #36]	@ 0x24
 8003fec:	f89a 3000 	ldrb.w	r3, [sl]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 809f 	beq.w	8004134 <_vfiprintf_r+0x1ec>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004000:	f10a 0a01 	add.w	sl, sl, #1
 8004004:	9304      	str	r3, [sp, #16]
 8004006:	9307      	str	r3, [sp, #28]
 8004008:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800400c:	931a      	str	r3, [sp, #104]	@ 0x68
 800400e:	4654      	mov	r4, sl
 8004010:	2205      	movs	r2, #5
 8004012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004016:	4853      	ldr	r0, [pc, #332]	@ (8004164 <_vfiprintf_r+0x21c>)
 8004018:	f7fc f8e2 	bl	80001e0 <memchr>
 800401c:	9a04      	ldr	r2, [sp, #16]
 800401e:	b9d8      	cbnz	r0, 8004058 <_vfiprintf_r+0x110>
 8004020:	06d1      	lsls	r1, r2, #27
 8004022:	bf44      	itt	mi
 8004024:	2320      	movmi	r3, #32
 8004026:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800402a:	0713      	lsls	r3, r2, #28
 800402c:	bf44      	itt	mi
 800402e:	232b      	movmi	r3, #43	@ 0x2b
 8004030:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004034:	f89a 3000 	ldrb.w	r3, [sl]
 8004038:	2b2a      	cmp	r3, #42	@ 0x2a
 800403a:	d015      	beq.n	8004068 <_vfiprintf_r+0x120>
 800403c:	9a07      	ldr	r2, [sp, #28]
 800403e:	4654      	mov	r4, sl
 8004040:	2000      	movs	r0, #0
 8004042:	f04f 0c0a 	mov.w	ip, #10
 8004046:	4621      	mov	r1, r4
 8004048:	f811 3b01 	ldrb.w	r3, [r1], #1
 800404c:	3b30      	subs	r3, #48	@ 0x30
 800404e:	2b09      	cmp	r3, #9
 8004050:	d94b      	bls.n	80040ea <_vfiprintf_r+0x1a2>
 8004052:	b1b0      	cbz	r0, 8004082 <_vfiprintf_r+0x13a>
 8004054:	9207      	str	r2, [sp, #28]
 8004056:	e014      	b.n	8004082 <_vfiprintf_r+0x13a>
 8004058:	eba0 0308 	sub.w	r3, r0, r8
 800405c:	fa09 f303 	lsl.w	r3, r9, r3
 8004060:	4313      	orrs	r3, r2
 8004062:	9304      	str	r3, [sp, #16]
 8004064:	46a2      	mov	sl, r4
 8004066:	e7d2      	b.n	800400e <_vfiprintf_r+0xc6>
 8004068:	9b03      	ldr	r3, [sp, #12]
 800406a:	1d19      	adds	r1, r3, #4
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	9103      	str	r1, [sp, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	bfbb      	ittet	lt
 8004074:	425b      	neglt	r3, r3
 8004076:	f042 0202 	orrlt.w	r2, r2, #2
 800407a:	9307      	strge	r3, [sp, #28]
 800407c:	9307      	strlt	r3, [sp, #28]
 800407e:	bfb8      	it	lt
 8004080:	9204      	strlt	r2, [sp, #16]
 8004082:	7823      	ldrb	r3, [r4, #0]
 8004084:	2b2e      	cmp	r3, #46	@ 0x2e
 8004086:	d10a      	bne.n	800409e <_vfiprintf_r+0x156>
 8004088:	7863      	ldrb	r3, [r4, #1]
 800408a:	2b2a      	cmp	r3, #42	@ 0x2a
 800408c:	d132      	bne.n	80040f4 <_vfiprintf_r+0x1ac>
 800408e:	9b03      	ldr	r3, [sp, #12]
 8004090:	1d1a      	adds	r2, r3, #4
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	9203      	str	r2, [sp, #12]
 8004096:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800409a:	3402      	adds	r4, #2
 800409c:	9305      	str	r3, [sp, #20]
 800409e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004174 <_vfiprintf_r+0x22c>
 80040a2:	7821      	ldrb	r1, [r4, #0]
 80040a4:	2203      	movs	r2, #3
 80040a6:	4650      	mov	r0, sl
 80040a8:	f7fc f89a 	bl	80001e0 <memchr>
 80040ac:	b138      	cbz	r0, 80040be <_vfiprintf_r+0x176>
 80040ae:	9b04      	ldr	r3, [sp, #16]
 80040b0:	eba0 000a 	sub.w	r0, r0, sl
 80040b4:	2240      	movs	r2, #64	@ 0x40
 80040b6:	4082      	lsls	r2, r0
 80040b8:	4313      	orrs	r3, r2
 80040ba:	3401      	adds	r4, #1
 80040bc:	9304      	str	r3, [sp, #16]
 80040be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040c2:	4829      	ldr	r0, [pc, #164]	@ (8004168 <_vfiprintf_r+0x220>)
 80040c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80040c8:	2206      	movs	r2, #6
 80040ca:	f7fc f889 	bl	80001e0 <memchr>
 80040ce:	2800      	cmp	r0, #0
 80040d0:	d03f      	beq.n	8004152 <_vfiprintf_r+0x20a>
 80040d2:	4b26      	ldr	r3, [pc, #152]	@ (800416c <_vfiprintf_r+0x224>)
 80040d4:	bb1b      	cbnz	r3, 800411e <_vfiprintf_r+0x1d6>
 80040d6:	9b03      	ldr	r3, [sp, #12]
 80040d8:	3307      	adds	r3, #7
 80040da:	f023 0307 	bic.w	r3, r3, #7
 80040de:	3308      	adds	r3, #8
 80040e0:	9303      	str	r3, [sp, #12]
 80040e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040e4:	443b      	add	r3, r7
 80040e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80040e8:	e76a      	b.n	8003fc0 <_vfiprintf_r+0x78>
 80040ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80040ee:	460c      	mov	r4, r1
 80040f0:	2001      	movs	r0, #1
 80040f2:	e7a8      	b.n	8004046 <_vfiprintf_r+0xfe>
 80040f4:	2300      	movs	r3, #0
 80040f6:	3401      	adds	r4, #1
 80040f8:	9305      	str	r3, [sp, #20]
 80040fa:	4619      	mov	r1, r3
 80040fc:	f04f 0c0a 	mov.w	ip, #10
 8004100:	4620      	mov	r0, r4
 8004102:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004106:	3a30      	subs	r2, #48	@ 0x30
 8004108:	2a09      	cmp	r2, #9
 800410a:	d903      	bls.n	8004114 <_vfiprintf_r+0x1cc>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0c6      	beq.n	800409e <_vfiprintf_r+0x156>
 8004110:	9105      	str	r1, [sp, #20]
 8004112:	e7c4      	b.n	800409e <_vfiprintf_r+0x156>
 8004114:	fb0c 2101 	mla	r1, ip, r1, r2
 8004118:	4604      	mov	r4, r0
 800411a:	2301      	movs	r3, #1
 800411c:	e7f0      	b.n	8004100 <_vfiprintf_r+0x1b8>
 800411e:	ab03      	add	r3, sp, #12
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	462a      	mov	r2, r5
 8004124:	4b12      	ldr	r3, [pc, #72]	@ (8004170 <_vfiprintf_r+0x228>)
 8004126:	a904      	add	r1, sp, #16
 8004128:	4630      	mov	r0, r6
 800412a:	f3af 8000 	nop.w
 800412e:	4607      	mov	r7, r0
 8004130:	1c78      	adds	r0, r7, #1
 8004132:	d1d6      	bne.n	80040e2 <_vfiprintf_r+0x19a>
 8004134:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004136:	07d9      	lsls	r1, r3, #31
 8004138:	d405      	bmi.n	8004146 <_vfiprintf_r+0x1fe>
 800413a:	89ab      	ldrh	r3, [r5, #12]
 800413c:	059a      	lsls	r2, r3, #22
 800413e:	d402      	bmi.n	8004146 <_vfiprintf_r+0x1fe>
 8004140:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004142:	f7ff fc85 	bl	8003a50 <__retarget_lock_release_recursive>
 8004146:	89ab      	ldrh	r3, [r5, #12]
 8004148:	065b      	lsls	r3, r3, #25
 800414a:	f53f af1f 	bmi.w	8003f8c <_vfiprintf_r+0x44>
 800414e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004150:	e71e      	b.n	8003f90 <_vfiprintf_r+0x48>
 8004152:	ab03      	add	r3, sp, #12
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	462a      	mov	r2, r5
 8004158:	4b05      	ldr	r3, [pc, #20]	@ (8004170 <_vfiprintf_r+0x228>)
 800415a:	a904      	add	r1, sp, #16
 800415c:	4630      	mov	r0, r6
 800415e:	f000 f879 	bl	8004254 <_printf_i>
 8004162:	e7e4      	b.n	800412e <_vfiprintf_r+0x1e6>
 8004164:	08004ae4 	.word	0x08004ae4
 8004168:	08004aee 	.word	0x08004aee
 800416c:	00000000 	.word	0x00000000
 8004170:	08003f23 	.word	0x08003f23
 8004174:	08004aea 	.word	0x08004aea

08004178 <_printf_common>:
 8004178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800417c:	4616      	mov	r6, r2
 800417e:	4698      	mov	r8, r3
 8004180:	688a      	ldr	r2, [r1, #8]
 8004182:	690b      	ldr	r3, [r1, #16]
 8004184:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004188:	4293      	cmp	r3, r2
 800418a:	bfb8      	it	lt
 800418c:	4613      	movlt	r3, r2
 800418e:	6033      	str	r3, [r6, #0]
 8004190:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004194:	4607      	mov	r7, r0
 8004196:	460c      	mov	r4, r1
 8004198:	b10a      	cbz	r2, 800419e <_printf_common+0x26>
 800419a:	3301      	adds	r3, #1
 800419c:	6033      	str	r3, [r6, #0]
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	0699      	lsls	r1, r3, #26
 80041a2:	bf42      	ittt	mi
 80041a4:	6833      	ldrmi	r3, [r6, #0]
 80041a6:	3302      	addmi	r3, #2
 80041a8:	6033      	strmi	r3, [r6, #0]
 80041aa:	6825      	ldr	r5, [r4, #0]
 80041ac:	f015 0506 	ands.w	r5, r5, #6
 80041b0:	d106      	bne.n	80041c0 <_printf_common+0x48>
 80041b2:	f104 0a19 	add.w	sl, r4, #25
 80041b6:	68e3      	ldr	r3, [r4, #12]
 80041b8:	6832      	ldr	r2, [r6, #0]
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	42ab      	cmp	r3, r5
 80041be:	dc26      	bgt.n	800420e <_printf_common+0x96>
 80041c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80041c4:	6822      	ldr	r2, [r4, #0]
 80041c6:	3b00      	subs	r3, #0
 80041c8:	bf18      	it	ne
 80041ca:	2301      	movne	r3, #1
 80041cc:	0692      	lsls	r2, r2, #26
 80041ce:	d42b      	bmi.n	8004228 <_printf_common+0xb0>
 80041d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80041d4:	4641      	mov	r1, r8
 80041d6:	4638      	mov	r0, r7
 80041d8:	47c8      	blx	r9
 80041da:	3001      	adds	r0, #1
 80041dc:	d01e      	beq.n	800421c <_printf_common+0xa4>
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	6922      	ldr	r2, [r4, #16]
 80041e2:	f003 0306 	and.w	r3, r3, #6
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	bf02      	ittt	eq
 80041ea:	68e5      	ldreq	r5, [r4, #12]
 80041ec:	6833      	ldreq	r3, [r6, #0]
 80041ee:	1aed      	subeq	r5, r5, r3
 80041f0:	68a3      	ldr	r3, [r4, #8]
 80041f2:	bf0c      	ite	eq
 80041f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041f8:	2500      	movne	r5, #0
 80041fa:	4293      	cmp	r3, r2
 80041fc:	bfc4      	itt	gt
 80041fe:	1a9b      	subgt	r3, r3, r2
 8004200:	18ed      	addgt	r5, r5, r3
 8004202:	2600      	movs	r6, #0
 8004204:	341a      	adds	r4, #26
 8004206:	42b5      	cmp	r5, r6
 8004208:	d11a      	bne.n	8004240 <_printf_common+0xc8>
 800420a:	2000      	movs	r0, #0
 800420c:	e008      	b.n	8004220 <_printf_common+0xa8>
 800420e:	2301      	movs	r3, #1
 8004210:	4652      	mov	r2, sl
 8004212:	4641      	mov	r1, r8
 8004214:	4638      	mov	r0, r7
 8004216:	47c8      	blx	r9
 8004218:	3001      	adds	r0, #1
 800421a:	d103      	bne.n	8004224 <_printf_common+0xac>
 800421c:	f04f 30ff 	mov.w	r0, #4294967295
 8004220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004224:	3501      	adds	r5, #1
 8004226:	e7c6      	b.n	80041b6 <_printf_common+0x3e>
 8004228:	18e1      	adds	r1, r4, r3
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	2030      	movs	r0, #48	@ 0x30
 800422e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004232:	4422      	add	r2, r4
 8004234:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004238:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800423c:	3302      	adds	r3, #2
 800423e:	e7c7      	b.n	80041d0 <_printf_common+0x58>
 8004240:	2301      	movs	r3, #1
 8004242:	4622      	mov	r2, r4
 8004244:	4641      	mov	r1, r8
 8004246:	4638      	mov	r0, r7
 8004248:	47c8      	blx	r9
 800424a:	3001      	adds	r0, #1
 800424c:	d0e6      	beq.n	800421c <_printf_common+0xa4>
 800424e:	3601      	adds	r6, #1
 8004250:	e7d9      	b.n	8004206 <_printf_common+0x8e>
	...

08004254 <_printf_i>:
 8004254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004258:	7e0f      	ldrb	r7, [r1, #24]
 800425a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800425c:	2f78      	cmp	r7, #120	@ 0x78
 800425e:	4691      	mov	r9, r2
 8004260:	4680      	mov	r8, r0
 8004262:	460c      	mov	r4, r1
 8004264:	469a      	mov	sl, r3
 8004266:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800426a:	d807      	bhi.n	800427c <_printf_i+0x28>
 800426c:	2f62      	cmp	r7, #98	@ 0x62
 800426e:	d80a      	bhi.n	8004286 <_printf_i+0x32>
 8004270:	2f00      	cmp	r7, #0
 8004272:	f000 80d1 	beq.w	8004418 <_printf_i+0x1c4>
 8004276:	2f58      	cmp	r7, #88	@ 0x58
 8004278:	f000 80b8 	beq.w	80043ec <_printf_i+0x198>
 800427c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004280:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004284:	e03a      	b.n	80042fc <_printf_i+0xa8>
 8004286:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800428a:	2b15      	cmp	r3, #21
 800428c:	d8f6      	bhi.n	800427c <_printf_i+0x28>
 800428e:	a101      	add	r1, pc, #4	@ (adr r1, 8004294 <_printf_i+0x40>)
 8004290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004294:	080042ed 	.word	0x080042ed
 8004298:	08004301 	.word	0x08004301
 800429c:	0800427d 	.word	0x0800427d
 80042a0:	0800427d 	.word	0x0800427d
 80042a4:	0800427d 	.word	0x0800427d
 80042a8:	0800427d 	.word	0x0800427d
 80042ac:	08004301 	.word	0x08004301
 80042b0:	0800427d 	.word	0x0800427d
 80042b4:	0800427d 	.word	0x0800427d
 80042b8:	0800427d 	.word	0x0800427d
 80042bc:	0800427d 	.word	0x0800427d
 80042c0:	080043ff 	.word	0x080043ff
 80042c4:	0800432b 	.word	0x0800432b
 80042c8:	080043b9 	.word	0x080043b9
 80042cc:	0800427d 	.word	0x0800427d
 80042d0:	0800427d 	.word	0x0800427d
 80042d4:	08004421 	.word	0x08004421
 80042d8:	0800427d 	.word	0x0800427d
 80042dc:	0800432b 	.word	0x0800432b
 80042e0:	0800427d 	.word	0x0800427d
 80042e4:	0800427d 	.word	0x0800427d
 80042e8:	080043c1 	.word	0x080043c1
 80042ec:	6833      	ldr	r3, [r6, #0]
 80042ee:	1d1a      	adds	r2, r3, #4
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6032      	str	r2, [r6, #0]
 80042f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80042fc:	2301      	movs	r3, #1
 80042fe:	e09c      	b.n	800443a <_printf_i+0x1e6>
 8004300:	6833      	ldr	r3, [r6, #0]
 8004302:	6820      	ldr	r0, [r4, #0]
 8004304:	1d19      	adds	r1, r3, #4
 8004306:	6031      	str	r1, [r6, #0]
 8004308:	0606      	lsls	r6, r0, #24
 800430a:	d501      	bpl.n	8004310 <_printf_i+0xbc>
 800430c:	681d      	ldr	r5, [r3, #0]
 800430e:	e003      	b.n	8004318 <_printf_i+0xc4>
 8004310:	0645      	lsls	r5, r0, #25
 8004312:	d5fb      	bpl.n	800430c <_printf_i+0xb8>
 8004314:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004318:	2d00      	cmp	r5, #0
 800431a:	da03      	bge.n	8004324 <_printf_i+0xd0>
 800431c:	232d      	movs	r3, #45	@ 0x2d
 800431e:	426d      	negs	r5, r5
 8004320:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004324:	4858      	ldr	r0, [pc, #352]	@ (8004488 <_printf_i+0x234>)
 8004326:	230a      	movs	r3, #10
 8004328:	e011      	b.n	800434e <_printf_i+0xfa>
 800432a:	6821      	ldr	r1, [r4, #0]
 800432c:	6833      	ldr	r3, [r6, #0]
 800432e:	0608      	lsls	r0, r1, #24
 8004330:	f853 5b04 	ldr.w	r5, [r3], #4
 8004334:	d402      	bmi.n	800433c <_printf_i+0xe8>
 8004336:	0649      	lsls	r1, r1, #25
 8004338:	bf48      	it	mi
 800433a:	b2ad      	uxthmi	r5, r5
 800433c:	2f6f      	cmp	r7, #111	@ 0x6f
 800433e:	4852      	ldr	r0, [pc, #328]	@ (8004488 <_printf_i+0x234>)
 8004340:	6033      	str	r3, [r6, #0]
 8004342:	bf14      	ite	ne
 8004344:	230a      	movne	r3, #10
 8004346:	2308      	moveq	r3, #8
 8004348:	2100      	movs	r1, #0
 800434a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800434e:	6866      	ldr	r6, [r4, #4]
 8004350:	60a6      	str	r6, [r4, #8]
 8004352:	2e00      	cmp	r6, #0
 8004354:	db05      	blt.n	8004362 <_printf_i+0x10e>
 8004356:	6821      	ldr	r1, [r4, #0]
 8004358:	432e      	orrs	r6, r5
 800435a:	f021 0104 	bic.w	r1, r1, #4
 800435e:	6021      	str	r1, [r4, #0]
 8004360:	d04b      	beq.n	80043fa <_printf_i+0x1a6>
 8004362:	4616      	mov	r6, r2
 8004364:	fbb5 f1f3 	udiv	r1, r5, r3
 8004368:	fb03 5711 	mls	r7, r3, r1, r5
 800436c:	5dc7      	ldrb	r7, [r0, r7]
 800436e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004372:	462f      	mov	r7, r5
 8004374:	42bb      	cmp	r3, r7
 8004376:	460d      	mov	r5, r1
 8004378:	d9f4      	bls.n	8004364 <_printf_i+0x110>
 800437a:	2b08      	cmp	r3, #8
 800437c:	d10b      	bne.n	8004396 <_printf_i+0x142>
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	07df      	lsls	r7, r3, #31
 8004382:	d508      	bpl.n	8004396 <_printf_i+0x142>
 8004384:	6923      	ldr	r3, [r4, #16]
 8004386:	6861      	ldr	r1, [r4, #4]
 8004388:	4299      	cmp	r1, r3
 800438a:	bfde      	ittt	le
 800438c:	2330      	movle	r3, #48	@ 0x30
 800438e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004392:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004396:	1b92      	subs	r2, r2, r6
 8004398:	6122      	str	r2, [r4, #16]
 800439a:	f8cd a000 	str.w	sl, [sp]
 800439e:	464b      	mov	r3, r9
 80043a0:	aa03      	add	r2, sp, #12
 80043a2:	4621      	mov	r1, r4
 80043a4:	4640      	mov	r0, r8
 80043a6:	f7ff fee7 	bl	8004178 <_printf_common>
 80043aa:	3001      	adds	r0, #1
 80043ac:	d14a      	bne.n	8004444 <_printf_i+0x1f0>
 80043ae:	f04f 30ff 	mov.w	r0, #4294967295
 80043b2:	b004      	add	sp, #16
 80043b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	f043 0320 	orr.w	r3, r3, #32
 80043be:	6023      	str	r3, [r4, #0]
 80043c0:	4832      	ldr	r0, [pc, #200]	@ (800448c <_printf_i+0x238>)
 80043c2:	2778      	movs	r7, #120	@ 0x78
 80043c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	6831      	ldr	r1, [r6, #0]
 80043cc:	061f      	lsls	r7, r3, #24
 80043ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80043d2:	d402      	bmi.n	80043da <_printf_i+0x186>
 80043d4:	065f      	lsls	r7, r3, #25
 80043d6:	bf48      	it	mi
 80043d8:	b2ad      	uxthmi	r5, r5
 80043da:	6031      	str	r1, [r6, #0]
 80043dc:	07d9      	lsls	r1, r3, #31
 80043de:	bf44      	itt	mi
 80043e0:	f043 0320 	orrmi.w	r3, r3, #32
 80043e4:	6023      	strmi	r3, [r4, #0]
 80043e6:	b11d      	cbz	r5, 80043f0 <_printf_i+0x19c>
 80043e8:	2310      	movs	r3, #16
 80043ea:	e7ad      	b.n	8004348 <_printf_i+0xf4>
 80043ec:	4826      	ldr	r0, [pc, #152]	@ (8004488 <_printf_i+0x234>)
 80043ee:	e7e9      	b.n	80043c4 <_printf_i+0x170>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	f023 0320 	bic.w	r3, r3, #32
 80043f6:	6023      	str	r3, [r4, #0]
 80043f8:	e7f6      	b.n	80043e8 <_printf_i+0x194>
 80043fa:	4616      	mov	r6, r2
 80043fc:	e7bd      	b.n	800437a <_printf_i+0x126>
 80043fe:	6833      	ldr	r3, [r6, #0]
 8004400:	6825      	ldr	r5, [r4, #0]
 8004402:	6961      	ldr	r1, [r4, #20]
 8004404:	1d18      	adds	r0, r3, #4
 8004406:	6030      	str	r0, [r6, #0]
 8004408:	062e      	lsls	r6, r5, #24
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	d501      	bpl.n	8004412 <_printf_i+0x1be>
 800440e:	6019      	str	r1, [r3, #0]
 8004410:	e002      	b.n	8004418 <_printf_i+0x1c4>
 8004412:	0668      	lsls	r0, r5, #25
 8004414:	d5fb      	bpl.n	800440e <_printf_i+0x1ba>
 8004416:	8019      	strh	r1, [r3, #0]
 8004418:	2300      	movs	r3, #0
 800441a:	6123      	str	r3, [r4, #16]
 800441c:	4616      	mov	r6, r2
 800441e:	e7bc      	b.n	800439a <_printf_i+0x146>
 8004420:	6833      	ldr	r3, [r6, #0]
 8004422:	1d1a      	adds	r2, r3, #4
 8004424:	6032      	str	r2, [r6, #0]
 8004426:	681e      	ldr	r6, [r3, #0]
 8004428:	6862      	ldr	r2, [r4, #4]
 800442a:	2100      	movs	r1, #0
 800442c:	4630      	mov	r0, r6
 800442e:	f7fb fed7 	bl	80001e0 <memchr>
 8004432:	b108      	cbz	r0, 8004438 <_printf_i+0x1e4>
 8004434:	1b80      	subs	r0, r0, r6
 8004436:	6060      	str	r0, [r4, #4]
 8004438:	6863      	ldr	r3, [r4, #4]
 800443a:	6123      	str	r3, [r4, #16]
 800443c:	2300      	movs	r3, #0
 800443e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004442:	e7aa      	b.n	800439a <_printf_i+0x146>
 8004444:	6923      	ldr	r3, [r4, #16]
 8004446:	4632      	mov	r2, r6
 8004448:	4649      	mov	r1, r9
 800444a:	4640      	mov	r0, r8
 800444c:	47d0      	blx	sl
 800444e:	3001      	adds	r0, #1
 8004450:	d0ad      	beq.n	80043ae <_printf_i+0x15a>
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	079b      	lsls	r3, r3, #30
 8004456:	d413      	bmi.n	8004480 <_printf_i+0x22c>
 8004458:	68e0      	ldr	r0, [r4, #12]
 800445a:	9b03      	ldr	r3, [sp, #12]
 800445c:	4298      	cmp	r0, r3
 800445e:	bfb8      	it	lt
 8004460:	4618      	movlt	r0, r3
 8004462:	e7a6      	b.n	80043b2 <_printf_i+0x15e>
 8004464:	2301      	movs	r3, #1
 8004466:	4632      	mov	r2, r6
 8004468:	4649      	mov	r1, r9
 800446a:	4640      	mov	r0, r8
 800446c:	47d0      	blx	sl
 800446e:	3001      	adds	r0, #1
 8004470:	d09d      	beq.n	80043ae <_printf_i+0x15a>
 8004472:	3501      	adds	r5, #1
 8004474:	68e3      	ldr	r3, [r4, #12]
 8004476:	9903      	ldr	r1, [sp, #12]
 8004478:	1a5b      	subs	r3, r3, r1
 800447a:	42ab      	cmp	r3, r5
 800447c:	dcf2      	bgt.n	8004464 <_printf_i+0x210>
 800447e:	e7eb      	b.n	8004458 <_printf_i+0x204>
 8004480:	2500      	movs	r5, #0
 8004482:	f104 0619 	add.w	r6, r4, #25
 8004486:	e7f5      	b.n	8004474 <_printf_i+0x220>
 8004488:	08004af5 	.word	0x08004af5
 800448c:	08004b06 	.word	0x08004b06

08004490 <__sflush_r>:
 8004490:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004498:	0716      	lsls	r6, r2, #28
 800449a:	4605      	mov	r5, r0
 800449c:	460c      	mov	r4, r1
 800449e:	d454      	bmi.n	800454a <__sflush_r+0xba>
 80044a0:	684b      	ldr	r3, [r1, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	dc02      	bgt.n	80044ac <__sflush_r+0x1c>
 80044a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	dd48      	ble.n	800453e <__sflush_r+0xae>
 80044ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80044ae:	2e00      	cmp	r6, #0
 80044b0:	d045      	beq.n	800453e <__sflush_r+0xae>
 80044b2:	2300      	movs	r3, #0
 80044b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80044b8:	682f      	ldr	r7, [r5, #0]
 80044ba:	6a21      	ldr	r1, [r4, #32]
 80044bc:	602b      	str	r3, [r5, #0]
 80044be:	d030      	beq.n	8004522 <__sflush_r+0x92>
 80044c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80044c2:	89a3      	ldrh	r3, [r4, #12]
 80044c4:	0759      	lsls	r1, r3, #29
 80044c6:	d505      	bpl.n	80044d4 <__sflush_r+0x44>
 80044c8:	6863      	ldr	r3, [r4, #4]
 80044ca:	1ad2      	subs	r2, r2, r3
 80044cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80044ce:	b10b      	cbz	r3, 80044d4 <__sflush_r+0x44>
 80044d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80044d2:	1ad2      	subs	r2, r2, r3
 80044d4:	2300      	movs	r3, #0
 80044d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80044d8:	6a21      	ldr	r1, [r4, #32]
 80044da:	4628      	mov	r0, r5
 80044dc:	47b0      	blx	r6
 80044de:	1c43      	adds	r3, r0, #1
 80044e0:	89a3      	ldrh	r3, [r4, #12]
 80044e2:	d106      	bne.n	80044f2 <__sflush_r+0x62>
 80044e4:	6829      	ldr	r1, [r5, #0]
 80044e6:	291d      	cmp	r1, #29
 80044e8:	d82b      	bhi.n	8004542 <__sflush_r+0xb2>
 80044ea:	4a2a      	ldr	r2, [pc, #168]	@ (8004594 <__sflush_r+0x104>)
 80044ec:	40ca      	lsrs	r2, r1
 80044ee:	07d6      	lsls	r6, r2, #31
 80044f0:	d527      	bpl.n	8004542 <__sflush_r+0xb2>
 80044f2:	2200      	movs	r2, #0
 80044f4:	6062      	str	r2, [r4, #4]
 80044f6:	04d9      	lsls	r1, r3, #19
 80044f8:	6922      	ldr	r2, [r4, #16]
 80044fa:	6022      	str	r2, [r4, #0]
 80044fc:	d504      	bpl.n	8004508 <__sflush_r+0x78>
 80044fe:	1c42      	adds	r2, r0, #1
 8004500:	d101      	bne.n	8004506 <__sflush_r+0x76>
 8004502:	682b      	ldr	r3, [r5, #0]
 8004504:	b903      	cbnz	r3, 8004508 <__sflush_r+0x78>
 8004506:	6560      	str	r0, [r4, #84]	@ 0x54
 8004508:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800450a:	602f      	str	r7, [r5, #0]
 800450c:	b1b9      	cbz	r1, 800453e <__sflush_r+0xae>
 800450e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004512:	4299      	cmp	r1, r3
 8004514:	d002      	beq.n	800451c <__sflush_r+0x8c>
 8004516:	4628      	mov	r0, r5
 8004518:	f7ff fa9c 	bl	8003a54 <_free_r>
 800451c:	2300      	movs	r3, #0
 800451e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004520:	e00d      	b.n	800453e <__sflush_r+0xae>
 8004522:	2301      	movs	r3, #1
 8004524:	4628      	mov	r0, r5
 8004526:	47b0      	blx	r6
 8004528:	4602      	mov	r2, r0
 800452a:	1c50      	adds	r0, r2, #1
 800452c:	d1c9      	bne.n	80044c2 <__sflush_r+0x32>
 800452e:	682b      	ldr	r3, [r5, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0c6      	beq.n	80044c2 <__sflush_r+0x32>
 8004534:	2b1d      	cmp	r3, #29
 8004536:	d001      	beq.n	800453c <__sflush_r+0xac>
 8004538:	2b16      	cmp	r3, #22
 800453a:	d11e      	bne.n	800457a <__sflush_r+0xea>
 800453c:	602f      	str	r7, [r5, #0]
 800453e:	2000      	movs	r0, #0
 8004540:	e022      	b.n	8004588 <__sflush_r+0xf8>
 8004542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004546:	b21b      	sxth	r3, r3
 8004548:	e01b      	b.n	8004582 <__sflush_r+0xf2>
 800454a:	690f      	ldr	r7, [r1, #16]
 800454c:	2f00      	cmp	r7, #0
 800454e:	d0f6      	beq.n	800453e <__sflush_r+0xae>
 8004550:	0793      	lsls	r3, r2, #30
 8004552:	680e      	ldr	r6, [r1, #0]
 8004554:	bf08      	it	eq
 8004556:	694b      	ldreq	r3, [r1, #20]
 8004558:	600f      	str	r7, [r1, #0]
 800455a:	bf18      	it	ne
 800455c:	2300      	movne	r3, #0
 800455e:	eba6 0807 	sub.w	r8, r6, r7
 8004562:	608b      	str	r3, [r1, #8]
 8004564:	f1b8 0f00 	cmp.w	r8, #0
 8004568:	dde9      	ble.n	800453e <__sflush_r+0xae>
 800456a:	6a21      	ldr	r1, [r4, #32]
 800456c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800456e:	4643      	mov	r3, r8
 8004570:	463a      	mov	r2, r7
 8004572:	4628      	mov	r0, r5
 8004574:	47b0      	blx	r6
 8004576:	2800      	cmp	r0, #0
 8004578:	dc08      	bgt.n	800458c <__sflush_r+0xfc>
 800457a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800457e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004582:	81a3      	strh	r3, [r4, #12]
 8004584:	f04f 30ff 	mov.w	r0, #4294967295
 8004588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800458c:	4407      	add	r7, r0
 800458e:	eba8 0800 	sub.w	r8, r8, r0
 8004592:	e7e7      	b.n	8004564 <__sflush_r+0xd4>
 8004594:	20400001 	.word	0x20400001

08004598 <_fflush_r>:
 8004598:	b538      	push	{r3, r4, r5, lr}
 800459a:	690b      	ldr	r3, [r1, #16]
 800459c:	4605      	mov	r5, r0
 800459e:	460c      	mov	r4, r1
 80045a0:	b913      	cbnz	r3, 80045a8 <_fflush_r+0x10>
 80045a2:	2500      	movs	r5, #0
 80045a4:	4628      	mov	r0, r5
 80045a6:	bd38      	pop	{r3, r4, r5, pc}
 80045a8:	b118      	cbz	r0, 80045b2 <_fflush_r+0x1a>
 80045aa:	6a03      	ldr	r3, [r0, #32]
 80045ac:	b90b      	cbnz	r3, 80045b2 <_fflush_r+0x1a>
 80045ae:	f7ff f821 	bl	80035f4 <__sinit>
 80045b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f3      	beq.n	80045a2 <_fflush_r+0xa>
 80045ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80045bc:	07d0      	lsls	r0, r2, #31
 80045be:	d404      	bmi.n	80045ca <_fflush_r+0x32>
 80045c0:	0599      	lsls	r1, r3, #22
 80045c2:	d402      	bmi.n	80045ca <_fflush_r+0x32>
 80045c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045c6:	f7ff fa42 	bl	8003a4e <__retarget_lock_acquire_recursive>
 80045ca:	4628      	mov	r0, r5
 80045cc:	4621      	mov	r1, r4
 80045ce:	f7ff ff5f 	bl	8004490 <__sflush_r>
 80045d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045d4:	07da      	lsls	r2, r3, #31
 80045d6:	4605      	mov	r5, r0
 80045d8:	d4e4      	bmi.n	80045a4 <_fflush_r+0xc>
 80045da:	89a3      	ldrh	r3, [r4, #12]
 80045dc:	059b      	lsls	r3, r3, #22
 80045de:	d4e1      	bmi.n	80045a4 <_fflush_r+0xc>
 80045e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045e2:	f7ff fa35 	bl	8003a50 <__retarget_lock_release_recursive>
 80045e6:	e7dd      	b.n	80045a4 <_fflush_r+0xc>

080045e8 <__swhatbuf_r>:
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	460c      	mov	r4, r1
 80045ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045f0:	2900      	cmp	r1, #0
 80045f2:	b096      	sub	sp, #88	@ 0x58
 80045f4:	4615      	mov	r5, r2
 80045f6:	461e      	mov	r6, r3
 80045f8:	da0d      	bge.n	8004616 <__swhatbuf_r+0x2e>
 80045fa:	89a3      	ldrh	r3, [r4, #12]
 80045fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004600:	f04f 0100 	mov.w	r1, #0
 8004604:	bf14      	ite	ne
 8004606:	2340      	movne	r3, #64	@ 0x40
 8004608:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800460c:	2000      	movs	r0, #0
 800460e:	6031      	str	r1, [r6, #0]
 8004610:	602b      	str	r3, [r5, #0]
 8004612:	b016      	add	sp, #88	@ 0x58
 8004614:	bd70      	pop	{r4, r5, r6, pc}
 8004616:	466a      	mov	r2, sp
 8004618:	f000 f862 	bl	80046e0 <_fstat_r>
 800461c:	2800      	cmp	r0, #0
 800461e:	dbec      	blt.n	80045fa <__swhatbuf_r+0x12>
 8004620:	9901      	ldr	r1, [sp, #4]
 8004622:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004626:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800462a:	4259      	negs	r1, r3
 800462c:	4159      	adcs	r1, r3
 800462e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004632:	e7eb      	b.n	800460c <__swhatbuf_r+0x24>

08004634 <__smakebuf_r>:
 8004634:	898b      	ldrh	r3, [r1, #12]
 8004636:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004638:	079d      	lsls	r5, r3, #30
 800463a:	4606      	mov	r6, r0
 800463c:	460c      	mov	r4, r1
 800463e:	d507      	bpl.n	8004650 <__smakebuf_r+0x1c>
 8004640:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004644:	6023      	str	r3, [r4, #0]
 8004646:	6123      	str	r3, [r4, #16]
 8004648:	2301      	movs	r3, #1
 800464a:	6163      	str	r3, [r4, #20]
 800464c:	b003      	add	sp, #12
 800464e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004650:	ab01      	add	r3, sp, #4
 8004652:	466a      	mov	r2, sp
 8004654:	f7ff ffc8 	bl	80045e8 <__swhatbuf_r>
 8004658:	9f00      	ldr	r7, [sp, #0]
 800465a:	4605      	mov	r5, r0
 800465c:	4639      	mov	r1, r7
 800465e:	4630      	mov	r0, r6
 8004660:	f7ff fa64 	bl	8003b2c <_malloc_r>
 8004664:	b948      	cbnz	r0, 800467a <__smakebuf_r+0x46>
 8004666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800466a:	059a      	lsls	r2, r3, #22
 800466c:	d4ee      	bmi.n	800464c <__smakebuf_r+0x18>
 800466e:	f023 0303 	bic.w	r3, r3, #3
 8004672:	f043 0302 	orr.w	r3, r3, #2
 8004676:	81a3      	strh	r3, [r4, #12]
 8004678:	e7e2      	b.n	8004640 <__smakebuf_r+0xc>
 800467a:	89a3      	ldrh	r3, [r4, #12]
 800467c:	6020      	str	r0, [r4, #0]
 800467e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004682:	81a3      	strh	r3, [r4, #12]
 8004684:	9b01      	ldr	r3, [sp, #4]
 8004686:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800468a:	b15b      	cbz	r3, 80046a4 <__smakebuf_r+0x70>
 800468c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004690:	4630      	mov	r0, r6
 8004692:	f000 f837 	bl	8004704 <_isatty_r>
 8004696:	b128      	cbz	r0, 80046a4 <__smakebuf_r+0x70>
 8004698:	89a3      	ldrh	r3, [r4, #12]
 800469a:	f023 0303 	bic.w	r3, r3, #3
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	81a3      	strh	r3, [r4, #12]
 80046a4:	89a3      	ldrh	r3, [r4, #12]
 80046a6:	431d      	orrs	r5, r3
 80046a8:	81a5      	strh	r5, [r4, #12]
 80046aa:	e7cf      	b.n	800464c <__smakebuf_r+0x18>

080046ac <memmove>:
 80046ac:	4288      	cmp	r0, r1
 80046ae:	b510      	push	{r4, lr}
 80046b0:	eb01 0402 	add.w	r4, r1, r2
 80046b4:	d902      	bls.n	80046bc <memmove+0x10>
 80046b6:	4284      	cmp	r4, r0
 80046b8:	4623      	mov	r3, r4
 80046ba:	d807      	bhi.n	80046cc <memmove+0x20>
 80046bc:	1e43      	subs	r3, r0, #1
 80046be:	42a1      	cmp	r1, r4
 80046c0:	d008      	beq.n	80046d4 <memmove+0x28>
 80046c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046ca:	e7f8      	b.n	80046be <memmove+0x12>
 80046cc:	4402      	add	r2, r0
 80046ce:	4601      	mov	r1, r0
 80046d0:	428a      	cmp	r2, r1
 80046d2:	d100      	bne.n	80046d6 <memmove+0x2a>
 80046d4:	bd10      	pop	{r4, pc}
 80046d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046de:	e7f7      	b.n	80046d0 <memmove+0x24>

080046e0 <_fstat_r>:
 80046e0:	b538      	push	{r3, r4, r5, lr}
 80046e2:	4d07      	ldr	r5, [pc, #28]	@ (8004700 <_fstat_r+0x20>)
 80046e4:	2300      	movs	r3, #0
 80046e6:	4604      	mov	r4, r0
 80046e8:	4608      	mov	r0, r1
 80046ea:	4611      	mov	r1, r2
 80046ec:	602b      	str	r3, [r5, #0]
 80046ee:	f7fc fe01 	bl	80012f4 <_fstat>
 80046f2:	1c43      	adds	r3, r0, #1
 80046f4:	d102      	bne.n	80046fc <_fstat_r+0x1c>
 80046f6:	682b      	ldr	r3, [r5, #0]
 80046f8:	b103      	cbz	r3, 80046fc <_fstat_r+0x1c>
 80046fa:	6023      	str	r3, [r4, #0]
 80046fc:	bd38      	pop	{r3, r4, r5, pc}
 80046fe:	bf00      	nop
 8004700:	20000394 	.word	0x20000394

08004704 <_isatty_r>:
 8004704:	b538      	push	{r3, r4, r5, lr}
 8004706:	4d06      	ldr	r5, [pc, #24]	@ (8004720 <_isatty_r+0x1c>)
 8004708:	2300      	movs	r3, #0
 800470a:	4604      	mov	r4, r0
 800470c:	4608      	mov	r0, r1
 800470e:	602b      	str	r3, [r5, #0]
 8004710:	f7fc fe00 	bl	8001314 <_isatty>
 8004714:	1c43      	adds	r3, r0, #1
 8004716:	d102      	bne.n	800471e <_isatty_r+0x1a>
 8004718:	682b      	ldr	r3, [r5, #0]
 800471a:	b103      	cbz	r3, 800471e <_isatty_r+0x1a>
 800471c:	6023      	str	r3, [r4, #0]
 800471e:	bd38      	pop	{r3, r4, r5, pc}
 8004720:	20000394 	.word	0x20000394

08004724 <_sbrk_r>:
 8004724:	b538      	push	{r3, r4, r5, lr}
 8004726:	4d06      	ldr	r5, [pc, #24]	@ (8004740 <_sbrk_r+0x1c>)
 8004728:	2300      	movs	r3, #0
 800472a:	4604      	mov	r4, r0
 800472c:	4608      	mov	r0, r1
 800472e:	602b      	str	r3, [r5, #0]
 8004730:	f7fc fe08 	bl	8001344 <_sbrk>
 8004734:	1c43      	adds	r3, r0, #1
 8004736:	d102      	bne.n	800473e <_sbrk_r+0x1a>
 8004738:	682b      	ldr	r3, [r5, #0]
 800473a:	b103      	cbz	r3, 800473e <_sbrk_r+0x1a>
 800473c:	6023      	str	r3, [r4, #0]
 800473e:	bd38      	pop	{r3, r4, r5, pc}
 8004740:	20000394 	.word	0x20000394

08004744 <memcpy>:
 8004744:	440a      	add	r2, r1
 8004746:	4291      	cmp	r1, r2
 8004748:	f100 33ff 	add.w	r3, r0, #4294967295
 800474c:	d100      	bne.n	8004750 <memcpy+0xc>
 800474e:	4770      	bx	lr
 8004750:	b510      	push	{r4, lr}
 8004752:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004756:	f803 4f01 	strb.w	r4, [r3, #1]!
 800475a:	4291      	cmp	r1, r2
 800475c:	d1f9      	bne.n	8004752 <memcpy+0xe>
 800475e:	bd10      	pop	{r4, pc}

08004760 <_realloc_r>:
 8004760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004764:	4607      	mov	r7, r0
 8004766:	4614      	mov	r4, r2
 8004768:	460d      	mov	r5, r1
 800476a:	b921      	cbnz	r1, 8004776 <_realloc_r+0x16>
 800476c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004770:	4611      	mov	r1, r2
 8004772:	f7ff b9db 	b.w	8003b2c <_malloc_r>
 8004776:	b92a      	cbnz	r2, 8004784 <_realloc_r+0x24>
 8004778:	f7ff f96c 	bl	8003a54 <_free_r>
 800477c:	4625      	mov	r5, r4
 800477e:	4628      	mov	r0, r5
 8004780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004784:	f000 f81a 	bl	80047bc <_malloc_usable_size_r>
 8004788:	4284      	cmp	r4, r0
 800478a:	4606      	mov	r6, r0
 800478c:	d802      	bhi.n	8004794 <_realloc_r+0x34>
 800478e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004792:	d8f4      	bhi.n	800477e <_realloc_r+0x1e>
 8004794:	4621      	mov	r1, r4
 8004796:	4638      	mov	r0, r7
 8004798:	f7ff f9c8 	bl	8003b2c <_malloc_r>
 800479c:	4680      	mov	r8, r0
 800479e:	b908      	cbnz	r0, 80047a4 <_realloc_r+0x44>
 80047a0:	4645      	mov	r5, r8
 80047a2:	e7ec      	b.n	800477e <_realloc_r+0x1e>
 80047a4:	42b4      	cmp	r4, r6
 80047a6:	4622      	mov	r2, r4
 80047a8:	4629      	mov	r1, r5
 80047aa:	bf28      	it	cs
 80047ac:	4632      	movcs	r2, r6
 80047ae:	f7ff ffc9 	bl	8004744 <memcpy>
 80047b2:	4629      	mov	r1, r5
 80047b4:	4638      	mov	r0, r7
 80047b6:	f7ff f94d 	bl	8003a54 <_free_r>
 80047ba:	e7f1      	b.n	80047a0 <_realloc_r+0x40>

080047bc <_malloc_usable_size_r>:
 80047bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047c0:	1f18      	subs	r0, r3, #4
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bfbc      	itt	lt
 80047c6:	580b      	ldrlt	r3, [r1, r0]
 80047c8:	18c0      	addlt	r0, r0, r3
 80047ca:	4770      	bx	lr

080047cc <_init>:
 80047cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ce:	bf00      	nop
 80047d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d2:	bc08      	pop	{r3}
 80047d4:	469e      	mov	lr, r3
 80047d6:	4770      	bx	lr

080047d8 <_fini>:
 80047d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047da:	bf00      	nop
 80047dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047de:	bc08      	pop	{r3}
 80047e0:	469e      	mov	lr, r3
 80047e2:	4770      	bx	lr
